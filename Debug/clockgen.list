
clockgen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d00  08004d00  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d08  08004d08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004d10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000070  08004d80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c2c  08004d80  00024c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fb9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  00032059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00034380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021e9a  00000000  00000000  000350a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010225  00000000  00000000  00056f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d15e8  00000000  00000000  00067167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0013874f  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000c48  00000000  00000000  001387a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a80  00000000  00000000  001393f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004bc0 	.word	0x08004bc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004bc0 	.word	0x08004bc0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uartrecbufftop = 0;
 80005ac:	4b37      	ldr	r3, [pc, #220]	; (800068c <main+0xe4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
	progbuftop = 0;
 80005b2:	4b37      	ldr	r3, [pc, #220]	; (8000690 <main+0xe8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
	current_us = 0;
 80005b8:	4b36      	ldr	r3, [pc, #216]	; (8000694 <main+0xec>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f001 fc73 	bl	8001ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f877 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 fe3d 	bl	8001244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 fe11 	bl	80011f0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005ce:	f000 f8fd 	bl	80007cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d2:	f000 f9b3 	bl	800093c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d6:	f000 fa3d 	bl	8000a54 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005da:	f000 fac9 	bl	8000b70 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005de:	f000 fb55 	bl	8000c8c <MX_TIM5_Init>
  MX_TIM8_Init();
 80005e2:	f000 fc15 	bl	8000e10 <MX_TIM8_Init>
  MX_TIM10_Init();
 80005e6:	f000 fccb 	bl	8000f80 <MX_TIM10_Init>
  MX_TIM11_Init();
 80005ea:	f000 fd17 	bl	800101c <MX_TIM11_Init>
  MX_TIM13_Init();
 80005ee:	f000 fd63 	bl	80010b8 <MX_TIM13_Init>
  MX_TIM14_Init();
 80005f2:	f000 fdaf 	bl	8001154 <MX_TIM14_Init>
  MX_TIM6_Init();
 80005f6:	f000 fbd7 	bl	8000da8 <MX_TIM6_Init>
  MX_CRC_Init();
 80005fa:	f000 f8d3 	bl	80007a4 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005fe:	f000 f8c5 	bl	800078c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	uart_interrupt_toggle(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f001 fb3c 	bl	8001c80 <uart_interrupt_toggle>
	htim6.Instance->CR1 |= TIM_CR1_CEN;
 8000608:	4b23      	ldr	r3, [pc, #140]	; (8000698 <main+0xf0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <main+0xf0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f042 0201 	orr.w	r2, r2, #1
 8000616:	601a      	str	r2, [r3, #0]
	htim6.Instance->DIER |= TIM_DIER_UIE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <main+0xf0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	68da      	ldr	r2, [r3, #12]
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <main+0xf0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f042 0201 	orr.w	r2, r2, #1
 8000626:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (uart_receive_end) {
 8000628:	4b1c      	ldr	r3, [pc, #112]	; (800069c <main+0xf4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d008      	beq.n	8000642 <main+0x9a>
			uart_printf("Hi there, received UART string\r\n");
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <main+0xf8>)
 8000632:	f001 fb45 	bl	8001cc0 <uart_printf>
			uart_receive_end = 0;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <main+0xf4>)
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
			uartrecbufftop = 0;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <main+0xe4>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
		}
		switch (fsm_state) {
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0xfc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d01c      	beq.n	8000684 <main+0xdc>
 800064a:	2b03      	cmp	r3, #3
 800064c:	dcec      	bgt.n	8000628 <main+0x80>
 800064e:	2b00      	cmp	r3, #0
 8000650:	d01a      	beq.n	8000688 <main+0xe0>
 8000652:	2b01      	cmp	r3, #1
 8000654:	d119      	bne.n	800068a <main+0xe2>
		case IDLE:
			break;
		case PROGRAM_RECEIVING:
			ret = receive_program();
 8000656:	f001 fa8d 	bl	8001b74 <receive_program>
 800065a:	4603      	mov	r3, r0
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <main+0x100>)
 800065e:	6013      	str	r3, [r2, #0]
			if (ret < 0) {
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <main+0x100>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	da06      	bge.n	8000676 <main+0xce>
				uart_printf("Error receiving programm\r\n");
 8000668:	4810      	ldr	r0, [pc, #64]	; (80006ac <main+0x104>)
 800066a:	f001 fb29 	bl	8001cc0 <uart_printf>
				fsm_state = IDLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <main+0xfc>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
				break;
 8000674:	e009      	b.n	800068a <main+0xe2>
			}
			uart_printf("Programm successfully received!\r\n");
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <main+0x108>)
 8000678:	f001 fb22 	bl	8001cc0 <uart_printf>
			fsm_state = WAITING_FOR_START;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0xfc>)
 800067e:	2203      	movs	r2, #3
 8000680:	701a      	strb	r2, [r3, #0]
			break;
 8000682:	e002      	b.n	800068a <main+0xe2>
		case WAITING_FOR_START:
			break;
 8000684:	bf00      	nop
 8000686:	e7cf      	b.n	8000628 <main+0x80>
			break;
 8000688:	bf00      	nop
		if (uart_receive_end) {
 800068a:	e7cd      	b.n	8000628 <main+0x80>
 800068c:	20000aa4 	.word	0x20000aa4
 8000690:	200004a0 	.word	0x200004a0
 8000694:	20004aa8 	.word	0x20004aa8
 8000698:	20004aac 	.word	0x20004aac
 800069c:	20000090 	.word	0x20000090
 80006a0:	08004bd8 	.word	0x08004bd8
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	20004c10 	.word	0x20004c10
 80006ac:	08004bfc 	.word	0x08004bfc
 80006b0:	08004c18 	.word	0x08004c18

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	; 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fe2c 	bl	8004320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <SystemClock_Config+0xd0>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <SystemClock_Config+0xd4>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8000728:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800072c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f9b8 	bl	8002ab4 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074a:	f000 fde9 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2105      	movs	r1, #5
 800076c:	4618      	mov	r0, r3
 800076e:	f001 fed5 	bl	800251c <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000778:	f000 fdd2 	bl	8001320 <Error_Handler>
  }
}
 800077c:	bf00      	nop
 800077e:	3750      	adds	r7, #80	; 0x50
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2100      	movs	r1, #0
 8000794:	2026      	movs	r0, #38	; 0x26
 8000796:	f001 fcc0 	bl	800211a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800079a:	2026      	movs	r0, #38	; 0x26
 800079c:	f001 fcd9 	bl	8002152 <HAL_NVIC_EnableIRQ>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CRC_Init+0x20>)
 80007aa:	4a07      	ldr	r2, [pc, #28]	; (80007c8 <MX_CRC_Init+0x24>)
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_CRC_Init+0x20>)
 80007b0:	f001 fce9 	bl	8002186 <HAL_CRC_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ba:	f000 fdb1 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
  /* USER CODE END CRC_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000097c 	.word	0x2000097c
 80007c8:	40023000 	.word	0x40023000

080007cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09a      	sub	sp, #104	; 0x68
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2220      	movs	r2, #32
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 fd83 	bl	8004320 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MX_TIM1_Init+0x168>)
 800081c:	4a46      	ldr	r2, [pc, #280]	; (8000938 <MX_TIM1_Init+0x16c>)
 800081e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000820:	4b44      	ldr	r3, [pc, #272]	; (8000934 <MX_TIM1_Init+0x168>)
 8000822:	2200      	movs	r2, #0
 8000824:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <MX_TIM1_Init+0x168>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082c:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_TIM1_Init+0x168>)
 800082e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <MX_TIM1_Init+0x168>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b3e      	ldr	r3, [pc, #248]	; (8000934 <MX_TIM1_Init+0x168>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b3c      	ldr	r3, [pc, #240]	; (8000934 <MX_TIM1_Init+0x168>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	483b      	ldr	r0, [pc, #236]	; (8000934 <MX_TIM1_Init+0x168>)
 8000848:	f002 fbd2 	bl	8002ff0 <HAL_TIM_Base_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000852:	f000 fd65 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800085c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000860:	4619      	mov	r1, r3
 8000862:	4834      	ldr	r0, [pc, #208]	; (8000934 <MX_TIM1_Init+0x168>)
 8000864:	f002 fcc8 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800086e:	f000 fd57 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000872:	4830      	ldr	r0, [pc, #192]	; (8000934 <MX_TIM1_Init+0x168>)
 8000874:	f002 fc0b 	bl	800308e <HAL_TIM_OC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800087e:	f000 fd4f 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000882:	2306      	movs	r3, #6
 8000884:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000886:	2300      	movs	r3, #0
 8000888:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800088a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800088e:	4619      	mov	r1, r3
 8000890:	4828      	ldr	r0, [pc, #160]	; (8000934 <MX_TIM1_Init+0x168>)
 8000892:	f002 fd78 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800089c:	f000 fd40 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008ac:	4619      	mov	r1, r3
 80008ae:	4821      	ldr	r0, [pc, #132]	; (8000934 <MX_TIM1_Init+0x168>)
 80008b0:	f003 f928 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80008ba:	f000 fd31 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008be:	2330      	movs	r3, #48	; 0x30
 80008c0:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2208      	movs	r2, #8
 80008e0:	4619      	mov	r1, r3
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <MX_TIM1_Init+0x168>)
 80008e4:	f002 fc2c 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80008ee:	f000 fd17 	bl	8001320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <MX_TIM1_Init+0x168>)
 8000916:	f003 f971 	bl	8003bfc <HAL_TIMEx_ConfigBreakDeadTime>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000920:	f000 fcfe 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <MX_TIM1_Init+0x168>)
 8000926:	f000 fe4d 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 800092a:	bf00      	nop
 800092c:	3768      	adds	r7, #104	; 0x68
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20004af4 	.word	0x20004af4
 8000938:	40010000 	.word	0x40010000

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b092      	sub	sp, #72	; 0x48
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MX_TIM2_Init+0x114>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000984:	4b32      	ldr	r3, [pc, #200]	; (8000a50 <MX_TIM2_Init+0x114>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_TIM2_Init+0x114>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_TIM2_Init+0x114>)
 8000992:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_TIM2_Init+0x114>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <MX_TIM2_Init+0x114>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	482a      	ldr	r0, [pc, #168]	; (8000a50 <MX_TIM2_Init+0x114>)
 80009a6:	f002 fb23 	bl	8002ff0 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009b0:	f000 fcb6 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009be:	4619      	mov	r1, r3
 80009c0:	4823      	ldr	r0, [pc, #140]	; (8000a50 <MX_TIM2_Init+0x114>)
 80009c2:	f002 fc19 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009cc:	f000 fca8 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <MX_TIM2_Init+0x114>)
 80009d2:	f002 fb5c 	bl	800308e <HAL_TIM_OC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80009dc:	f000 fca0 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009e0:	2306      	movs	r3, #6
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <MX_TIM2_Init+0x114>)
 80009f0:	f002 fcc9 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80009fa:	f000 fc91 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <MX_TIM2_Init+0x114>)
 8000a0e:	f003 f879 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000a18:	f000 fc82 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a1c:	2330      	movs	r3, #48	; 0x30
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2208      	movs	r2, #8
 8000a30:	4619      	mov	r1, r3
 8000a32:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM2_Init+0x114>)
 8000a34:	f002 fb84 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000a3e:	f000 fc6f 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a42:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM2_Init+0x114>)
 8000a44:	f000 fdbe 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8000a48:	bf00      	nop
 8000a4a:	3748      	adds	r7, #72	; 0x48
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20004b3c 	.word	0x20004b3c

08000a54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b092      	sub	sp, #72	; 0x48
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a94:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000a96:	4a35      	ldr	r2, [pc, #212]	; (8000b6c <MX_TIM3_Init+0x118>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 6553;
 8000aa6:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000aa8:	f641 1299 	movw	r2, #6553	; 0x1999
 8000aac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aba:	482b      	ldr	r0, [pc, #172]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000abc:	f002 fa98 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ac6:	f000 fc2b 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4824      	ldr	r0, [pc, #144]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000ad8:	f002 fb8e 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ae2:	f000 fc1d 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ae6:	4820      	ldr	r0, [pc, #128]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000ae8:	f002 fad1 	bl	800308e <HAL_TIM_OC_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000af2:	f000 fc15 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000af6:	2306      	movs	r3, #6
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000b06:	f002 fc3e 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000b10:	f000 fc06 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000b24:	f002 ffee 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000b2e:	f000 fbf7 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b32:	2330      	movs	r3, #48	; 0x30
 8000b34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	2204      	movs	r2, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000b4a:	f002 faf9 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000b54:	f000 fbe4 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <MX_TIM3_Init+0x114>)
 8000b5a:	f000 fd33 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8000b5e:	bf00      	nop
 8000b60:	3748      	adds	r7, #72	; 0x48
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200009cc 	.word	0x200009cc
 8000b6c:	40000400 	.word	0x40000400

08000b70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b092      	sub	sp, #72	; 0x48
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bb2:	4a35      	ldr	r2, [pc, #212]	; (8000c88 <MX_TIM4_Init+0x118>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b31      	ldr	r3, [pc, #196]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bd6:	482b      	ldr	r0, [pc, #172]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bd8:	f002 fa0a 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000be2:	f000 fb9d 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4824      	ldr	r0, [pc, #144]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000bf4:	f002 fb00 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000bfe:	f000 fb8f 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000c02:	4820      	ldr	r0, [pc, #128]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000c04:	f002 fa43 	bl	800308e <HAL_TIM_OC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8000c0e:	f000 fb87 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c12:	2306      	movs	r3, #6
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4818      	ldr	r0, [pc, #96]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000c22:	f002 fbb0 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8000c2c:	f000 fb78 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000c40:	f002 ff60 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8000c4a:	f000 fb69 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c4e:	2330      	movs	r3, #48	; 0x30
 8000c50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000c66:	f002 fa6b 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000c70:	f000 fb56 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM4_Init+0x114>)
 8000c76:	f000 fca5 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3748      	adds	r7, #72	; 0x48
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200004ec 	.word	0x200004ec
 8000c88:	40000800 	.word	0x40000800

08000c8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b092      	sub	sp, #72	; 0x48
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
 8000cc8:	615a      	str	r2, [r3, #20]
 8000cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000cce:	4a35      	ldr	r2, [pc, #212]	; (8000da4 <MX_TIM5_Init+0x118>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000cf2:	482b      	ldr	r0, [pc, #172]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000cf4:	f002 f97c 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000cfe:	f000 fb0f 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000d08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4824      	ldr	r0, [pc, #144]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000d10:	f002 fa72 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000d1a:	f000 fb01 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000d1e:	4820      	ldr	r0, [pc, #128]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000d20:	f002 f9b5 	bl	800308e <HAL_TIM_OC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000d2a:	f000 faf9 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d2e:	2306      	movs	r3, #6
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000d3e:	f002 fb22 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000d48:	f000 faea 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000d5c:	f002 fed2 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000d66:	f000 fadb 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d6a:	2330      	movs	r3, #48	; 0x30
 8000d6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000d82:	f002 f9dd 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000d8c:	f000 fac8 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM5_Init+0x114>)
 8000d92:	f000 fc17 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8000d96:	bf00      	nop
 8000d98:	3748      	adds	r7, #72	; 0x48
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000984 	.word	0x20000984
 8000da4:	40000c00 	.word	0x40000c00

08000da8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000db8:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <MX_TIM6_Init+0x64>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (TIM_CLOCK_FREQ/TIM_TICK_FREQ) - 1;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000dca:	224f      	movs	r2, #79	; 0x4f
 8000dcc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000dd6:	f002 f90b 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8000de0:	f000 fa9e 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dec:	463b      	mov	r3, r7
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_TIM6_Init+0x60>)
 8000df2:	f002 fe87 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8000dfc:	f000 fa90 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20004aac 	.word	0x20004aac
 8000e0c:	40001000 	.word	0x40001000

08000e10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b09a      	sub	sp, #104	; 0x68
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e52:	463b      	mov	r3, r7
 8000e54:	2220      	movs	r2, #32
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fa61 	bl	8004320 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e60:	4a46      	ldr	r2, [pc, #280]	; (8000f7c <MX_TIM8_Init+0x16c>)
 8000e62:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e64:	4b44      	ldr	r3, [pc, #272]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e76:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e84:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e8a:	483b      	ldr	r0, [pc, #236]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000e8c:	f002 f8b0 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000e96:	f000 fa43 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4834      	ldr	r0, [pc, #208]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000ea8:	f002 f9a6 	bl	80031f8 <HAL_TIM_ConfigClockSource>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000eb2:	f000 fa35 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000eb6:	4830      	ldr	r0, [pc, #192]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000eb8:	f002 f8e9 	bl	800308e <HAL_TIM_OC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000ec2:	f000 fa2d 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000ece:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4828      	ldr	r0, [pc, #160]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000ed6:	f002 fa56 	bl	8003386 <HAL_TIM_SlaveConfigSynchro>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8000ee0:	f000 fa1e 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000eec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4821      	ldr	r0, [pc, #132]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000ef4:	f002 fe06 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8000efe:	f000 fa0f 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000f02:	2330      	movs	r3, #48	; 0x30
 8000f04:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2204      	movs	r2, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4814      	ldr	r0, [pc, #80]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000f28:	f002 f90a 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8000f32:	f000 f9f5 	bl	8001320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000f5a:	f002 fe4f 	bl	8003bfc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8000f64:	f000 f9dc 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <MX_TIM8_Init+0x168>)
 8000f6a:	f000 fb2b 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8000f6e:	bf00      	nop
 8000f70:	3768      	adds	r7, #104	; 0x68
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200004a4 	.word	0x200004a4
 8000f7c:	40010400 	.word	0x40010400

08000f80 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_TIM10_Init+0x94>)
 8000f9a:	4a1f      	ldr	r2, [pc, #124]	; (8001018 <MX_TIM10_Init+0x98>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000f9e:	4b1d      	ldr	r3, [pc, #116]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fbe:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fc0:	f002 f816 	bl	8002ff0 <HAL_TIM_Base_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000fca:	f000 f9a9 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <MX_TIM10_Init+0x94>)
 8000fd0:	f002 f85d 	bl	800308e <HAL_TIM_OC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000fda:	f000 f9a1 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000fde:	2330      	movs	r3, #48	; 0x30
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4807      	ldr	r0, [pc, #28]	; (8001014 <MX_TIM10_Init+0x94>)
 8000ff6:	f002 f8a3 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001000:	f000 f98e 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001004:	4803      	ldr	r0, [pc, #12]	; (8001014 <MX_TIM10_Init+0x94>)
 8001006:	f000 fadd 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 800100a:	bf00      	nop
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000934 	.word	0x20000934
 8001018:	40014400 	.word	0x40014400

0800101c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001034:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <MX_TIM11_Init+0x94>)
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <MX_TIM11_Init+0x98>)
 8001038:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_TIM11_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_TIM11_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_TIM11_Init+0x94>)
 8001048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_TIM11_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_TIM11_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <MX_TIM11_Init+0x94>)
 800105c:	f001 ffc8 	bl	8002ff0 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001066:	f000 f95b 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 800106a:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_TIM11_Init+0x94>)
 800106c:	f002 f80f 	bl	800308e <HAL_TIM_OC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001076:	f000 f953 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800107a:	2330      	movs	r3, #48	; 0x30
 800107c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM11_Init+0x94>)
 8001092:	f002 f855 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800109c:	f000 f940 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80010a0:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM11_Init+0x94>)
 80010a2:	f000 fa8f 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000a5c 	.word	0x20000a5c
 80010b4:	40014800 	.word	0x40014800

080010b8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_TIM13_Init+0x94>)
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <MX_TIM13_Init+0x98>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM13_Init+0x94>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM13_Init+0x94>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_TIM13_Init+0x94>)
 80010e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM13_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_TIM13_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80010f6:	4815      	ldr	r0, [pc, #84]	; (800114c <MX_TIM13_Init+0x94>)
 80010f8:	f001 ff7a 	bl	8002ff0 <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001102:	f000 f90d 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8001106:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_TIM13_Init+0x94>)
 8001108:	f001 ffc1 	bl	800308e <HAL_TIM_OC_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001112:	f000 f905 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001116:	2330      	movs	r3, #48	; 0x30
 8001118:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4807      	ldr	r0, [pc, #28]	; (800114c <MX_TIM13_Init+0x94>)
 800112e:	f002 f807 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001138:	f000 f8f2 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <MX_TIM13_Init+0x94>)
 800113e:	f000 fa41 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000a14 	.word	0x20000a14
 8001150:	40001c00 	.word	0x40001c00

08001154 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]
 800116a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_TIM14_Init+0x94>)
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <MX_TIM14_Init+0x98>)
 8001170:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_TIM14_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_TIM14_Init+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_TIM14_Init+0x94>)
 8001180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001184:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_TIM14_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_TIM14_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <MX_TIM14_Init+0x94>)
 8001194:	f001 ff2c 	bl	8002ff0 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800119e:	f000 f8bf 	bl	8001320 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_TIM14_Init+0x94>)
 80011a4:	f001 ff73 	bl	800308e <HAL_TIM_OC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80011ae:	f000 f8b7 	bl	8001320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80011b2:	2330      	movs	r3, #48	; 0x30
 80011b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM14_Init+0x94>)
 80011ca:	f001 ffb9 	bl	8003140 <HAL_TIM_OC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80011d4:	f000 f8a4 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM14_Init+0x94>)
 80011da:	f000 f9f3 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 80011de:	bf00      	nop
 80011e0:	3720      	adds	r7, #32
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20004bc8 	.word	0x20004bc8
 80011ec:	40002000 	.word	0x40002000

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART2_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_USART2_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_USART2_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART2_UART_Init+0x4c>)
 800121c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001220:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART2_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_USART2_UART_Init+0x4c>)
 800122a:	f002 fd39 	bl	8003ca0 <HAL_UART_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001234:	f000 f874 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20004b84 	.word	0x20004b84
 8001240:	40004400 	.word	0x40004400

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a2c      	ldr	r2, [pc, #176]	; (8001314 <MX_GPIO_Init+0xd0>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a25      	ldr	r2, [pc, #148]	; (8001314 <MX_GPIO_Init+0xd0>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b23      	ldr	r3, [pc, #140]	; (8001314 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_GPIO_Init+0xd0>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	; (8001314 <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	; (8001314 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2130      	movs	r1, #48	; 0x30
 80012ce:	4812      	ldr	r0, [pc, #72]	; (8001318 <MX_GPIO_Init+0xd4>)
 80012d0:	f001 f90a 	bl	80024e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0xd8>)
 80012ec:	f000 ff68 	bl	80021c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_GPIO_Pin LD2_Pin */
  GPIO_InitStruct.Pin = TEST_GPIO_Pin|LD2_Pin;
 80012f0:	2330      	movs	r3, #48	; 0x30
 80012f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_GPIO_Init+0xd4>)
 8001308:	f000 ff5a 	bl	80021c0 <HAL_GPIO_Init>

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <HAL_MspInit+0x4c>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <HAL_MspInit+0x4c>)
 800133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001340:	6453      	str	r3, [r2, #68]	; 0x44
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <HAL_MspInit+0x4c>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_MspInit+0x4c>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x4c>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x4c>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136a:	2007      	movs	r0, #7
 800136c:	f000 feca 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <HAL_CRC_MspInit+0x3c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_CRC_MspInit+0x40>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_CRC_MspInit+0x40>)
 8001398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_CRC_MspInit+0x40>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023000 	.word	0x40023000
 80013bc:	40023800 	.word	0x40023800

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	; 0x38
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a72      	ldr	r2, [pc, #456]	; (8001598 <HAL_TIM_Base_MspInit+0x1d8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10e      	bne.n	80013f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a70      	ldr	r2, [pc, #448]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b6e      	ldr	r3, [pc, #440]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80013ee:	e0ce      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d10e      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a66      	ldr	r2, [pc, #408]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
 8001414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001416:	e0ba      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a60      	ldr	r2, [pc, #384]	; (80015a0 <HAL_TIM_Base_MspInit+0x1e0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10e      	bne.n	8001440 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a5c      	ldr	r2, [pc, #368]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b5a      	ldr	r3, [pc, #360]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800143e:	e0a6      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM4)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <HAL_TIM_Base_MspInit+0x1e4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d10e      	bne.n	8001468 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
 800144e:	4b53      	ldr	r3, [pc, #332]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a52      	ldr	r2, [pc, #328]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b50      	ldr	r3, [pc, #320]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
 8001464:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001466:	e092      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM5)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_TIM_Base_MspInit+0x1e8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10e      	bne.n	8001490 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	4b49      	ldr	r3, [pc, #292]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a48      	ldr	r2, [pc, #288]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800148e:	e07e      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM6)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a45      	ldr	r2, [pc, #276]	; (80015ac <HAL_TIM_Base_MspInit+0x1ec>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d116      	bne.n	80014c8 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	4b3f      	ldr	r3, [pc, #252]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a3e      	ldr	r2, [pc, #248]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80014a4:	f043 0310 	orr.w	r3, r3, #16
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0310 	and.w	r3, r3, #16
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2036      	movs	r0, #54	; 0x36
 80014bc:	f000 fe2d 	bl	800211a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c0:	2036      	movs	r0, #54	; 0x36
 80014c2:	f000 fe46 	bl	8002152 <HAL_NVIC_EnableIRQ>
}
 80014c6:	e062      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM8)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <HAL_TIM_Base_MspInit+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10e      	bne.n	80014f0 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	4a30      	ldr	r2, [pc, #192]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6453      	str	r3, [r2, #68]	; 0x44
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
}
 80014ee:	e04e      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM10)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <HAL_TIM_Base_MspInit+0x1f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d10e      	bne.n	8001518 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	61bb      	str	r3, [r7, #24]
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a26      	ldr	r2, [pc, #152]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	69bb      	ldr	r3, [r7, #24]
}
 8001516:	e03a      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM11)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <HAL_TIM_Base_MspInit+0x1f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d10e      	bne.n	8001540 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
}
 800153e:	e026      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM13)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <HAL_TIM_Base_MspInit+0x1fc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_TIM_Base_MspInit+0x1a8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]
}
 8001566:	e012      	b.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM14)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_TIM_Base_MspInit+0x200>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d10d      	bne.n	800158e <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_TIM_Base_MspInit+0x1dc>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	bf00      	nop
 8001590:	3738      	adds	r7, #56	; 0x38
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40000400 	.word	0x40000400
 80015a4:	40000800 	.word	0x40000800
 80015a8:	40000c00 	.word	0x40000c00
 80015ac:	40001000 	.word	0x40001000
 80015b0:	40010400 	.word	0x40010400
 80015b4:	40014400 	.word	0x40014400
 80015b8:	40014800 	.word	0x40014800
 80015bc:	40001c00 	.word	0x40001c00
 80015c0:	40002000 	.word	0x40002000

080015c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b092      	sub	sp, #72	; 0x48
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4aa2      	ldr	r2, [pc, #648]	; (800186c <HAL_TIM_MspPostInit+0x2a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d11f      	bne.n	8001626 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
 80015ea:	4ba1      	ldr	r3, [pc, #644]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4aa0      	ldr	r2, [pc, #640]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b9e      	ldr	r3, [pc, #632]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001614:	2301      	movs	r3, #1
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800161c:	4619      	mov	r1, r3
 800161e:	4895      	ldr	r0, [pc, #596]	; (8001874 <HAL_TIM_MspPostInit+0x2b0>)
 8001620:	f000 fdce 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001624:	e15d      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162e:	d11f      	bne.n	8001670 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001634:	4b8e      	ldr	r3, [pc, #568]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	4a8d      	ldr	r2, [pc, #564]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	6313      	str	r3, [r2, #48]	; 0x30
 8001640:	4b8b      	ldr	r3, [pc, #556]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800164c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165e:	2301      	movs	r3, #1
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001666:	4619      	mov	r1, r3
 8001668:	4883      	ldr	r0, [pc, #524]	; (8001878 <HAL_TIM_MspPostInit+0x2b4>)
 800166a:	f000 fda9 	bl	80021c0 <HAL_GPIO_Init>
}
 800166e:	e138      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a81      	ldr	r2, [pc, #516]	; (800187c <HAL_TIM_MspPostInit+0x2b8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d11e      	bne.n	80016b8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
 800167e:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a7b      	ldr	r2, [pc, #492]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b79      	ldr	r3, [pc, #484]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
 8001694:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001696:	2320      	movs	r3, #32
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016a6:	2302      	movs	r3, #2
 80016a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ae:	4619      	mov	r1, r3
 80016b0:	4871      	ldr	r0, [pc, #452]	; (8001878 <HAL_TIM_MspPostInit+0x2b4>)
 80016b2:	f000 fd85 	bl	80021c0 <HAL_GPIO_Init>
}
 80016b6:	e114      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM4)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a70      	ldr	r2, [pc, #448]	; (8001880 <HAL_TIM_MspPostInit+0x2bc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d11e      	bne.n	8001700 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
 80016c6:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a69      	ldr	r2, [pc, #420]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016de:	2340      	movs	r3, #64	; 0x40
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016ee:	2302      	movs	r3, #2
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016f6:	4619      	mov	r1, r3
 80016f8:	485f      	ldr	r0, [pc, #380]	; (8001878 <HAL_TIM_MspPostInit+0x2b4>)
 80016fa:	f000 fd61 	bl	80021c0 <HAL_GPIO_Init>
}
 80016fe:	e0f0      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM5)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a5f      	ldr	r2, [pc, #380]	; (8001884 <HAL_TIM_MspPostInit+0x2c0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d11e      	bne.n	8001748 <HAL_TIM_MspPostInit+0x184>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b55      	ldr	r3, [pc, #340]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	623b      	str	r3, [r7, #32]
 8001724:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001726:	2301      	movs	r3, #1
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001736:	2302      	movs	r3, #2
 8001738:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800173e:	4619      	mov	r1, r3
 8001740:	484c      	ldr	r0, [pc, #304]	; (8001874 <HAL_TIM_MspPostInit+0x2b0>)
 8001742:	f000 fd3d 	bl	80021c0 <HAL_GPIO_Init>
}
 8001746:	e0cc      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM8)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4e      	ldr	r2, [pc, #312]	; (8001888 <HAL_TIM_MspPostInit+0x2c4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d11e      	bne.n	8001790 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800177e:	2303      	movs	r3, #3
 8001780:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001786:	4619      	mov	r1, r3
 8001788:	4840      	ldr	r0, [pc, #256]	; (800188c <HAL_TIM_MspPostInit+0x2c8>)
 800178a:	f000 fd19 	bl	80021c0 <HAL_GPIO_Init>
}
 800178e:	e0a8      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM10)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <HAL_TIM_MspPostInit+0x2cc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11f      	bne.n	80017da <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80017c8:	2303      	movs	r3, #3
 80017ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017d0:	4619      	mov	r1, r3
 80017d2:	4829      	ldr	r0, [pc, #164]	; (8001878 <HAL_TIM_MspPostInit+0x2b4>)
 80017d4:	f000 fcf4 	bl	80021c0 <HAL_GPIO_Init>
}
 80017d8:	e083      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM11)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2d      	ldr	r2, [pc, #180]	; (8001894 <HAL_TIM_MspPostInit+0x2d0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d11f      	bne.n	8001824 <HAL_TIM_MspPostInit+0x260>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80017ee:	f043 0302 	orr.w	r3, r3, #2
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001812:	2303      	movs	r3, #3
 8001814:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800181a:	4619      	mov	r1, r3
 800181c:	4816      	ldr	r0, [pc, #88]	; (8001878 <HAL_TIM_MspPostInit+0x2b4>)
 800181e:	f000 fccf 	bl	80021c0 <HAL_GPIO_Init>
}
 8001822:	e05e      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
  else if(htim->Instance==TIM13)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_TIM_MspPostInit+0x2d4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d136      	bne.n	800189c <HAL_TIM_MspPostInit+0x2d8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_TIM_MspPostInit+0x2ac>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800184a:	2340      	movs	r3, #64	; 0x40
 800184c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800185a:	2309      	movs	r3, #9
 800185c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001862:	4619      	mov	r1, r3
 8001864:	4803      	ldr	r0, [pc, #12]	; (8001874 <HAL_TIM_MspPostInit+0x2b0>)
 8001866:	f000 fcab 	bl	80021c0 <HAL_GPIO_Init>
}
 800186a:	e03a      	b.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
 800186c:	40010000 	.word	0x40010000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000
 8001878:	40020400 	.word	0x40020400
 800187c:	40000400 	.word	0x40000400
 8001880:	40000800 	.word	0x40000800
 8001884:	40000c00 	.word	0x40000c00
 8001888:	40010400 	.word	0x40010400
 800188c:	40020800 	.word	0x40020800
 8001890:	40014400 	.word	0x40014400
 8001894:	40014800 	.word	0x40014800
 8001898:	40001c00 	.word	0x40001c00
  else if(htim->Instance==TIM14)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_TIM_MspPostInit+0x328>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d11d      	bne.n	80018e2 <HAL_TIM_MspPostInit+0x31e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_TIM_MspPostInit+0x32c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_TIM_MspPostInit+0x32c>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_TIM_MspPostInit+0x32c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80018d2:	2309      	movs	r3, #9
 80018d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_TIM_MspPostInit+0x330>)
 80018de:	f000 fc6f 	bl	80021c0 <HAL_GPIO_Init>
}
 80018e2:	bf00      	nop
 80018e4:	3748      	adds	r7, #72	; 0x48
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40002000 	.word	0x40002000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_UART_MspInit+0x84>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12b      	bne.n	8001972 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_UART_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_UART_MspInit+0x88>)
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_UART_MspInit+0x88>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_UART_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_UART_MspInit+0x88>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_UART_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA1     ------> USART2_RTS
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|USART_TX_Pin|USART_RX_Pin;
 8001952:	230e      	movs	r3, #14
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001962:	2307      	movs	r3, #7
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_UART_MspInit+0x8c>)
 800196e:	f000 fc27 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40004400 	.word	0x40004400
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000

08001988 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800198c:	e7fe      	b.n	800198c <NMI_Handler+0x4>

0800198e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001992:	e7fe      	b.n	8001992 <HardFault_Handler+0x4>

08001994 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001998:	e7fe      	b.n	8001998 <MemManage_Handler+0x4>

0800199a <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800199e:	e7fe      	b.n	800199e <BusFault_Handler+0x4>

080019a0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80019a4:	e7fe      	b.n	80019a4 <UsageFault_Handler+0x4>

080019a6 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

	/* USER CODE END SysTick_IRQn 0 */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <USART2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void) {
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */
	//implements a simple circular buffer
	// if there is a data in receive register
	if ( USART2->SR & USART_SR_RXNE) {
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <USART2_IRQHandler+0x78>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d02d      	beq.n	8001a4c <USART2_IRQHandler+0x6c>
		// save the data to the buffer
		uartrecbuffer[uartrecbufftop] = (USART2->DR & USART_DR_DR);
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <USART2_IRQHandler+0x78>)
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <USART2_IRQHandler+0x7c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2d1      	uxtb	r1, r2
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <USART2_IRQHandler+0x80>)
 80019fc:	54d1      	strb	r1, [r2, r3]
		// if end symbol is detected, raise receive end flag
		switch (uartrecbuffer[uartrecbufftop]) {
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <USART2_IRQHandler+0x7c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <USART2_IRQHandler+0x80>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	2b0d      	cmp	r3, #13
 8001a08:	d002      	beq.n	8001a10 <USART2_IRQHandler+0x30>
 8001a0a:	2b11      	cmp	r3, #17
 8001a0c:	d004      	beq.n	8001a18 <USART2_IRQHandler+0x38>
 8001a0e:	e007      	b.n	8001a20 <USART2_IRQHandler+0x40>
		case END_RECEIVE_CHAR:
			uart_receive_end = 1;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <USART2_IRQHandler+0x84>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
			break;
 8001a16:	e003      	b.n	8001a20 <USART2_IRQHandler+0x40>
		case START_OF_PROGRAM_BYTE:
			fsm_state = PROGRAM_RECEIVING;
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <USART2_IRQHandler+0x88>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
			break;
 8001a1e:	bf00      	nop
		}

		if (uartrecbuffer[uartrecbufftop] == END_RECEIVE_CHAR) {
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <USART2_IRQHandler+0x7c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <USART2_IRQHandler+0x80>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	2b0d      	cmp	r3, #13
 8001a2a:	d102      	bne.n	8001a32 <USART2_IRQHandler+0x52>
			uart_receive_end = 1;
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <USART2_IRQHandler+0x84>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
		}
		uartrecbufftop++;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <USART2_IRQHandler+0x7c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <USART2_IRQHandler+0x7c>)
 8001a3a:	6013      	str	r3, [r2, #0]
		if (uartrecbufftop == UART_RECEIVE_BUF_SIZE) {
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <USART2_IRQHandler+0x7c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a44:	d102      	bne.n	8001a4c <USART2_IRQHandler+0x6c>
			uartrecbufftop = 0;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <USART2_IRQHandler+0x7c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END USART2_IRQn 0 */
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40004400 	.word	0x40004400
 8001a5c:	20000aa4 	.word	0x20000aa4
 8001a60:	20000534 	.word	0x20000534
 8001a64:	20000090 	.word	0x20000090
 8001a68:	2000008c 	.word	0x2000008c

08001a6c <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//reset bit
	TICK_TIMER->SR &= ~TIM_SR_UIF;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <TIM6_DAC_IRQHandler+0x6c>)
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	4a18      	ldr	r2, [pc, #96]	; (8001ad8 <TIM6_DAC_IRQHandler+0x6c>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6113      	str	r3, [r2, #16]
	current_us++;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <TIM6_DAC_IRQHandler+0x70>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	3301      	adds	r3, #1
 8001a82:	4a16      	ldr	r2, [pc, #88]	; (8001adc <TIM6_DAC_IRQHandler+0x70>)
 8001a84:	6013      	str	r3, [r2, #0]
	TEST_GPIO_GPIO_Port->ODR ^= TEST_GPIO_Pin;
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001a8c:	f083 0310 	eor.w	r3, r3, #16
 8001a90:	6153      	str	r3, [r2, #20]

	TEST_GPIO_GPIO_Port->ODR ^= GPIO_PIN_8;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001a98:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001a9c:	6153      	str	r3, [r2, #20]
	TEST_GPIO_GPIO_Port->ODR ^= GPIO_PIN_8;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001aa4:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001aa8:	6153      	str	r3, [r2, #20]
	TEST_GPIO_GPIO_Port->ODR ^= GPIO_PIN_8;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001ab0:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001ab4:	6153      	str	r3, [r2, #20]
	TEST_GPIO_GPIO_Port->ODR ^= GPIO_PIN_8;
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001abc:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001ac0:	6153      	str	r3, [r2, #20]
	TEST_GPIO_GPIO_Port->ODR ^= GPIO_PIN_8;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <TIM6_DAC_IRQHandler+0x74>)
 8001ac8:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8001acc:	6153      	str	r3, [r2, #20]

	/* USER CODE END TIM6_DAC_IRQn 0 */
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40001000 	.word	0x40001000
 8001adc:	20004aa8 	.word	0x20004aa8
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f002 fbda 	bl	80042cc <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20020000 	.word	0x20020000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	20000094 	.word	0x20000094
 8001b4c:	20004c30 	.word	0x20004c30

08001b50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <receive_program>:
 * @brief performs program receiving from host
 * initialized by getting START_OF_PROGRAM_BYTE
 * end when flow have stopped (when counter, reset after each received byte gets > MAX_RECEIVE_CYCLES)
 * @ret 0 is success, negative if error
 */
int receive_program(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
	uint_fast8_t curr_byte;
	//disable interrupt handler
	uart_interrupt_toggle(0);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 f880 	bl	8001c80 <uart_interrupt_toggle>
	// set receive buffer to 0
	uartrecbufftop = 0;
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <receive_program+0xf4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
	// initialzie counter so that we wont get stuck into infinite loop
	int counter = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
	do {
		counter++;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
		if ( USART2->SR & USART_SR_RXNE) {
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <receive_program+0xf8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d022      	beq.n	8001be2 <receive_program+0x6e>
			// save the data to the buffer
			curr_byte = (USART2->DR & USART_DR_DR);
 8001b9c:	4b33      	ldr	r3, [pc, #204]	; (8001c6c <receive_program+0xf8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ba4:	60bb      	str	r3, [r7, #8]
			uartrecbuffer[uartrecbufftop] = curr_byte;
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <receive_program+0xf4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	b2d1      	uxtb	r1, r2
 8001bae:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <receive_program+0xfc>)
 8001bb0:	54d1      	strb	r1, [r2, r3]
			uartrecbufftop++;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <receive_program+0xf4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <receive_program+0xf4>)
 8001bba:	6013      	str	r3, [r2, #0]
			// if host tries to send more than we can handle
			if (uartrecbufftop >= UART_RECEIVE_BUF_SIZE) {
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <receive_program+0xf4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d30b      	bcc.n	8001bde <receive_program+0x6a>
				uart_printf(
 8001bc6:	482b      	ldr	r0, [pc, #172]	; (8001c74 <receive_program+0x100>)
 8001bc8:	f000 f87a 	bl	8001cc0 <uart_printf>
						"Receiving buffer overflow, program is too big!\r\n");
				uartrecbufftop = 0;
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <receive_program+0xf4>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
				uart_interrupt_toggle(1);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f000 f854 	bl	8001c80 <uart_interrupt_toggle>
				return -1;
 8001bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bdc:	e040      	b.n	8001c60 <receive_program+0xec>
			}
			counter = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
		}
	} while (counter < MAX_RECEIVE_CYCLES);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <receive_program+0x104>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	ddcf      	ble.n	8001b8a <receive_program+0x16>
	// if something went wrong and we did not receive enough bytes,
	// exit earlier to prevent memory smashing+
	if(uartrecbufftop < 5){
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <receive_program+0xf4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d928      	bls.n	8001c44 <receive_program+0xd0>
		goto EXIT_W_ERROR;
	}
	uint32_t received_crc = uartrecbuffer[uartrecbufftop - 5] + (uartrecbuffer[uartrecbufftop - 4] << 8) + (uartrecbuffer[uartrecbufftop - 3] << 16) + (uartrecbuffer[uartrecbufftop - 2] << 24);
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <receive_program+0xf4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3b05      	subs	r3, #5
 8001bf8:	4a1d      	ldr	r2, [pc, #116]	; (8001c70 <receive_program+0xfc>)
 8001bfa:	5cd3      	ldrb	r3, [r2, r3]
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <receive_program+0xf4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3b04      	subs	r3, #4
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <receive_program+0xfc>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	18ca      	adds	r2, r1, r3
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <receive_program+0xf4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	4917      	ldr	r1, [pc, #92]	; (8001c70 <receive_program+0xfc>)
 8001c14:	5ccb      	ldrb	r3, [r1, r3]
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	441a      	add	r2, r3
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <receive_program+0xf4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	3b02      	subs	r3, #2
 8001c20:	4913      	ldr	r1, [pc, #76]	; (8001c70 <receive_program+0xfc>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	061b      	lsls	r3, r3, #24
 8001c26:	4413      	add	r3, r2
 8001c28:	607b      	str	r3, [r7, #4]
	uint32_t crc = crc32_bytes(uartrecbuffer, uartrecbufftop - 5);
 8001c2a:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <receive_program+0xf4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3b05      	subs	r3, #5
 8001c30:	4619      	mov	r1, r3
 8001c32:	480f      	ldr	r0, [pc, #60]	; (8001c70 <receive_program+0xfc>)
 8001c34:	f000 f86a 	bl	8001d0c <crc32_bytes>
 8001c38:	6038      	str	r0, [r7, #0]
	if (received_crc != crc){
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d00a      	beq.n	8001c58 <receive_program+0xe4>
	    EXIT_W_ERROR:
 8001c42:	e000      	b.n	8001c46 <receive_program+0xd2>
		goto EXIT_W_ERROR;
 8001c44:	bf00      	nop
		uart_printf("Control sum mismatch!\r\n");
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <receive_program+0x108>)
 8001c48:	f000 f83a 	bl	8001cc0 <uart_printf>
		uart_interrupt_toggle(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f000 f817 	bl	8001c80 <uart_interrupt_toggle>
		return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c56:	e003      	b.n	8001c60 <receive_program+0xec>

	}

	uart_interrupt_toggle(1);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 f811 	bl	8001c80 <uart_interrupt_toggle>
	return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000aa4 	.word	0x20000aa4
 8001c6c:	40004400 	.word	0x40004400
 8001c70:	20000534 	.word	0x20000534
 8001c74:	08004c3c 	.word	0x08004c3c
 8001c78:	000270ff 	.word	0x000270ff
 8001c7c:	08004c9c 	.word	0x08004c9c

08001c80 <uart_interrupt_toggle>:

/**
 * @brief enables/disables UART interrupts
 */
void uart_interrupt_toggle(int flag) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	if (flag) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <uart_interrupt_toggle+0x20>
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <uart_interrupt_toggle+0x3c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <uart_interrupt_toggle+0x3c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0220 	orr.w	r2, r2, #32
 8001c9c:	60da      	str	r2, [r3, #12]
		return;
 8001c9e:	e007      	b.n	8001cb0 <uart_interrupt_toggle+0x30>
	}
	huart2.Instance->CR1 &= ~USART_CR1_RXNEIE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <uart_interrupt_toggle+0x3c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <uart_interrupt_toggle+0x3c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0220 	bic.w	r2, r2, #32
 8001cae:	60da      	str	r2, [r3, #12]
}
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20004b84 	.word	0x20004b84

08001cc0 <uart_printf>:

/**
 * @brief printf by uart
 * @retval None
 */
void uart_printf(const char *format, ...) {
 8001cc0:	b40f      	push	{r0, r1, r2, r3}
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	607b      	str	r3, [r7, #4]
	nchars = vsnprintf(uartsendbuffer, UART_SEND_BUF_SIZE - 1, format, args);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001cd6:	480a      	ldr	r0, [pc, #40]	; (8001d00 <uart_printf+0x40>)
 8001cd8:	f002 fb56 	bl	8004388 <vsniprintf>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <uart_printf+0x44>)
 8001ce0:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, uartsendbuffer, nchars, HAL_TIMEOUT);
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <uart_printf+0x44>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	2303      	movs	r3, #3
 8001cea:	4905      	ldr	r1, [pc, #20]	; (8001d00 <uart_printf+0x40>)
 8001cec:	4806      	ldr	r0, [pc, #24]	; (8001d08 <uart_printf+0x48>)
 8001cee:	f002 f824 	bl	8003d3a <HAL_UART_Transmit>
	va_end(args);
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cfc:	b004      	add	sp, #16
 8001cfe:	4770      	bx	lr
 8001d00:	200000a0 	.word	0x200000a0
 8001d04:	20004c14 	.word	0x20004c14
 8001d08:	20004b84 	.word	0x20004b84

08001d0c <crc32_bytes>:
 * @param  pData Buffer pointer
 * @param  uLen  Buffer Length
 * @retval CRC32 Checksum
 * from https://stackoverflow.com/questions/39646441/how-to-set-stm32-to-generate-standard-crc32
 */
uint32_t crc32_bytes(uint8_t *pData, uint32_t uLen) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
	uint32_t uIndex = 0, uData = 0, i;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
	uIndex = uLen >> 2;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	617b      	str	r3, [r7, #20]

	/* Reset CRC generator */
	CRC->CR |= CRC_CR_RESET;
 8001d24:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <crc32_bytes+0xe4>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <crc32_bytes+0xe4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6093      	str	r3, [r2, #8]

	while (uIndex--) {
 8001d30:	e022      	b.n	8001d78 <crc32_bytes+0x6c>
#ifdef USED_BIG_ENDIAN
        uData = __REV((uint32_t*)pData);
#else
		((uint8_t*) &uData)[0] = pData[0];
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	7812      	ldrb	r2, [r2, #0]
 8001d3a:	701a      	strb	r2, [r3, #0]
		((uint8_t*) &uData)[1] = pData[1];
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	3301      	adds	r3, #1
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	7852      	ldrb	r2, [r2, #1]
 8001d46:	701a      	strb	r2, [r3, #0]
		((uint8_t*) &uData)[2] = pData[2];
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	7892      	ldrb	r2, [r2, #2]
 8001d52:	701a      	strb	r2, [r3, #0]
		((uint8_t*) &uData)[3] = pData[3];
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	3303      	adds	r3, #3
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	78d2      	ldrb	r2, [r2, #3]
 8001d5e:	701a      	strb	r2, [r3, #0]
#endif
		pData += 4;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	607b      	str	r3, [r7, #4]
		uData = revbit(uData);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f845 	bl	8001df8 <revbit>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	60fb      	str	r3, [r7, #12]
		CRC->DR = uData;
 8001d72:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <crc32_bytes+0xe4>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6013      	str	r3, [r2, #0]
	while (uIndex--) {
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	1e5a      	subs	r2, r3, #1
 8001d7c:	617a      	str	r2, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1d7      	bne.n	8001d32 <crc32_bytes+0x26>
	}
	uData = revbit(CRC->DR);
 8001d82:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <crc32_bytes+0xe4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f836 	bl	8001df8 <revbit>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
	uIndex = uLen & 0x03;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	617b      	str	r3, [r7, #20]
	while (uIndex--) {
 8001d98:	e01e      	b.n	8001dd8 <crc32_bytes+0xcc>
		uData ^= (uint32_t) *pData++;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4053      	eors	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < 8; i++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	e010      	b.n	8001dd2 <crc32_bytes+0xc6>
			if (uData & 0x1)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <crc32_bytes+0xba>
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	085a      	lsrs	r2, r3, #1
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <crc32_bytes+0xe8>)
 8001dc0:	4053      	eors	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e002      	b.n	8001dcc <crc32_bytes+0xc0>
			else
				uData >>= 1;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < 8; i++)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d9eb      	bls.n	8001db0 <crc32_bytes+0xa4>
	while (uIndex--) {
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1e5a      	subs	r2, r3, #1
 8001ddc:	617a      	str	r2, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1db      	bne.n	8001d9a <crc32_bytes+0x8e>
	}
	return uData ^ 0xFFFFFFFF;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3718      	adds	r7, #24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023000 	.word	0x40023000
 8001df4:	edb88320 	.word	0xedb88320

08001df8 <revbit>:

uint32_t revbit(uint32_t uData) {
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	uint32_t uRevData = 0, uIndex = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
	uRevData |= ((uData >> uIndex) & 0x01);
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
	for (uIndex = 1; uIndex < 32; uIndex++) {
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	e00e      	b.n	8001e3e <revbit+0x46>
		uRevData <<= 1;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
		uRevData |= ((uData >> uIndex) & 0x01);
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
	for (uIndex = 1; uIndex < 32; uIndex++) {
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b1f      	cmp	r3, #31
 8001e42:	d9ed      	bls.n	8001e20 <revbit+0x28>
	}
	return uRevData;
 8001e44:	68fb      	ldr	r3, [r7, #12]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e7e:	f7ff fe67 	bl	8001b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f002 fa29 	bl	80042d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e86:	f7fe fb8f 	bl	80005a8 <main>
  bx  lr    
 8001e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e98:	08004d10 	.word	0x08004d10
  ldr r2, =_sbss
 8001e9c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ea0:	20004c2c 	.word	0x20004c2c

08001ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC_IRQHandler>
	...

08001ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <HAL_Init+0x40>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ee8 <HAL_Init+0x40>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_Init+0x40>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_Init+0x40>)
 8001ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec4:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a07      	ldr	r2, [pc, #28]	; (8001ee8 <HAL_Init+0x40>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f000 f917 	bl	8002104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f000 f808 	bl	8001eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001edc:	f7ff fa26 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023c00 	.word	0x40023c00

08001eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x54>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_InitTick+0x58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f92f 	bl	800216e <HAL_SYSTICK_Config>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00e      	b.n	8001f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d80a      	bhi.n	8001f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f28:	f000 f8f7 	bl	800211a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2c:	4a06      	ldr	r2, [pc, #24]	; (8001f48 <HAL_InitTick+0x5c>)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000008 	.word	0x20000008
 8001f48:	20000004 	.word	0x20000004

08001f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_GetTick+0x14>)
 8001f52:	681b      	ldr	r3, [r3, #0]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	20004c18 	.word	0x20004c18

08001f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f96:	4a04      	ldr	r2, [pc, #16]	; (8001fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	3714      	adds	r7, #20
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb0:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	f003 0307 	and.w	r3, r3, #7
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db0b      	blt.n	8001ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	4907      	ldr	r1, [pc, #28]	; (8002000 <__NVIC_EnableIRQ+0x38>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	2001      	movs	r0, #1
 8001fea:	fa00 f202 	lsl.w	r2, r0, r2
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100

08002004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002014:	2b00      	cmp	r3, #0
 8002016:	db0a      	blt.n	800202e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	490c      	ldr	r1, [pc, #48]	; (8002050 <__NVIC_SetPriority+0x4c>)
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	440b      	add	r3, r1
 8002028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800202c:	e00a      	b.n	8002044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4908      	ldr	r1, [pc, #32]	; (8002054 <__NVIC_SetPriority+0x50>)
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	3b04      	subs	r3, #4
 800203c:	0112      	lsls	r2, r2, #4
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	440b      	add	r3, r1
 8002042:	761a      	strb	r2, [r3, #24]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f1c3 0307 	rsb	r3, r3, #7
 8002072:	2b04      	cmp	r3, #4
 8002074:	bf28      	it	cs
 8002076:	2304      	movcs	r3, #4
 8002078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3304      	adds	r3, #4
 800207e:	2b06      	cmp	r3, #6
 8002080:	d902      	bls.n	8002088 <NVIC_EncodePriority+0x30>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3b03      	subs	r3, #3
 8002086:	e000      	b.n	800208a <NVIC_EncodePriority+0x32>
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800208c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	401a      	ands	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	4313      	orrs	r3, r2
         );
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d0:	d301      	bcc.n	80020d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d2:	2301      	movs	r3, #1
 80020d4:	e00f      	b.n	80020f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <SysTick_Config+0x40>)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3b01      	subs	r3, #1
 80020dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020de:	210f      	movs	r1, #15
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e4:	f7ff ff8e 	bl	8002004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <SysTick_Config+0x40>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ee:	4b04      	ldr	r3, [pc, #16]	; (8002100 <SysTick_Config+0x40>)
 80020f0:	2207      	movs	r2, #7
 80020f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	e000e010 	.word	0xe000e010

08002104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ff29 	bl	8001f64 <__NVIC_SetPriorityGrouping>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212c:	f7ff ff3e 	bl	8001fac <__NVIC_GetPriorityGrouping>
 8002130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	6978      	ldr	r0, [r7, #20]
 8002138:	f7ff ff8e 	bl	8002058 <NVIC_EncodePriority>
 800213c:	4602      	mov	r2, r0
 800213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff5d 	bl	8002004 <__NVIC_SetPriority>
}
 800214a:	bf00      	nop
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff31 	bl	8001fc8 <__NVIC_EnableIRQ>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ffa2 	bl	80020c0 <SysTick_Config>
 800217c:	4603      	mov	r3, r0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e00e      	b.n	80021b6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	795b      	ldrb	r3, [r3, #5]
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff f8e7 	bl	800137c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	e165      	b.n	80024a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021dc:	2201      	movs	r2, #1
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	f040 8154 	bne.w	80024a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b01      	cmp	r3, #1
 8002204:	d005      	beq.n	8002212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	2b02      	cmp	r3, #2
 8002210:	d130      	bne.n	8002274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	2203      	movs	r2, #3
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b03      	cmp	r3, #3
 800227e:	d017      	beq.n	80022b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	2203      	movs	r2, #3
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d123      	bne.n	8002304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0203 	and.w	r2, r3, #3
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80ae 	beq.w	80024a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b5d      	ldr	r3, [pc, #372]	; (80024c0 <HAL_GPIO_Init+0x300>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	4a5c      	ldr	r2, [pc, #368]	; (80024c0 <HAL_GPIO_Init+0x300>)
 8002350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002354:	6453      	str	r3, [r2, #68]	; 0x44
 8002356:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <HAL_GPIO_Init+0x300>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002362:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_GPIO_Init+0x304>)
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	089b      	lsrs	r3, r3, #2
 8002368:	3302      	adds	r3, #2
 800236a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	220f      	movs	r2, #15
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4f      	ldr	r2, [pc, #316]	; (80024c8 <HAL_GPIO_Init+0x308>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x21a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4e      	ldr	r2, [pc, #312]	; (80024cc <HAL_GPIO_Init+0x30c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x216>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4d      	ldr	r2, [pc, #308]	; (80024d0 <HAL_GPIO_Init+0x310>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x212>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4c      	ldr	r2, [pc, #304]	; (80024d4 <HAL_GPIO_Init+0x314>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x20e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <HAL_GPIO_Init+0x318>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x20a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <HAL_GPIO_Init+0x31c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x206>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a49      	ldr	r2, [pc, #292]	; (80024e0 <HAL_GPIO_Init+0x320>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x202>
 80023be:	2306      	movs	r3, #6
 80023c0:	e00c      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e00a      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023c6:	2305      	movs	r3, #5
 80023c8:	e008      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023ce:	2303      	movs	r3, #3
 80023d0:	e004      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e002      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <HAL_GPIO_Init+0x21c>
 80023da:	2300      	movs	r3, #0
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	f002 0203 	and.w	r2, r2, #3
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	4093      	lsls	r3, r2
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ec:	4935      	ldr	r1, [pc, #212]	; (80024c4 <HAL_GPIO_Init+0x304>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023fa:	4b3a      	ldr	r3, [pc, #232]	; (80024e4 <HAL_GPIO_Init+0x324>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241e:	4a31      	ldr	r2, [pc, #196]	; (80024e4 <HAL_GPIO_Init+0x324>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HAL_GPIO_Init+0x324>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <HAL_GPIO_Init+0x324>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b25      	ldr	r3, [pc, #148]	; (80024e4 <HAL_GPIO_Init+0x324>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_GPIO_Init+0x324>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_GPIO_Init+0x324>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a11      	ldr	r2, [pc, #68]	; (80024e4 <HAL_GPIO_Init+0x324>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	f67f ae96 	bls.w	80021dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3724      	adds	r7, #36	; 0x24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40013800 	.word	0x40013800
 80024c8:	40020000 	.word	0x40020000
 80024cc:	40020400 	.word	0x40020400
 80024d0:	40020800 	.word	0x40020800
 80024d4:	40020c00 	.word	0x40020c00
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40021400 	.word	0x40021400
 80024e0:	40021800 	.word	0x40021800
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0cc      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b68      	ldr	r3, [pc, #416]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d90c      	bls.n	8002558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b65      	ldr	r3, [pc, #404]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002570:	4b59      	ldr	r3, [pc, #356]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800257a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4b53      	ldr	r3, [pc, #332]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b50      	ldr	r3, [pc, #320]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	494d      	ldr	r1, [pc, #308]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d044      	beq.n	800263c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b47      	ldr	r3, [pc, #284]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d119      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d003      	beq.n	80025da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b3f      	ldr	r3, [pc, #252]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e067      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4934      	ldr	r1, [pc, #208]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7ff fc9e 	bl	8001f4c <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7ff fc9a 	bl	8001f4c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e04f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d20c      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b20      	ldr	r3, [pc, #128]	; (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e032      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4916      	ldr	r1, [pc, #88]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490e      	ldr	r1, [pc, #56]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f855 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490a      	ldr	r1, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fc12 	bl	8001eec <HAL_InitTick>

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08004cb4 	.word	0x08004cb4
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000004 	.word	0x20000004

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000000 	.word	0x20000000

08002700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002704:	f7ff fff0 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002708:	4602      	mov	r2, r0
 800270a:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	0a9b      	lsrs	r3, r3, #10
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	4903      	ldr	r1, [pc, #12]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002716:	5ccb      	ldrb	r3, [r1, r3]
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	08004cc4 	.word	0x08004cc4

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800272c:	f7ff ffdc 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0b5b      	lsrs	r3, r3, #13
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002744:	4618      	mov	r0, r3
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	08004cc4 	.word	0x08004cc4

08002750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002754:	b088      	sub	sp, #32
 8002756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800276c:	4bce      	ldr	r3, [pc, #824]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b0c      	cmp	r3, #12
 8002776:	f200 818d 	bhi.w	8002a94 <HAL_RCC_GetSysClockFreq+0x344>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_RCC_GetSysClockFreq+0x30>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	080027b5 	.word	0x080027b5
 8002784:	08002a95 	.word	0x08002a95
 8002788:	08002a95 	.word	0x08002a95
 800278c:	08002a95 	.word	0x08002a95
 8002790:	080027bb 	.word	0x080027bb
 8002794:	08002a95 	.word	0x08002a95
 8002798:	08002a95 	.word	0x08002a95
 800279c:	08002a95 	.word	0x08002a95
 80027a0:	080027c1 	.word	0x080027c1
 80027a4:	08002a95 	.word	0x08002a95
 80027a8:	08002a95 	.word	0x08002a95
 80027ac:	08002a95 	.word	0x08002a95
 80027b0:	08002935 	.word	0x08002935
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4bbd      	ldr	r3, [pc, #756]	; (8002aac <HAL_RCC_GetSysClockFreq+0x35c>)
 80027b6:	61bb      	str	r3, [r7, #24]
       break;
 80027b8:	e16f      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ba:	4bbd      	ldr	r3, [pc, #756]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x360>)
 80027bc:	61bb      	str	r3, [r7, #24]
      break;
 80027be:	e16c      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4bb9      	ldr	r3, [pc, #740]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ca:	4bb7      	ldr	r3, [pc, #732]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d053      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4bb4      	ldr	r3, [pc, #720]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	461a      	mov	r2, r3
 80027de:	f04f 0300 	mov.w	r3, #0
 80027e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027e6:	f04f 0100 	mov.w	r1, #0
 80027ea:	ea02 0400 	and.w	r4, r2, r0
 80027ee:	603c      	str	r4, [r7, #0]
 80027f0:	400b      	ands	r3, r1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f8:	4620      	mov	r0, r4
 80027fa:	4629      	mov	r1, r5
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	014b      	lsls	r3, r1, #5
 8002806:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800280a:	0142      	lsls	r2, r0, #5
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	4623      	mov	r3, r4
 8002812:	1ac0      	subs	r0, r0, r3
 8002814:	462b      	mov	r3, r5
 8002816:	eb61 0103 	sbc.w	r1, r1, r3
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	018b      	lsls	r3, r1, #6
 8002824:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002828:	0182      	lsls	r2, r0, #6
 800282a:	1a12      	subs	r2, r2, r0
 800282c:	eb63 0301 	sbc.w	r3, r3, r1
 8002830:	f04f 0000 	mov.w	r0, #0
 8002834:	f04f 0100 	mov.w	r1, #0
 8002838:	00d9      	lsls	r1, r3, #3
 800283a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800283e:	00d0      	lsls	r0, r2, #3
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4621      	mov	r1, r4
 8002846:	1852      	adds	r2, r2, r1
 8002848:	4629      	mov	r1, r5
 800284a:	eb43 0101 	adc.w	r1, r3, r1
 800284e:	460b      	mov	r3, r1
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	0259      	lsls	r1, r3, #9
 800285a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800285e:	0250      	lsls	r0, r2, #9
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	461a      	mov	r2, r3
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	f7fd fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4613      	mov	r3, r2
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	e04c      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287e:	4b8a      	ldr	r3, [pc, #552]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	461a      	mov	r2, r3
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	ea02 0a00 	and.w	sl, r2, r0
 8002896:	ea03 0b01 	and.w	fp, r3, r1
 800289a:	4650      	mov	r0, sl
 800289c:	4659      	mov	r1, fp
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	014b      	lsls	r3, r1, #5
 80028a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028ac:	0142      	lsls	r2, r0, #5
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	ebb0 000a 	subs.w	r0, r0, sl
 80028b6:	eb61 010b 	sbc.w	r1, r1, fp
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028c8:	0182      	lsls	r2, r0, #6
 80028ca:	1a12      	subs	r2, r2, r0
 80028cc:	eb63 0301 	sbc.w	r3, r3, r1
 80028d0:	f04f 0000 	mov.w	r0, #0
 80028d4:	f04f 0100 	mov.w	r1, #0
 80028d8:	00d9      	lsls	r1, r3, #3
 80028da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028de:	00d0      	lsls	r0, r2, #3
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	eb12 020a 	adds.w	r2, r2, sl
 80028e8:	eb43 030b 	adc.w	r3, r3, fp
 80028ec:	f04f 0000 	mov.w	r0, #0
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	0299      	lsls	r1, r3, #10
 80028f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028fa:	0290      	lsls	r0, r2, #10
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	461a      	mov	r2, r3
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	f7fd fcd0 	bl	80002b0 <__aeabi_uldivmod>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4613      	mov	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002918:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	0c1b      	lsrs	r3, r3, #16
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	3301      	adds	r3, #1
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	61bb      	str	r3, [r7, #24]
      break;
 8002932:	e0b2      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4b5c      	ldr	r3, [pc, #368]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04d      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	461a      	mov	r2, r3
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	f240 10ff 	movw	r0, #511	; 0x1ff
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	ea02 0800 	and.w	r8, r2, r0
 8002962:	ea03 0901 	and.w	r9, r3, r1
 8002966:	4640      	mov	r0, r8
 8002968:	4649      	mov	r1, r9
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	014b      	lsls	r3, r1, #5
 8002974:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002978:	0142      	lsls	r2, r0, #5
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	ebb0 0008 	subs.w	r0, r0, r8
 8002982:	eb61 0109 	sbc.w	r1, r1, r9
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	018b      	lsls	r3, r1, #6
 8002990:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002994:	0182      	lsls	r2, r0, #6
 8002996:	1a12      	subs	r2, r2, r0
 8002998:	eb63 0301 	sbc.w	r3, r3, r1
 800299c:	f04f 0000 	mov.w	r0, #0
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	00d9      	lsls	r1, r3, #3
 80029a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029aa:	00d0      	lsls	r0, r2, #3
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	eb12 0208 	adds.w	r2, r2, r8
 80029b4:	eb43 0309 	adc.w	r3, r3, r9
 80029b8:	f04f 0000 	mov.w	r0, #0
 80029bc:	f04f 0100 	mov.w	r1, #0
 80029c0:	0259      	lsls	r1, r3, #9
 80029c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029c6:	0250      	lsls	r0, r2, #9
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	f7fd fc6a 	bl	80002b0 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e04a      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	461a      	mov	r2, r3
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	ea02 0400 	and.w	r4, r2, r0
 80029fe:	ea03 0501 	and.w	r5, r3, r1
 8002a02:	4620      	mov	r0, r4
 8002a04:	4629      	mov	r1, r5
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	014b      	lsls	r3, r1, #5
 8002a10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a14:	0142      	lsls	r2, r0, #5
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	1b00      	subs	r0, r0, r4
 8002a1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f04f 0300 	mov.w	r3, #0
 8002a28:	018b      	lsls	r3, r1, #6
 8002a2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a2e:	0182      	lsls	r2, r0, #6
 8002a30:	1a12      	subs	r2, r2, r0
 8002a32:	eb63 0301 	sbc.w	r3, r3, r1
 8002a36:	f04f 0000 	mov.w	r0, #0
 8002a3a:	f04f 0100 	mov.w	r1, #0
 8002a3e:	00d9      	lsls	r1, r3, #3
 8002a40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a44:	00d0      	lsls	r0, r2, #3
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	1912      	adds	r2, r2, r4
 8002a4c:	eb45 0303 	adc.w	r3, r5, r3
 8002a50:	f04f 0000 	mov.w	r0, #0
 8002a54:	f04f 0100 	mov.w	r1, #0
 8002a58:	0299      	lsls	r1, r3, #10
 8002a5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a5e:	0290      	lsls	r0, r2, #10
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	f7fd fc1e 	bl	80002b0 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0f1b      	lsrs	r3, r3, #28
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	61bb      	str	r3, [r7, #24]
      break;
 8002a92:	e002      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a96:	61bb      	str	r3, [r7, #24]
      break;
 8002a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	00f42400 	.word	0x00f42400
 8002ab0:	007a1200 	.word	0x007a1200

08002ab4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e28d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 8083 	beq.w	8002bda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ad4:	4b94      	ldr	r3, [pc, #592]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 030c 	and.w	r3, r3, #12
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d019      	beq.n	8002b14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ae0:	4b91      	ldr	r3, [pc, #580]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d106      	bne.n	8002afa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aec:	4b8e      	ldr	r3, [pc, #568]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af8:	d00c      	beq.n	8002b14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afa:	4b8b      	ldr	r3, [pc, #556]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b02:	2b0c      	cmp	r3, #12
 8002b04:	d112      	bne.n	8002b2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b12:	d10b      	bne.n	8002b2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b14:	4b84      	ldr	r3, [pc, #528]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d05b      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x124>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d157      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e25a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b34:	d106      	bne.n	8002b44 <HAL_RCC_OscConfig+0x90>
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7b      	ldr	r2, [pc, #492]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0xcc>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0xb4>
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a75      	ldr	r2, [pc, #468]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b73      	ldr	r3, [pc, #460]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a72      	ldr	r2, [pc, #456]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0xcc>
 8002b68:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a6b      	ldr	r2, [pc, #428]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7ff f9e0 	bl	8001f4c <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b90:	f7ff f9dc 	bl	8001f4c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b64      	cmp	r3, #100	; 0x64
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e21f      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0xdc>
 8002bae:	e014      	b.n	8002bda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f9cc 	bl	8001f4c <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7ff f9c8 	bl	8001f4c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e20b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x104>
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d06f      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002be6:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d017      	beq.n	8002c22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b44      	ldr	r3, [pc, #272]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x186>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1d3      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4937      	ldr	r1, [pc, #220]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e03a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_OscConfig+0x278>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff f975 	bl	8001f4c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff f971 	bl	8001f4c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1b4      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4925      	ldr	r1, [pc, #148]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_OscConfig+0x278>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7ff f954 	bl	8001f4c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca8:	f7ff f950 	bl	8001f4c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e193      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d036      	beq.n	8002d40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7ff f934 	bl	8001f4c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7ff f930 	bl	8001f4c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e173      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_OscConfig+0x274>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x234>
 8002d06:	e01b      	b.n	8002d40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_OscConfig+0x27c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0e:	f7ff f91d 	bl	8001f4c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	e00e      	b.n	8002d34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d16:	f7ff f919 	bl	8001f4c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d907      	bls.n	8002d34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e15c      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	42470000 	.word	0x42470000
 8002d30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	4b8a      	ldr	r3, [pc, #552]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ea      	bne.n	8002d16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8097 	beq.w	8002e7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4b83      	ldr	r3, [pc, #524]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a7e      	ldr	r2, [pc, #504]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b7c      	ldr	r3, [pc, #496]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b79      	ldr	r3, [pc, #484]	; (8002f64 <HAL_RCC_OscConfig+0x4b0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x4b0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x4b0>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7ff f8d9 	bl	8001f4c <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7ff f8d5 	bl	8001f4c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e118      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x4b0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x31e>
 8002dc4:	4b66      	ldr	r3, [pc, #408]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	4a65      	ldr	r2, [pc, #404]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x358>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x340>
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a60      	ldr	r2, [pc, #384]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	4b5e      	ldr	r3, [pc, #376]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	4a5d      	ldr	r2, [pc, #372]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	; 0x70
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0x358>
 8002df4:	4b5a      	ldr	r3, [pc, #360]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a59      	ldr	r2, [pc, #356]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002e00:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7ff f89a 	bl	8001f4c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7ff f896 	bl	8001f4c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0d7      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0ee      	beq.n	8002e1c <HAL_RCC_OscConfig+0x368>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7ff f884 	bl	8001f4c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7ff f880 	bl	8001f4c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0c1      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ee      	bne.n	8002e48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80ad 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e86:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d060      	beq.n	8002f54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d145      	bne.n	8002f26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_RCC_OscConfig+0x4b4>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea0:	f7ff f854 	bl	8001f4c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7ff f850 	bl	8001f4c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e093      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	071b      	lsls	r3, r3, #28
 8002ef2:	491b      	ldr	r1, [pc, #108]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x4b4>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efe:	f7ff f825 	bl	8001f4c <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7ff f821 	bl	8001f4c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e064      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f0      	beq.n	8002f06 <HAL_RCC_OscConfig+0x452>
 8002f24:	e05c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_RCC_OscConfig+0x4b4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7ff f80e 	bl	8001f4c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f34:	f7ff f80a 	bl	8001f4c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04d      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_OscConfig+0x4ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x480>
 8002f52:	e045      	b.n	8002fe0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d107      	bne.n	8002f6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e040      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40007000 	.word	0x40007000
 8002f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_RCC_OscConfig+0x538>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d030      	beq.n	8002fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d129      	bne.n	8002fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d122      	bne.n	8002fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d119      	bne.n	8002fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10f      	bne.n	8002fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e041      	b.n	8003086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe f9d2 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3304      	adds	r3, #4
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f000 f9ec 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e041      	b.n	8003124 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d106      	bne.n	80030ba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f839 	bl	800312c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4619      	mov	r1, r3
 80030cc:	4610      	mov	r0, r2
 80030ce:	f000 f99d 	bl	800340c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_TIM_OC_ConfigChannel+0x1e>
 800315a:	2302      	movs	r3, #2
 800315c:	e048      	b.n	80031f0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d839      	bhi.n	80031e0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_TIM_OC_ConfigChannel+0x34>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031e1 	.word	0x080031e1
 800317c:	080031e1 	.word	0x080031e1
 8003180:	080031e1 	.word	0x080031e1
 8003184:	080031b7 	.word	0x080031b7
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031e1 	.word	0x080031e1
 8003190:	080031e1 	.word	0x080031e1
 8003194:	080031c5 	.word	0x080031c5
 8003198:	080031e1 	.word	0x080031e1
 800319c:	080031e1 	.word	0x080031e1
 80031a0:	080031e1 	.word	0x080031e1
 80031a4:	080031d3 	.word	0x080031d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f9cc 	bl	800354c <TIM_OC1_SetConfig>
      break;
 80031b4:	e017      	b.n	80031e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68b9      	ldr	r1, [r7, #8]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fa35 	bl	800362c <TIM_OC2_SetConfig>
      break;
 80031c2:	e010      	b.n	80031e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 faa4 	bl	8003718 <TIM_OC3_SetConfig>
      break;
 80031d0:	e009      	b.n	80031e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fb11 	bl	8003800 <TIM_OC4_SetConfig>
      break;
 80031de:	e002      	b.n	80031e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
      break;
 80031e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_TIM_ConfigClockSource+0x1c>
 8003210:	2302      	movs	r3, #2
 8003212:	e0b4      	b.n	800337e <HAL_TIM_ConfigClockSource+0x186>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324c:	d03e      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xd4>
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	f200 8087 	bhi.w	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	f000 8086 	beq.w	800336a <HAL_TIM_ConfigClockSource+0x172>
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d87f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b70      	cmp	r3, #112	; 0x70
 8003266:	d01a      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xa6>
 8003268:	2b70      	cmp	r3, #112	; 0x70
 800326a:	d87b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d050      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x11a>
 8003270:	2b60      	cmp	r3, #96	; 0x60
 8003272:	d877      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b50      	cmp	r3, #80	; 0x50
 8003276:	d03c      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003278:	2b50      	cmp	r3, #80	; 0x50
 800327a:	d873      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d058      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x13a>
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d86f      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b30      	cmp	r3, #48	; 0x30
 8003286:	d064      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b30      	cmp	r3, #48	; 0x30
 800328a:	d86b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d060      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b20      	cmp	r3, #32
 8003292:	d867      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d05c      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b10      	cmp	r3, #16
 800329a:	d05a      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x15a>
 800329c:	e062      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f000 fc08 	bl	8003ac2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	609a      	str	r2, [r3, #8]
      break;
 80032ca:	e04f      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f000 fbf1 	bl	8003ac2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e03c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 fb65 	bl	80039ce <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2150      	movs	r1, #80	; 0x50
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fbbe 	bl	8003a8c <TIM_ITRx_SetConfig>
      break;
 8003310:	e02c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	461a      	mov	r2, r3
 8003320:	f000 fb84 	bl	8003a2c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2160      	movs	r1, #96	; 0x60
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fbae 	bl	8003a8c <TIM_ITRx_SetConfig>
      break;
 8003330:	e01c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	f000 fb45 	bl	80039ce <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb9e 	bl	8003a8c <TIM_ITRx_SetConfig>
      break;
 8003350:	e00c      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	4610      	mov	r0, r2
 800335e:	f000 fb95 	bl	8003a8c <TIM_ITRx_SetConfig>
      break;
 8003362:	e003      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      break;
 8003368:	e000      	b.n	800336c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800336a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_TIM_SlaveConfigSynchro+0x18>
 800339a:	2302      	movs	r3, #2
 800339c:	e031      	b.n	8003402 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa7b 	bl	80038ac <TIM_SlaveTimer_SetConfig>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e018      	b.n	8003402 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d00f      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00b      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d007      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a3b      	ldr	r2, [pc, #236]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d108      	bne.n	800345e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <TIM_Base_SetConfig+0x114>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d02b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346c:	d027      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <TIM_Base_SetConfig+0x118>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d023      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <TIM_Base_SetConfig+0x11c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d01f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2a      	ldr	r2, [pc, #168]	; (800352c <TIM_Base_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a29      	ldr	r2, [pc, #164]	; (8003530 <TIM_Base_SetConfig+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a28      	ldr	r2, [pc, #160]	; (8003534 <TIM_Base_SetConfig+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <TIM_Base_SetConfig+0x12c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a26      	ldr	r2, [pc, #152]	; (800353c <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <TIM_Base_SetConfig+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <TIM_Base_SetConfig+0x138>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <TIM_Base_SetConfig+0x13c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <TIM_Base_SetConfig+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xf8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <TIM_Base_SetConfig+0x124>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010000 	.word	0x40010000
 8003524:	40000400 	.word	0x40000400
 8003528:	40000800 	.word	0x40000800
 800352c:	40000c00 	.word	0x40000c00
 8003530:	40010400 	.word	0x40010400
 8003534:	40014000 	.word	0x40014000
 8003538:	40014400 	.word	0x40014400
 800353c:	40014800 	.word	0x40014800
 8003540:	40001800 	.word	0x40001800
 8003544:	40001c00 	.word	0x40001c00
 8003548:	40002000 	.word	0x40002000

0800354c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 0302 	bic.w	r3, r3, #2
 8003594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a20      	ldr	r2, [pc, #128]	; (8003624 <TIM_OC1_SetConfig+0xd8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_OC1_SetConfig+0x64>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <TIM_OC1_SetConfig+0xdc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10c      	bne.n	80035ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0308 	bic.w	r3, r3, #8
 80035b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a15      	ldr	r2, [pc, #84]	; (8003624 <TIM_OC1_SetConfig+0xd8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d003      	beq.n	80035da <TIM_OC1_SetConfig+0x8e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <TIM_OC1_SetConfig+0xdc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40010000 	.word	0x40010000
 8003628:	40010400 	.word	0x40010400

0800362c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0210 	bic.w	r2, r3, #16
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0320 	bic.w	r3, r3, #32
 8003676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a22      	ldr	r2, [pc, #136]	; (8003710 <TIM_OC2_SetConfig+0xe4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d003      	beq.n	8003694 <TIM_OC2_SetConfig+0x68>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a21      	ldr	r2, [pc, #132]	; (8003714 <TIM_OC2_SetConfig+0xe8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d10d      	bne.n	80036b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800369a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <TIM_OC2_SetConfig+0xe4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_OC2_SetConfig+0x94>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <TIM_OC2_SetConfig+0xe8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d113      	bne.n	80036e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40010000 	.word	0x40010000
 8003714:	40010400 	.word	0x40010400

08003718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0303 	bic.w	r3, r3, #3
 800374e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	021b      	lsls	r3, r3, #8
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	4313      	orrs	r3, r2
 800376c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <TIM_OC3_SetConfig+0xe0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_OC3_SetConfig+0x66>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a20      	ldr	r2, [pc, #128]	; (80037fc <TIM_OC3_SetConfig+0xe4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d10d      	bne.n	800379a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <TIM_OC3_SetConfig+0xe0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_OC3_SetConfig+0x92>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <TIM_OC3_SetConfig+0xe4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d113      	bne.n	80037d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	621a      	str	r2, [r3, #32]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	40010000 	.word	0x40010000
 80037fc:	40010400 	.word	0x40010400

08003800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	031b      	lsls	r3, r3, #12
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <TIM_OC4_SetConfig+0xa4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d003      	beq.n	8003868 <TIM_OC4_SetConfig+0x68>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a11      	ldr	r2, [pc, #68]	; (80038a8 <TIM_OC4_SetConfig+0xa8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d109      	bne.n	800387c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010000 	.word	0x40010000
 80038a8:	40010400 	.word	0x40010400

080038ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 0307 	bic.w	r3, r3, #7
 80038da:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b70      	cmp	r3, #112	; 0x70
 80038f4:	d01a      	beq.n	800392c <TIM_SlaveTimer_SetConfig+0x80>
 80038f6:	2b70      	cmp	r3, #112	; 0x70
 80038f8:	d860      	bhi.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
 80038fa:	2b60      	cmp	r3, #96	; 0x60
 80038fc:	d054      	beq.n	80039a8 <TIM_SlaveTimer_SetConfig+0xfc>
 80038fe:	2b60      	cmp	r3, #96	; 0x60
 8003900:	d85c      	bhi.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
 8003902:	2b50      	cmp	r3, #80	; 0x50
 8003904:	d046      	beq.n	8003994 <TIM_SlaveTimer_SetConfig+0xe8>
 8003906:	2b50      	cmp	r3, #80	; 0x50
 8003908:	d858      	bhi.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d019      	beq.n	8003942 <TIM_SlaveTimer_SetConfig+0x96>
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d854      	bhi.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
 8003912:	2b30      	cmp	r3, #48	; 0x30
 8003914:	d055      	beq.n	80039c2 <TIM_SlaveTimer_SetConfig+0x116>
 8003916:	2b30      	cmp	r3, #48	; 0x30
 8003918:	d850      	bhi.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
 800391a:	2b20      	cmp	r3, #32
 800391c:	d051      	beq.n	80039c2 <TIM_SlaveTimer_SetConfig+0x116>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d84c      	bhi.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d04d      	beq.n	80039c2 <TIM_SlaveTimer_SetConfig+0x116>
 8003926:	2b10      	cmp	r3, #16
 8003928:	d04b      	beq.n	80039c2 <TIM_SlaveTimer_SetConfig+0x116>
 800392a:	e047      	b.n	80039bc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68d9      	ldr	r1, [r3, #12]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f000 f8c1 	bl	8003ac2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003940:	e040      	b.n	80039c4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b05      	cmp	r3, #5
 8003948:	d101      	bne.n	800394e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e03b      	b.n	80039c6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6a1a      	ldr	r2, [r3, #32]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003974:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	4313      	orrs	r3, r2
 8003980:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
      break;
 8003992:	e017      	b.n	80039c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6899      	ldr	r1, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	461a      	mov	r2, r3
 80039a2:	f000 f814 	bl	80039ce <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80039a6:	e00d      	b.n	80039c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f000 f839 	bl	8003a2c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80039ba:	e003      	b.n	80039c4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      break;
 80039c0:	e000      	b.n	80039c4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80039c2:	bf00      	nop
  }

  return status;
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b087      	sub	sp, #28
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f023 0201 	bic.w	r2, r3, #1
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 030a 	bic.w	r3, r3, #10
 8003a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	621a      	str	r2, [r3, #32]
}
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 0210 	bic.w	r2, r3, #16
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	031b      	lsls	r3, r3, #12
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f043 0307 	orr.w	r3, r3, #7
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	609a      	str	r2, [r3, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
 8003ace:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003adc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e05a      	b.n	8003bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a21      	ldr	r2, [pc, #132]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d01d      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d018      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a1a      	ldr	r2, [pc, #104]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00e      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d009      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800
 8003bec:	40000c00 	.word	0x40000c00
 8003bf0:	40010400 	.word	0x40010400
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40001800 	.word	0x40001800

08003bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e03d      	b.n	8003c94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e03f      	b.n	8003d32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fd fe16 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	; 0x24
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ce2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f929 	bl	8003f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	; 0x28
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d17c      	bne.n	8003e54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_UART_Transmit+0x2c>
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e075      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Transmit+0x3e>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e06e      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2221      	movs	r2, #33	; 0x21
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d8e:	f7fe f8dd 	bl	8001f4c <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	88fa      	ldrh	r2, [r7, #6]
 8003d98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	88fa      	ldrh	r2, [r7, #6]
 8003d9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d108      	bne.n	8003dbc <HAL_UART_Transmit+0x82>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d104      	bne.n	8003dbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e003      	b.n	8003dc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003dcc:	e02a      	b.n	8003e24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2180      	movs	r1, #128	; 0x80
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f840 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e036      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3302      	adds	r3, #2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e007      	b.n	8003e16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1cf      	bne.n	8003dce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f810 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e006      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	e000      	b.n	8003e56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e54:	2302      	movs	r3, #2
  }
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b090      	sub	sp, #64	; 0x40
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	e050      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e76:	d04c      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e7e:	f7fe f865 	bl	8001f4c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d241      	bcs.n	8003f12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eae:	637a      	str	r2, [r7, #52]	; 0x34
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e5      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3314      	adds	r3, #20
 8003ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ee2:	623a      	str	r2, [r7, #32]
 8003ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	69f9      	ldr	r1, [r7, #28]
 8003ee8:	6a3a      	ldr	r2, [r7, #32]
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e00f      	b.n	8003f32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d09f      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3740      	adds	r7, #64	; 0x40
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	b09f      	sub	sp, #124	; 0x7c
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	68d9      	ldr	r1, [r3, #12]
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	ea40 0301 	orr.w	r3, r0, r1
 8003f5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f80:	f021 010c 	bic.w	r1, r1, #12
 8003f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	6999      	ldr	r1, [r3, #24]
 8003f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	ea40 0301 	orr.w	r3, r0, r1
 8003fa4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4bc5      	ldr	r3, [pc, #788]	; (80042c0 <UART_SetConfig+0x384>)
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d004      	beq.n	8003fba <UART_SetConfig+0x7e>
 8003fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4bc3      	ldr	r3, [pc, #780]	; (80042c4 <UART_SetConfig+0x388>)
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d103      	bne.n	8003fc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fba:	f7fe fbb5 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003fbe:	6778      	str	r0, [r7, #116]	; 0x74
 8003fc0:	e002      	b.n	8003fc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fc2:	f7fe fb9d 	bl	8002700 <HAL_RCC_GetPCLK1Freq>
 8003fc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	f040 80b6 	bne.w	8004140 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd6:	461c      	mov	r4, r3
 8003fd8:	f04f 0500 	mov.w	r5, #0
 8003fdc:	4622      	mov	r2, r4
 8003fde:	462b      	mov	r3, r5
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	6439      	str	r1, [r7, #64]	; 0x40
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003fec:	1912      	adds	r2, r2, r4
 8003fee:	eb45 0303 	adc.w	r3, r5, r3
 8003ff2:	f04f 0000 	mov.w	r0, #0
 8003ff6:	f04f 0100 	mov.w	r1, #0
 8003ffa:	00d9      	lsls	r1, r3, #3
 8003ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004000:	00d0      	lsls	r0, r2, #3
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	1911      	adds	r1, r2, r4
 8004008:	6639      	str	r1, [r7, #96]	; 0x60
 800400a:	416b      	adcs	r3, r5
 800400c:	667b      	str	r3, [r7, #100]	; 0x64
 800400e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	461a      	mov	r2, r3
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	1891      	adds	r1, r2, r2
 800401a:	63b9      	str	r1, [r7, #56]	; 0x38
 800401c:	415b      	adcs	r3, r3
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004020:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004024:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004028:	f7fc f942 	bl	80002b0 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4ba5      	ldr	r3, [pc, #660]	; (80042c8 <UART_SetConfig+0x38c>)
 8004032:	fba3 2302 	umull	r2, r3, r3, r2
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	011e      	lsls	r6, r3, #4
 800403a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800403c:	461c      	mov	r4, r3
 800403e:	f04f 0500 	mov.w	r5, #0
 8004042:	4622      	mov	r2, r4
 8004044:	462b      	mov	r3, r5
 8004046:	1891      	adds	r1, r2, r2
 8004048:	6339      	str	r1, [r7, #48]	; 0x30
 800404a:	415b      	adcs	r3, r3
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
 800404e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004052:	1912      	adds	r2, r2, r4
 8004054:	eb45 0303 	adc.w	r3, r5, r3
 8004058:	f04f 0000 	mov.w	r0, #0
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	00d9      	lsls	r1, r3, #3
 8004062:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004066:	00d0      	lsls	r0, r2, #3
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	1911      	adds	r1, r2, r4
 800406e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004070:	416b      	adcs	r3, r5
 8004072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	461a      	mov	r2, r3
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	1891      	adds	r1, r2, r2
 8004080:	62b9      	str	r1, [r7, #40]	; 0x28
 8004082:	415b      	adcs	r3, r3
 8004084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004086:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800408a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800408e:	f7fc f90f 	bl	80002b0 <__aeabi_uldivmod>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <UART_SetConfig+0x38c>)
 8004098:	fba3 1302 	umull	r1, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2164      	movs	r1, #100	; 0x64
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	3332      	adds	r3, #50	; 0x32
 80040aa:	4a87      	ldr	r2, [pc, #540]	; (80042c8 <UART_SetConfig+0x38c>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040b8:	441e      	add	r6, r3
 80040ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040bc:	4618      	mov	r0, r3
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	1894      	adds	r4, r2, r2
 80040c8:	623c      	str	r4, [r7, #32]
 80040ca:	415b      	adcs	r3, r3
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
 80040ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040d2:	1812      	adds	r2, r2, r0
 80040d4:	eb41 0303 	adc.w	r3, r1, r3
 80040d8:	f04f 0400 	mov.w	r4, #0
 80040dc:	f04f 0500 	mov.w	r5, #0
 80040e0:	00dd      	lsls	r5, r3, #3
 80040e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040e6:	00d4      	lsls	r4, r2, #3
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	1814      	adds	r4, r2, r0
 80040ee:	653c      	str	r4, [r7, #80]	; 0x50
 80040f0:	414b      	adcs	r3, r1
 80040f2:	657b      	str	r3, [r7, #84]	; 0x54
 80040f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	1891      	adds	r1, r2, r2
 8004100:	61b9      	str	r1, [r7, #24]
 8004102:	415b      	adcs	r3, r3
 8004104:	61fb      	str	r3, [r7, #28]
 8004106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800410a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800410e:	f7fc f8cf 	bl	80002b0 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <UART_SetConfig+0x38c>)
 8004118:	fba3 1302 	umull	r1, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	2164      	movs	r1, #100	; 0x64
 8004120:	fb01 f303 	mul.w	r3, r1, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	3332      	adds	r3, #50	; 0x32
 800412a:	4a67      	ldr	r2, [pc, #412]	; (80042c8 <UART_SetConfig+0x38c>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	f003 0207 	and.w	r2, r3, #7
 8004136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4432      	add	r2, r6
 800413c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800413e:	e0b9      	b.n	80042b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004142:	461c      	mov	r4, r3
 8004144:	f04f 0500 	mov.w	r5, #0
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	1891      	adds	r1, r2, r2
 800414e:	6139      	str	r1, [r7, #16]
 8004150:	415b      	adcs	r3, r3
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004158:	1912      	adds	r2, r2, r4
 800415a:	eb45 0303 	adc.w	r3, r5, r3
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	00d9      	lsls	r1, r3, #3
 8004168:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800416c:	00d0      	lsls	r0, r2, #3
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	eb12 0804 	adds.w	r8, r2, r4
 8004176:	eb43 0905 	adc.w	r9, r3, r5
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4618      	mov	r0, r3
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	008b      	lsls	r3, r1, #2
 800418e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004192:	0082      	lsls	r2, r0, #2
 8004194:	4640      	mov	r0, r8
 8004196:	4649      	mov	r1, r9
 8004198:	f7fc f88a 	bl	80002b0 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4b49      	ldr	r3, [pc, #292]	; (80042c8 <UART_SetConfig+0x38c>)
 80041a2:	fba3 2302 	umull	r2, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	011e      	lsls	r6, r3, #4
 80041aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ac:	4618      	mov	r0, r3
 80041ae:	f04f 0100 	mov.w	r1, #0
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	1894      	adds	r4, r2, r2
 80041b8:	60bc      	str	r4, [r7, #8]
 80041ba:	415b      	adcs	r3, r3
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c2:	1812      	adds	r2, r2, r0
 80041c4:	eb41 0303 	adc.w	r3, r1, r3
 80041c8:	f04f 0400 	mov.w	r4, #0
 80041cc:	f04f 0500 	mov.w	r5, #0
 80041d0:	00dd      	lsls	r5, r3, #3
 80041d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041d6:	00d4      	lsls	r4, r2, #3
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	1814      	adds	r4, r2, r0
 80041de:	64bc      	str	r4, [r7, #72]	; 0x48
 80041e0:	414b      	adcs	r3, r1
 80041e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f04f 0100 	mov.w	r1, #0
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	008b      	lsls	r3, r1, #2
 80041f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041fc:	0082      	lsls	r2, r0, #2
 80041fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004202:	f7fc f855 	bl	80002b0 <__aeabi_uldivmod>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <UART_SetConfig+0x38c>)
 800420c:	fba3 1302 	umull	r1, r3, r3, r2
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	2164      	movs	r1, #100	; 0x64
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	3332      	adds	r3, #50	; 0x32
 800421e:	4a2a      	ldr	r2, [pc, #168]	; (80042c8 <UART_SetConfig+0x38c>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	095b      	lsrs	r3, r3, #5
 8004226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422a:	441e      	add	r6, r3
 800422c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800422e:	4618      	mov	r0, r3
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	1894      	adds	r4, r2, r2
 800423a:	603c      	str	r4, [r7, #0]
 800423c:	415b      	adcs	r3, r3
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004244:	1812      	adds	r2, r2, r0
 8004246:	eb41 0303 	adc.w	r3, r1, r3
 800424a:	f04f 0400 	mov.w	r4, #0
 800424e:	f04f 0500 	mov.w	r5, #0
 8004252:	00dd      	lsls	r5, r3, #3
 8004254:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004258:	00d4      	lsls	r4, r2, #3
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	eb12 0a00 	adds.w	sl, r2, r0
 8004262:	eb43 0b01 	adc.w	fp, r3, r1
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	008b      	lsls	r3, r1, #2
 800427a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800427e:	0082      	lsls	r2, r0, #2
 8004280:	4650      	mov	r0, sl
 8004282:	4659      	mov	r1, fp
 8004284:	f7fc f814 	bl	80002b0 <__aeabi_uldivmod>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <UART_SetConfig+0x38c>)
 800428e:	fba3 1302 	umull	r1, r3, r3, r2
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2164      	movs	r1, #100	; 0x64
 8004296:	fb01 f303 	mul.w	r3, r1, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	3332      	adds	r3, #50	; 0x32
 80042a0:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <UART_SetConfig+0x38c>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	f003 020f 	and.w	r2, r3, #15
 80042ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4432      	add	r2, r6
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	377c      	adds	r7, #124	; 0x7c
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042be:	bf00      	nop
 80042c0:	40011000 	.word	0x40011000
 80042c4:	40011400 	.word	0x40011400
 80042c8:	51eb851f 	.word	0x51eb851f

080042cc <__errno>:
 80042cc:	4b01      	ldr	r3, [pc, #4]	; (80042d4 <__errno+0x8>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c

080042d8 <__libc_init_array>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4d0d      	ldr	r5, [pc, #52]	; (8004310 <__libc_init_array+0x38>)
 80042dc:	4c0d      	ldr	r4, [pc, #52]	; (8004314 <__libc_init_array+0x3c>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	2600      	movs	r6, #0
 80042e4:	42a6      	cmp	r6, r4
 80042e6:	d109      	bne.n	80042fc <__libc_init_array+0x24>
 80042e8:	4d0b      	ldr	r5, [pc, #44]	; (8004318 <__libc_init_array+0x40>)
 80042ea:	4c0c      	ldr	r4, [pc, #48]	; (800431c <__libc_init_array+0x44>)
 80042ec:	f000 fc68 	bl	8004bc0 <_init>
 80042f0:	1b64      	subs	r4, r4, r5
 80042f2:	10a4      	asrs	r4, r4, #2
 80042f4:	2600      	movs	r6, #0
 80042f6:	42a6      	cmp	r6, r4
 80042f8:	d105      	bne.n	8004306 <__libc_init_array+0x2e>
 80042fa:	bd70      	pop	{r4, r5, r6, pc}
 80042fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004300:	4798      	blx	r3
 8004302:	3601      	adds	r6, #1
 8004304:	e7ee      	b.n	80042e4 <__libc_init_array+0xc>
 8004306:	f855 3b04 	ldr.w	r3, [r5], #4
 800430a:	4798      	blx	r3
 800430c:	3601      	adds	r6, #1
 800430e:	e7f2      	b.n	80042f6 <__libc_init_array+0x1e>
 8004310:	08004d08 	.word	0x08004d08
 8004314:	08004d08 	.word	0x08004d08
 8004318:	08004d08 	.word	0x08004d08
 800431c:	08004d0c 	.word	0x08004d0c

08004320 <memset>:
 8004320:	4402      	add	r2, r0
 8004322:	4603      	mov	r3, r0
 8004324:	4293      	cmp	r3, r2
 8004326:	d100      	bne.n	800432a <memset+0xa>
 8004328:	4770      	bx	lr
 800432a:	f803 1b01 	strb.w	r1, [r3], #1
 800432e:	e7f9      	b.n	8004324 <memset+0x4>

08004330 <_vsniprintf_r>:
 8004330:	b530      	push	{r4, r5, lr}
 8004332:	1e14      	subs	r4, r2, #0
 8004334:	4605      	mov	r5, r0
 8004336:	b09b      	sub	sp, #108	; 0x6c
 8004338:	4618      	mov	r0, r3
 800433a:	da05      	bge.n	8004348 <_vsniprintf_r+0x18>
 800433c:	238b      	movs	r3, #139	; 0x8b
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004344:	b01b      	add	sp, #108	; 0x6c
 8004346:	bd30      	pop	{r4, r5, pc}
 8004348:	f44f 7302 	mov.w	r3, #520	; 0x208
 800434c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004350:	bf14      	ite	ne
 8004352:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004356:	4623      	moveq	r3, r4
 8004358:	9302      	str	r3, [sp, #8]
 800435a:	9305      	str	r3, [sp, #20]
 800435c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004360:	9100      	str	r1, [sp, #0]
 8004362:	9104      	str	r1, [sp, #16]
 8004364:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004368:	4602      	mov	r2, r0
 800436a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800436c:	4669      	mov	r1, sp
 800436e:	4628      	mov	r0, r5
 8004370:	f000 f874 	bl	800445c <_svfiprintf_r>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	bfbc      	itt	lt
 8004378:	238b      	movlt	r3, #139	; 0x8b
 800437a:	602b      	strlt	r3, [r5, #0]
 800437c:	2c00      	cmp	r4, #0
 800437e:	d0e1      	beq.n	8004344 <_vsniprintf_r+0x14>
 8004380:	9b00      	ldr	r3, [sp, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e7dd      	b.n	8004344 <_vsniprintf_r+0x14>

08004388 <vsniprintf>:
 8004388:	b507      	push	{r0, r1, r2, lr}
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	460a      	mov	r2, r1
 8004390:	4601      	mov	r1, r0
 8004392:	4803      	ldr	r0, [pc, #12]	; (80043a0 <vsniprintf+0x18>)
 8004394:	6800      	ldr	r0, [r0, #0]
 8004396:	f7ff ffcb 	bl	8004330 <_vsniprintf_r>
 800439a:	b003      	add	sp, #12
 800439c:	f85d fb04 	ldr.w	pc, [sp], #4
 80043a0:	2000000c 	.word	0x2000000c

080043a4 <__ssputs_r>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	688e      	ldr	r6, [r1, #8]
 80043aa:	429e      	cmp	r6, r3
 80043ac:	4682      	mov	sl, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	4690      	mov	r8, r2
 80043b2:	461f      	mov	r7, r3
 80043b4:	d838      	bhi.n	8004428 <__ssputs_r+0x84>
 80043b6:	898a      	ldrh	r2, [r1, #12]
 80043b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043bc:	d032      	beq.n	8004424 <__ssputs_r+0x80>
 80043be:	6825      	ldr	r5, [r4, #0]
 80043c0:	6909      	ldr	r1, [r1, #16]
 80043c2:	eba5 0901 	sub.w	r9, r5, r1
 80043c6:	6965      	ldr	r5, [r4, #20]
 80043c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043d0:	3301      	adds	r3, #1
 80043d2:	444b      	add	r3, r9
 80043d4:	106d      	asrs	r5, r5, #1
 80043d6:	429d      	cmp	r5, r3
 80043d8:	bf38      	it	cc
 80043da:	461d      	movcc	r5, r3
 80043dc:	0553      	lsls	r3, r2, #21
 80043de:	d531      	bpl.n	8004444 <__ssputs_r+0xa0>
 80043e0:	4629      	mov	r1, r5
 80043e2:	f000 fb47 	bl	8004a74 <_malloc_r>
 80043e6:	4606      	mov	r6, r0
 80043e8:	b950      	cbnz	r0, 8004400 <__ssputs_r+0x5c>
 80043ea:	230c      	movs	r3, #12
 80043ec:	f8ca 3000 	str.w	r3, [sl]
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	6921      	ldr	r1, [r4, #16]
 8004402:	464a      	mov	r2, r9
 8004404:	f000 fabe 	bl	8004984 <memcpy>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	6126      	str	r6, [r4, #16]
 8004416:	6165      	str	r5, [r4, #20]
 8004418:	444e      	add	r6, r9
 800441a:	eba5 0509 	sub.w	r5, r5, r9
 800441e:	6026      	str	r6, [r4, #0]
 8004420:	60a5      	str	r5, [r4, #8]
 8004422:	463e      	mov	r6, r7
 8004424:	42be      	cmp	r6, r7
 8004426:	d900      	bls.n	800442a <__ssputs_r+0x86>
 8004428:	463e      	mov	r6, r7
 800442a:	4632      	mov	r2, r6
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	4641      	mov	r1, r8
 8004430:	f000 fab6 	bl	80049a0 <memmove>
 8004434:	68a3      	ldr	r3, [r4, #8]
 8004436:	6822      	ldr	r2, [r4, #0]
 8004438:	1b9b      	subs	r3, r3, r6
 800443a:	4432      	add	r2, r6
 800443c:	60a3      	str	r3, [r4, #8]
 800443e:	6022      	str	r2, [r4, #0]
 8004440:	2000      	movs	r0, #0
 8004442:	e7db      	b.n	80043fc <__ssputs_r+0x58>
 8004444:	462a      	mov	r2, r5
 8004446:	f000 fb6f 	bl	8004b28 <_realloc_r>
 800444a:	4606      	mov	r6, r0
 800444c:	2800      	cmp	r0, #0
 800444e:	d1e1      	bne.n	8004414 <__ssputs_r+0x70>
 8004450:	6921      	ldr	r1, [r4, #16]
 8004452:	4650      	mov	r0, sl
 8004454:	f000 fabe 	bl	80049d4 <_free_r>
 8004458:	e7c7      	b.n	80043ea <__ssputs_r+0x46>
	...

0800445c <_svfiprintf_r>:
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	4698      	mov	r8, r3
 8004462:	898b      	ldrh	r3, [r1, #12]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	b09d      	sub	sp, #116	; 0x74
 8004468:	4607      	mov	r7, r0
 800446a:	460d      	mov	r5, r1
 800446c:	4614      	mov	r4, r2
 800446e:	d50e      	bpl.n	800448e <_svfiprintf_r+0x32>
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	b963      	cbnz	r3, 800448e <_svfiprintf_r+0x32>
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	f000 fafd 	bl	8004a74 <_malloc_r>
 800447a:	6028      	str	r0, [r5, #0]
 800447c:	6128      	str	r0, [r5, #16]
 800447e:	b920      	cbnz	r0, 800448a <_svfiprintf_r+0x2e>
 8004480:	230c      	movs	r3, #12
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004488:	e0d1      	b.n	800462e <_svfiprintf_r+0x1d2>
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	616b      	str	r3, [r5, #20]
 800448e:	2300      	movs	r3, #0
 8004490:	9309      	str	r3, [sp, #36]	; 0x24
 8004492:	2320      	movs	r3, #32
 8004494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004498:	f8cd 800c 	str.w	r8, [sp, #12]
 800449c:	2330      	movs	r3, #48	; 0x30
 800449e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004648 <_svfiprintf_r+0x1ec>
 80044a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a6:	f04f 0901 	mov.w	r9, #1
 80044aa:	4623      	mov	r3, r4
 80044ac:	469a      	mov	sl, r3
 80044ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b2:	b10a      	cbz	r2, 80044b8 <_svfiprintf_r+0x5c>
 80044b4:	2a25      	cmp	r2, #37	; 0x25
 80044b6:	d1f9      	bne.n	80044ac <_svfiprintf_r+0x50>
 80044b8:	ebba 0b04 	subs.w	fp, sl, r4
 80044bc:	d00b      	beq.n	80044d6 <_svfiprintf_r+0x7a>
 80044be:	465b      	mov	r3, fp
 80044c0:	4622      	mov	r2, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	4638      	mov	r0, r7
 80044c6:	f7ff ff6d 	bl	80043a4 <__ssputs_r>
 80044ca:	3001      	adds	r0, #1
 80044cc:	f000 80aa 	beq.w	8004624 <_svfiprintf_r+0x1c8>
 80044d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d2:	445a      	add	r2, fp
 80044d4:	9209      	str	r2, [sp, #36]	; 0x24
 80044d6:	f89a 3000 	ldrb.w	r3, [sl]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80a2 	beq.w	8004624 <_svfiprintf_r+0x1c8>
 80044e0:	2300      	movs	r3, #0
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ea:	f10a 0a01 	add.w	sl, sl, #1
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	9307      	str	r3, [sp, #28]
 80044f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f6:	931a      	str	r3, [sp, #104]	; 0x68
 80044f8:	4654      	mov	r4, sl
 80044fa:	2205      	movs	r2, #5
 80044fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004500:	4851      	ldr	r0, [pc, #324]	; (8004648 <_svfiprintf_r+0x1ec>)
 8004502:	f7fb fe85 	bl	8000210 <memchr>
 8004506:	9a04      	ldr	r2, [sp, #16]
 8004508:	b9d8      	cbnz	r0, 8004542 <_svfiprintf_r+0xe6>
 800450a:	06d0      	lsls	r0, r2, #27
 800450c:	bf44      	itt	mi
 800450e:	2320      	movmi	r3, #32
 8004510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004514:	0711      	lsls	r1, r2, #28
 8004516:	bf44      	itt	mi
 8004518:	232b      	movmi	r3, #43	; 0x2b
 800451a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800451e:	f89a 3000 	ldrb.w	r3, [sl]
 8004522:	2b2a      	cmp	r3, #42	; 0x2a
 8004524:	d015      	beq.n	8004552 <_svfiprintf_r+0xf6>
 8004526:	9a07      	ldr	r2, [sp, #28]
 8004528:	4654      	mov	r4, sl
 800452a:	2000      	movs	r0, #0
 800452c:	f04f 0c0a 	mov.w	ip, #10
 8004530:	4621      	mov	r1, r4
 8004532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004536:	3b30      	subs	r3, #48	; 0x30
 8004538:	2b09      	cmp	r3, #9
 800453a:	d94e      	bls.n	80045da <_svfiprintf_r+0x17e>
 800453c:	b1b0      	cbz	r0, 800456c <_svfiprintf_r+0x110>
 800453e:	9207      	str	r2, [sp, #28]
 8004540:	e014      	b.n	800456c <_svfiprintf_r+0x110>
 8004542:	eba0 0308 	sub.w	r3, r0, r8
 8004546:	fa09 f303 	lsl.w	r3, r9, r3
 800454a:	4313      	orrs	r3, r2
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	46a2      	mov	sl, r4
 8004550:	e7d2      	b.n	80044f8 <_svfiprintf_r+0x9c>
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	9103      	str	r1, [sp, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfbb      	ittet	lt
 800455e:	425b      	neglt	r3, r3
 8004560:	f042 0202 	orrlt.w	r2, r2, #2
 8004564:	9307      	strge	r3, [sp, #28]
 8004566:	9307      	strlt	r3, [sp, #28]
 8004568:	bfb8      	it	lt
 800456a:	9204      	strlt	r2, [sp, #16]
 800456c:	7823      	ldrb	r3, [r4, #0]
 800456e:	2b2e      	cmp	r3, #46	; 0x2e
 8004570:	d10c      	bne.n	800458c <_svfiprintf_r+0x130>
 8004572:	7863      	ldrb	r3, [r4, #1]
 8004574:	2b2a      	cmp	r3, #42	; 0x2a
 8004576:	d135      	bne.n	80045e4 <_svfiprintf_r+0x188>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	1d1a      	adds	r2, r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	9203      	str	r2, [sp, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	bfb8      	it	lt
 8004584:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004588:	3402      	adds	r4, #2
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004658 <_svfiprintf_r+0x1fc>
 8004590:	7821      	ldrb	r1, [r4, #0]
 8004592:	2203      	movs	r2, #3
 8004594:	4650      	mov	r0, sl
 8004596:	f7fb fe3b 	bl	8000210 <memchr>
 800459a:	b140      	cbz	r0, 80045ae <_svfiprintf_r+0x152>
 800459c:	2340      	movs	r3, #64	; 0x40
 800459e:	eba0 000a 	sub.w	r0, r0, sl
 80045a2:	fa03 f000 	lsl.w	r0, r3, r0
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	4303      	orrs	r3, r0
 80045aa:	3401      	adds	r4, #1
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b2:	4826      	ldr	r0, [pc, #152]	; (800464c <_svfiprintf_r+0x1f0>)
 80045b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045b8:	2206      	movs	r2, #6
 80045ba:	f7fb fe29 	bl	8000210 <memchr>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d038      	beq.n	8004634 <_svfiprintf_r+0x1d8>
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <_svfiprintf_r+0x1f4>)
 80045c4:	bb1b      	cbnz	r3, 800460e <_svfiprintf_r+0x1b2>
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	3307      	adds	r3, #7
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	3308      	adds	r3, #8
 80045d0:	9303      	str	r3, [sp, #12]
 80045d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d4:	4433      	add	r3, r6
 80045d6:	9309      	str	r3, [sp, #36]	; 0x24
 80045d8:	e767      	b.n	80044aa <_svfiprintf_r+0x4e>
 80045da:	fb0c 3202 	mla	r2, ip, r2, r3
 80045de:	460c      	mov	r4, r1
 80045e0:	2001      	movs	r0, #1
 80045e2:	e7a5      	b.n	8004530 <_svfiprintf_r+0xd4>
 80045e4:	2300      	movs	r3, #0
 80045e6:	3401      	adds	r4, #1
 80045e8:	9305      	str	r3, [sp, #20]
 80045ea:	4619      	mov	r1, r3
 80045ec:	f04f 0c0a 	mov.w	ip, #10
 80045f0:	4620      	mov	r0, r4
 80045f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f6:	3a30      	subs	r2, #48	; 0x30
 80045f8:	2a09      	cmp	r2, #9
 80045fa:	d903      	bls.n	8004604 <_svfiprintf_r+0x1a8>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0c5      	beq.n	800458c <_svfiprintf_r+0x130>
 8004600:	9105      	str	r1, [sp, #20]
 8004602:	e7c3      	b.n	800458c <_svfiprintf_r+0x130>
 8004604:	fb0c 2101 	mla	r1, ip, r1, r2
 8004608:	4604      	mov	r4, r0
 800460a:	2301      	movs	r3, #1
 800460c:	e7f0      	b.n	80045f0 <_svfiprintf_r+0x194>
 800460e:	ab03      	add	r3, sp, #12
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	462a      	mov	r2, r5
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <_svfiprintf_r+0x1f8>)
 8004616:	a904      	add	r1, sp, #16
 8004618:	4638      	mov	r0, r7
 800461a:	f3af 8000 	nop.w
 800461e:	1c42      	adds	r2, r0, #1
 8004620:	4606      	mov	r6, r0
 8004622:	d1d6      	bne.n	80045d2 <_svfiprintf_r+0x176>
 8004624:	89ab      	ldrh	r3, [r5, #12]
 8004626:	065b      	lsls	r3, r3, #25
 8004628:	f53f af2c 	bmi.w	8004484 <_svfiprintf_r+0x28>
 800462c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800462e:	b01d      	add	sp, #116	; 0x74
 8004630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004634:	ab03      	add	r3, sp, #12
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	462a      	mov	r2, r5
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <_svfiprintf_r+0x1f8>)
 800463c:	a904      	add	r1, sp, #16
 800463e:	4638      	mov	r0, r7
 8004640:	f000 f87a 	bl	8004738 <_printf_i>
 8004644:	e7eb      	b.n	800461e <_svfiprintf_r+0x1c2>
 8004646:	bf00      	nop
 8004648:	08004ccc 	.word	0x08004ccc
 800464c:	08004cd6 	.word	0x08004cd6
 8004650:	00000000 	.word	0x00000000
 8004654:	080043a5 	.word	0x080043a5
 8004658:	08004cd2 	.word	0x08004cd2

0800465c <_printf_common>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	4616      	mov	r6, r2
 8004662:	4699      	mov	r9, r3
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	690b      	ldr	r3, [r1, #16]
 8004668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800466c:	4293      	cmp	r3, r2
 800466e:	bfb8      	it	lt
 8004670:	4613      	movlt	r3, r2
 8004672:	6033      	str	r3, [r6, #0]
 8004674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004678:	4607      	mov	r7, r0
 800467a:	460c      	mov	r4, r1
 800467c:	b10a      	cbz	r2, 8004682 <_printf_common+0x26>
 800467e:	3301      	adds	r3, #1
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	0699      	lsls	r1, r3, #26
 8004686:	bf42      	ittt	mi
 8004688:	6833      	ldrmi	r3, [r6, #0]
 800468a:	3302      	addmi	r3, #2
 800468c:	6033      	strmi	r3, [r6, #0]
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	f015 0506 	ands.w	r5, r5, #6
 8004694:	d106      	bne.n	80046a4 <_printf_common+0x48>
 8004696:	f104 0a19 	add.w	sl, r4, #25
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	6832      	ldr	r2, [r6, #0]
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dc26      	bgt.n	80046f2 <_printf_common+0x96>
 80046a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a8:	1e13      	subs	r3, r2, #0
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	bf18      	it	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	0692      	lsls	r2, r2, #26
 80046b2:	d42b      	bmi.n	800470c <_printf_common+0xb0>
 80046b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b8:	4649      	mov	r1, r9
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d01e      	beq.n	8004700 <_printf_common+0xa4>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	68e5      	ldr	r5, [r4, #12]
 80046c6:	6832      	ldr	r2, [r6, #0]
 80046c8:	f003 0306 	and.w	r3, r3, #6
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	bf08      	it	eq
 80046d0:	1aad      	subeq	r5, r5, r2
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	6922      	ldr	r2, [r4, #16]
 80046d6:	bf0c      	ite	eq
 80046d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046dc:	2500      	movne	r5, #0
 80046de:	4293      	cmp	r3, r2
 80046e0:	bfc4      	itt	gt
 80046e2:	1a9b      	subgt	r3, r3, r2
 80046e4:	18ed      	addgt	r5, r5, r3
 80046e6:	2600      	movs	r6, #0
 80046e8:	341a      	adds	r4, #26
 80046ea:	42b5      	cmp	r5, r6
 80046ec:	d11a      	bne.n	8004724 <_printf_common+0xc8>
 80046ee:	2000      	movs	r0, #0
 80046f0:	e008      	b.n	8004704 <_printf_common+0xa8>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4652      	mov	r2, sl
 80046f6:	4649      	mov	r1, r9
 80046f8:	4638      	mov	r0, r7
 80046fa:	47c0      	blx	r8
 80046fc:	3001      	adds	r0, #1
 80046fe:	d103      	bne.n	8004708 <_printf_common+0xac>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004708:	3501      	adds	r5, #1
 800470a:	e7c6      	b.n	800469a <_printf_common+0x3e>
 800470c:	18e1      	adds	r1, r4, r3
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	2030      	movs	r0, #48	; 0x30
 8004712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004716:	4422      	add	r2, r4
 8004718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800471c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004720:	3302      	adds	r3, #2
 8004722:	e7c7      	b.n	80046b4 <_printf_common+0x58>
 8004724:	2301      	movs	r3, #1
 8004726:	4622      	mov	r2, r4
 8004728:	4649      	mov	r1, r9
 800472a:	4638      	mov	r0, r7
 800472c:	47c0      	blx	r8
 800472e:	3001      	adds	r0, #1
 8004730:	d0e6      	beq.n	8004700 <_printf_common+0xa4>
 8004732:	3601      	adds	r6, #1
 8004734:	e7d9      	b.n	80046ea <_printf_common+0x8e>
	...

08004738 <_printf_i>:
 8004738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	460c      	mov	r4, r1
 800473e:	4691      	mov	r9, r2
 8004740:	7e27      	ldrb	r7, [r4, #24]
 8004742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004744:	2f78      	cmp	r7, #120	; 0x78
 8004746:	4680      	mov	r8, r0
 8004748:	469a      	mov	sl, r3
 800474a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474e:	d807      	bhi.n	8004760 <_printf_i+0x28>
 8004750:	2f62      	cmp	r7, #98	; 0x62
 8004752:	d80a      	bhi.n	800476a <_printf_i+0x32>
 8004754:	2f00      	cmp	r7, #0
 8004756:	f000 80d8 	beq.w	800490a <_printf_i+0x1d2>
 800475a:	2f58      	cmp	r7, #88	; 0x58
 800475c:	f000 80a3 	beq.w	80048a6 <_printf_i+0x16e>
 8004760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004768:	e03a      	b.n	80047e0 <_printf_i+0xa8>
 800476a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800476e:	2b15      	cmp	r3, #21
 8004770:	d8f6      	bhi.n	8004760 <_printf_i+0x28>
 8004772:	a001      	add	r0, pc, #4	; (adr r0, 8004778 <_printf_i+0x40>)
 8004774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004778:	080047d1 	.word	0x080047d1
 800477c:	080047e5 	.word	0x080047e5
 8004780:	08004761 	.word	0x08004761
 8004784:	08004761 	.word	0x08004761
 8004788:	08004761 	.word	0x08004761
 800478c:	08004761 	.word	0x08004761
 8004790:	080047e5 	.word	0x080047e5
 8004794:	08004761 	.word	0x08004761
 8004798:	08004761 	.word	0x08004761
 800479c:	08004761 	.word	0x08004761
 80047a0:	08004761 	.word	0x08004761
 80047a4:	080048f1 	.word	0x080048f1
 80047a8:	08004815 	.word	0x08004815
 80047ac:	080048d3 	.word	0x080048d3
 80047b0:	08004761 	.word	0x08004761
 80047b4:	08004761 	.word	0x08004761
 80047b8:	08004913 	.word	0x08004913
 80047bc:	08004761 	.word	0x08004761
 80047c0:	08004815 	.word	0x08004815
 80047c4:	08004761 	.word	0x08004761
 80047c8:	08004761 	.word	0x08004761
 80047cc:	080048db 	.word	0x080048db
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	600a      	str	r2, [r1, #0]
 80047d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0a3      	b.n	800492c <_printf_i+0x1f4>
 80047e4:	6825      	ldr	r5, [r4, #0]
 80047e6:	6808      	ldr	r0, [r1, #0]
 80047e8:	062e      	lsls	r6, r5, #24
 80047ea:	f100 0304 	add.w	r3, r0, #4
 80047ee:	d50a      	bpl.n	8004806 <_printf_i+0xce>
 80047f0:	6805      	ldr	r5, [r0, #0]
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	da03      	bge.n	8004800 <_printf_i+0xc8>
 80047f8:	232d      	movs	r3, #45	; 0x2d
 80047fa:	426d      	negs	r5, r5
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004800:	485e      	ldr	r0, [pc, #376]	; (800497c <_printf_i+0x244>)
 8004802:	230a      	movs	r3, #10
 8004804:	e019      	b.n	800483a <_printf_i+0x102>
 8004806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800480a:	6805      	ldr	r5, [r0, #0]
 800480c:	600b      	str	r3, [r1, #0]
 800480e:	bf18      	it	ne
 8004810:	b22d      	sxthne	r5, r5
 8004812:	e7ef      	b.n	80047f4 <_printf_i+0xbc>
 8004814:	680b      	ldr	r3, [r1, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	1d18      	adds	r0, r3, #4
 800481a:	6008      	str	r0, [r1, #0]
 800481c:	0628      	lsls	r0, r5, #24
 800481e:	d501      	bpl.n	8004824 <_printf_i+0xec>
 8004820:	681d      	ldr	r5, [r3, #0]
 8004822:	e002      	b.n	800482a <_printf_i+0xf2>
 8004824:	0669      	lsls	r1, r5, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0xe8>
 8004828:	881d      	ldrh	r5, [r3, #0]
 800482a:	4854      	ldr	r0, [pc, #336]	; (800497c <_printf_i+0x244>)
 800482c:	2f6f      	cmp	r7, #111	; 0x6f
 800482e:	bf0c      	ite	eq
 8004830:	2308      	moveq	r3, #8
 8004832:	230a      	movne	r3, #10
 8004834:	2100      	movs	r1, #0
 8004836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483a:	6866      	ldr	r6, [r4, #4]
 800483c:	60a6      	str	r6, [r4, #8]
 800483e:	2e00      	cmp	r6, #0
 8004840:	bfa2      	ittt	ge
 8004842:	6821      	ldrge	r1, [r4, #0]
 8004844:	f021 0104 	bicge.w	r1, r1, #4
 8004848:	6021      	strge	r1, [r4, #0]
 800484a:	b90d      	cbnz	r5, 8004850 <_printf_i+0x118>
 800484c:	2e00      	cmp	r6, #0
 800484e:	d04d      	beq.n	80048ec <_printf_i+0x1b4>
 8004850:	4616      	mov	r6, r2
 8004852:	fbb5 f1f3 	udiv	r1, r5, r3
 8004856:	fb03 5711 	mls	r7, r3, r1, r5
 800485a:	5dc7      	ldrb	r7, [r0, r7]
 800485c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004860:	462f      	mov	r7, r5
 8004862:	42bb      	cmp	r3, r7
 8004864:	460d      	mov	r5, r1
 8004866:	d9f4      	bls.n	8004852 <_printf_i+0x11a>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10b      	bne.n	8004884 <_printf_i+0x14c>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	07df      	lsls	r7, r3, #31
 8004870:	d508      	bpl.n	8004884 <_printf_i+0x14c>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	6861      	ldr	r1, [r4, #4]
 8004876:	4299      	cmp	r1, r3
 8004878:	bfde      	ittt	le
 800487a:	2330      	movle	r3, #48	; 0x30
 800487c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004880:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004884:	1b92      	subs	r2, r2, r6
 8004886:	6122      	str	r2, [r4, #16]
 8004888:	f8cd a000 	str.w	sl, [sp]
 800488c:	464b      	mov	r3, r9
 800488e:	aa03      	add	r2, sp, #12
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff fee2 	bl	800465c <_printf_common>
 8004898:	3001      	adds	r0, #1
 800489a:	d14c      	bne.n	8004936 <_printf_i+0x1fe>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a0:	b004      	add	sp, #16
 80048a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a6:	4835      	ldr	r0, [pc, #212]	; (800497c <_printf_i+0x244>)
 80048a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	680e      	ldr	r6, [r1, #0]
 80048b0:	061f      	lsls	r7, r3, #24
 80048b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80048b6:	600e      	str	r6, [r1, #0]
 80048b8:	d514      	bpl.n	80048e4 <_printf_i+0x1ac>
 80048ba:	07d9      	lsls	r1, r3, #31
 80048bc:	bf44      	itt	mi
 80048be:	f043 0320 	orrmi.w	r3, r3, #32
 80048c2:	6023      	strmi	r3, [r4, #0]
 80048c4:	b91d      	cbnz	r5, 80048ce <_printf_i+0x196>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f023 0320 	bic.w	r3, r3, #32
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	2310      	movs	r3, #16
 80048d0:	e7b0      	b.n	8004834 <_printf_i+0xfc>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	2378      	movs	r3, #120	; 0x78
 80048dc:	4828      	ldr	r0, [pc, #160]	; (8004980 <_printf_i+0x248>)
 80048de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e2:	e7e3      	b.n	80048ac <_printf_i+0x174>
 80048e4:	065e      	lsls	r6, r3, #25
 80048e6:	bf48      	it	mi
 80048e8:	b2ad      	uxthmi	r5, r5
 80048ea:	e7e6      	b.n	80048ba <_printf_i+0x182>
 80048ec:	4616      	mov	r6, r2
 80048ee:	e7bb      	b.n	8004868 <_printf_i+0x130>
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	6826      	ldr	r6, [r4, #0]
 80048f4:	6960      	ldr	r0, [r4, #20]
 80048f6:	1d1d      	adds	r5, r3, #4
 80048f8:	600d      	str	r5, [r1, #0]
 80048fa:	0635      	lsls	r5, r6, #24
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	d501      	bpl.n	8004904 <_printf_i+0x1cc>
 8004900:	6018      	str	r0, [r3, #0]
 8004902:	e002      	b.n	800490a <_printf_i+0x1d2>
 8004904:	0671      	lsls	r1, r6, #25
 8004906:	d5fb      	bpl.n	8004900 <_printf_i+0x1c8>
 8004908:	8018      	strh	r0, [r3, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	4616      	mov	r6, r2
 8004910:	e7ba      	b.n	8004888 <_printf_i+0x150>
 8004912:	680b      	ldr	r3, [r1, #0]
 8004914:	1d1a      	adds	r2, r3, #4
 8004916:	600a      	str	r2, [r1, #0]
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	2100      	movs	r1, #0
 800491e:	4630      	mov	r0, r6
 8004920:	f7fb fc76 	bl	8000210 <memchr>
 8004924:	b108      	cbz	r0, 800492a <_printf_i+0x1f2>
 8004926:	1b80      	subs	r0, r0, r6
 8004928:	6060      	str	r0, [r4, #4]
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	2300      	movs	r3, #0
 8004930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004934:	e7a8      	b.n	8004888 <_printf_i+0x150>
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	4632      	mov	r2, r6
 800493a:	4649      	mov	r1, r9
 800493c:	4640      	mov	r0, r8
 800493e:	47d0      	blx	sl
 8004940:	3001      	adds	r0, #1
 8004942:	d0ab      	beq.n	800489c <_printf_i+0x164>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	079b      	lsls	r3, r3, #30
 8004948:	d413      	bmi.n	8004972 <_printf_i+0x23a>
 800494a:	68e0      	ldr	r0, [r4, #12]
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	4298      	cmp	r0, r3
 8004950:	bfb8      	it	lt
 8004952:	4618      	movlt	r0, r3
 8004954:	e7a4      	b.n	80048a0 <_printf_i+0x168>
 8004956:	2301      	movs	r3, #1
 8004958:	4632      	mov	r2, r6
 800495a:	4649      	mov	r1, r9
 800495c:	4640      	mov	r0, r8
 800495e:	47d0      	blx	sl
 8004960:	3001      	adds	r0, #1
 8004962:	d09b      	beq.n	800489c <_printf_i+0x164>
 8004964:	3501      	adds	r5, #1
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	9903      	ldr	r1, [sp, #12]
 800496a:	1a5b      	subs	r3, r3, r1
 800496c:	42ab      	cmp	r3, r5
 800496e:	dcf2      	bgt.n	8004956 <_printf_i+0x21e>
 8004970:	e7eb      	b.n	800494a <_printf_i+0x212>
 8004972:	2500      	movs	r5, #0
 8004974:	f104 0619 	add.w	r6, r4, #25
 8004978:	e7f5      	b.n	8004966 <_printf_i+0x22e>
 800497a:	bf00      	nop
 800497c:	08004cdd 	.word	0x08004cdd
 8004980:	08004cee 	.word	0x08004cee

08004984 <memcpy>:
 8004984:	440a      	add	r2, r1
 8004986:	4291      	cmp	r1, r2
 8004988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800498c:	d100      	bne.n	8004990 <memcpy+0xc>
 800498e:	4770      	bx	lr
 8004990:	b510      	push	{r4, lr}
 8004992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800499a:	4291      	cmp	r1, r2
 800499c:	d1f9      	bne.n	8004992 <memcpy+0xe>
 800499e:	bd10      	pop	{r4, pc}

080049a0 <memmove>:
 80049a0:	4288      	cmp	r0, r1
 80049a2:	b510      	push	{r4, lr}
 80049a4:	eb01 0402 	add.w	r4, r1, r2
 80049a8:	d902      	bls.n	80049b0 <memmove+0x10>
 80049aa:	4284      	cmp	r4, r0
 80049ac:	4623      	mov	r3, r4
 80049ae:	d807      	bhi.n	80049c0 <memmove+0x20>
 80049b0:	1e43      	subs	r3, r0, #1
 80049b2:	42a1      	cmp	r1, r4
 80049b4:	d008      	beq.n	80049c8 <memmove+0x28>
 80049b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049be:	e7f8      	b.n	80049b2 <memmove+0x12>
 80049c0:	4402      	add	r2, r0
 80049c2:	4601      	mov	r1, r0
 80049c4:	428a      	cmp	r2, r1
 80049c6:	d100      	bne.n	80049ca <memmove+0x2a>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049d2:	e7f7      	b.n	80049c4 <memmove+0x24>

080049d4 <_free_r>:
 80049d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d048      	beq.n	8004a6c <_free_r+0x98>
 80049da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049de:	9001      	str	r0, [sp, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f1a1 0404 	sub.w	r4, r1, #4
 80049e6:	bfb8      	it	lt
 80049e8:	18e4      	addlt	r4, r4, r3
 80049ea:	f000 f8d3 	bl	8004b94 <__malloc_lock>
 80049ee:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <_free_r+0x9c>)
 80049f0:	9801      	ldr	r0, [sp, #4]
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	4615      	mov	r5, r2
 80049f6:	b933      	cbnz	r3, 8004a06 <_free_r+0x32>
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6014      	str	r4, [r2, #0]
 80049fc:	b003      	add	sp, #12
 80049fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a02:	f000 b8cd 	b.w	8004ba0 <__malloc_unlock>
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	d90b      	bls.n	8004a22 <_free_r+0x4e>
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	1862      	adds	r2, r4, r1
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	bf04      	itt	eq
 8004a12:	681a      	ldreq	r2, [r3, #0]
 8004a14:	685b      	ldreq	r3, [r3, #4]
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	bf04      	itt	eq
 8004a1a:	1852      	addeq	r2, r2, r1
 8004a1c:	6022      	streq	r2, [r4, #0]
 8004a1e:	602c      	str	r4, [r5, #0]
 8004a20:	e7ec      	b.n	80049fc <_free_r+0x28>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x58>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x4e>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1855      	adds	r5, r2, r1
 8004a30:	42a5      	cmp	r5, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x78>
 8004a34:	6824      	ldr	r4, [r4, #0]
 8004a36:	4421      	add	r1, r4
 8004a38:	1854      	adds	r4, r2, r1
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1dd      	bne.n	80049fc <_free_r+0x28>
 8004a40:	681c      	ldr	r4, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	4421      	add	r1, r4
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7d7      	b.n	80049fc <_free_r+0x28>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x80>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	e7d3      	b.n	80049fc <_free_r+0x28>
 8004a54:	6825      	ldr	r5, [r4, #0]
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1949      	addeq	r1, r1, r5
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7c7      	b.n	80049fc <_free_r+0x28>
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bd30      	pop	{r4, r5, pc}
 8004a70:	20000098 	.word	0x20000098

08004a74 <_malloc_r>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	1ccd      	adds	r5, r1, #3
 8004a78:	f025 0503 	bic.w	r5, r5, #3
 8004a7c:	3508      	adds	r5, #8
 8004a7e:	2d0c      	cmp	r5, #12
 8004a80:	bf38      	it	cc
 8004a82:	250c      	movcc	r5, #12
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	4606      	mov	r6, r0
 8004a88:	db01      	blt.n	8004a8e <_malloc_r+0x1a>
 8004a8a:	42a9      	cmp	r1, r5
 8004a8c:	d903      	bls.n	8004a96 <_malloc_r+0x22>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	2000      	movs	r0, #0
 8004a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a96:	f000 f87d 	bl	8004b94 <__malloc_lock>
 8004a9a:	4921      	ldr	r1, [pc, #132]	; (8004b20 <_malloc_r+0xac>)
 8004a9c:	680a      	ldr	r2, [r1, #0]
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	b99c      	cbnz	r4, 8004aca <_malloc_r+0x56>
 8004aa2:	4f20      	ldr	r7, [pc, #128]	; (8004b24 <_malloc_r+0xb0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b923      	cbnz	r3, 8004ab2 <_malloc_r+0x3e>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f000 f862 	bl	8004b74 <_sbrk_r>
 8004ab0:	6038      	str	r0, [r7, #0]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 f85d 	bl	8004b74 <_sbrk_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d123      	bne.n	8004b06 <_malloc_r+0x92>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f86c 	bl	8004ba0 <__malloc_unlock>
 8004ac8:	e7e3      	b.n	8004a92 <_malloc_r+0x1e>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	1b5b      	subs	r3, r3, r5
 8004ace:	d417      	bmi.n	8004b00 <_malloc_r+0x8c>
 8004ad0:	2b0b      	cmp	r3, #11
 8004ad2:	d903      	bls.n	8004adc <_malloc_r+0x68>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	441c      	add	r4, r3
 8004ad8:	6025      	str	r5, [r4, #0]
 8004ada:	e004      	b.n	8004ae6 <_malloc_r+0x72>
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	42a2      	cmp	r2, r4
 8004ae0:	bf0c      	ite	eq
 8004ae2:	600b      	streq	r3, [r1, #0]
 8004ae4:	6053      	strne	r3, [r2, #4]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f000 f85a 	bl	8004ba0 <__malloc_unlock>
 8004aec:	f104 000b 	add.w	r0, r4, #11
 8004af0:	1d23      	adds	r3, r4, #4
 8004af2:	f020 0007 	bic.w	r0, r0, #7
 8004af6:	1ac2      	subs	r2, r0, r3
 8004af8:	d0cc      	beq.n	8004a94 <_malloc_r+0x20>
 8004afa:	1a1b      	subs	r3, r3, r0
 8004afc:	50a3      	str	r3, [r4, r2]
 8004afe:	e7c9      	b.n	8004a94 <_malloc_r+0x20>
 8004b00:	4622      	mov	r2, r4
 8004b02:	6864      	ldr	r4, [r4, #4]
 8004b04:	e7cc      	b.n	8004aa0 <_malloc_r+0x2c>
 8004b06:	1cc4      	adds	r4, r0, #3
 8004b08:	f024 0403 	bic.w	r4, r4, #3
 8004b0c:	42a0      	cmp	r0, r4
 8004b0e:	d0e3      	beq.n	8004ad8 <_malloc_r+0x64>
 8004b10:	1a21      	subs	r1, r4, r0
 8004b12:	4630      	mov	r0, r6
 8004b14:	f000 f82e 	bl	8004b74 <_sbrk_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d1dd      	bne.n	8004ad8 <_malloc_r+0x64>
 8004b1c:	e7cf      	b.n	8004abe <_malloc_r+0x4a>
 8004b1e:	bf00      	nop
 8004b20:	20000098 	.word	0x20000098
 8004b24:	2000009c 	.word	0x2000009c

08004b28 <_realloc_r>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	460e      	mov	r6, r1
 8004b30:	b921      	cbnz	r1, 8004b3c <_realloc_r+0x14>
 8004b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b36:	4611      	mov	r1, r2
 8004b38:	f7ff bf9c 	b.w	8004a74 <_malloc_r>
 8004b3c:	b922      	cbnz	r2, 8004b48 <_realloc_r+0x20>
 8004b3e:	f7ff ff49 	bl	80049d4 <_free_r>
 8004b42:	4625      	mov	r5, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	f000 f830 	bl	8004bac <_malloc_usable_size_r>
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d20f      	bcs.n	8004b70 <_realloc_r+0x48>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4638      	mov	r0, r7
 8004b54:	f7ff ff8e 	bl	8004a74 <_malloc_r>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d0f2      	beq.n	8004b44 <_realloc_r+0x1c>
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4622      	mov	r2, r4
 8004b62:	f7ff ff0f 	bl	8004984 <memcpy>
 8004b66:	4631      	mov	r1, r6
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff ff33 	bl	80049d4 <_free_r>
 8004b6e:	e7e9      	b.n	8004b44 <_realloc_r+0x1c>
 8004b70:	4635      	mov	r5, r6
 8004b72:	e7e7      	b.n	8004b44 <_realloc_r+0x1c>

08004b74 <_sbrk_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	; (8004b90 <_sbrk_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc ffb0 	bl	8001ae4 <_sbrk>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_sbrk_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_sbrk_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20004c1c 	.word	0x20004c1c

08004b94 <__malloc_lock>:
 8004b94:	4801      	ldr	r0, [pc, #4]	; (8004b9c <__malloc_lock+0x8>)
 8004b96:	f000 b811 	b.w	8004bbc <__retarget_lock_acquire_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	20004c24 	.word	0x20004c24

08004ba0 <__malloc_unlock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__malloc_unlock+0x8>)
 8004ba2:	f000 b80c 	b.w	8004bbe <__retarget_lock_release_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20004c24 	.word	0x20004c24

08004bac <_malloc_usable_size_r>:
 8004bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb0:	1f18      	subs	r0, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfbc      	itt	lt
 8004bb6:	580b      	ldrlt	r3, [r1, r0]
 8004bb8:	18c0      	addlt	r0, r0, r3
 8004bba:	4770      	bx	lr

08004bbc <__retarget_lock_acquire_recursive>:
 8004bbc:	4770      	bx	lr

08004bbe <__retarget_lock_release_recursive>:
 8004bbe:	4770      	bx	lr

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
