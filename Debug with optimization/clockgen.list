
clockgen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b4  080035b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000135b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bbc  20000070  0800362c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c2c  0800362c  00024c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187b4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba5  00000000  00000000  00038854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0003b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021e9a  00000000  00000000  0003bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00017824  00000000  00000000  0005dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d1656  00000000  00000000  000754ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00146b04  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000021a0  00000000  00000000  00146b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002748  00000000  00000000  00148cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0001125c  00000000  00000000  0014b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800346c 	.word	0x0800346c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800346c 	.word	0x0800346c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	2300      	movs	r3, #0
{
 80005ac:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80005b2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80005ba:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4923      	ldr	r1, [pc, #140]	; (800064c <SystemClock_Config+0xa4>)
 80005c0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c2:	9302      	str	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c6:	4a22      	ldr	r2, [pc, #136]	; (8000650 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80005cc:	6408      	str	r0, [r1, #64]	; 0x40
 80005ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80005d0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80005d4:	9100      	str	r1, [sp, #0]
 80005d6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	6813      	ldr	r3, [r2, #0]
 80005dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	6813      	ldr	r3, [r2, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	9301      	str	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ea:	2401      	movs	r4, #1
 80005ec:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2202      	movs	r2, #2
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f6:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fe:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 320;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2102      	movs	r1, #2
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000602:	2408      	movs	r4, #8
 8000604:	f44f 75a0 	mov.w	r5, #320	; 0x140
 8000608:	2202      	movs	r2, #2
 800060a:	2302      	movs	r3, #2
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8000612:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000616:	9114      	str	r1, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f001 fba6 	bl	8001d68 <HAL_RCC_OscConfig>
 800061c:	b108      	cbz	r0, 8000622 <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000620:	e7fe      	b.n	8000620 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	260f      	movs	r6, #15
 8000624:	2702      	movs	r7, #2
 8000626:	2400      	movs	r4, #0
 8000628:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800062c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	a802      	add	r0, sp, #8
 8000632:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8000638:	e9cd 4504 	strd	r4, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800063c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f001 fa7d 	bl	8001b3c <HAL_RCC_ClockConfig>
 8000642:	b108      	cbz	r0, 8000648 <SystemClock_Config+0xa0>
 8000644:	b672      	cpsid	i
	while (1) {
 8000646:	e7fe      	b.n	8000646 <SystemClock_Config+0x9e>
}
 8000648:	b017      	add	sp, #92	; 0x5c
 800064a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <main>:
{
 8000654:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	progbuftop = 0;
 8000658:	4a9c      	ldr	r2, [pc, #624]	; (80008cc <main+0x278>)
	current_us = 0;
 800065a:	4b9d      	ldr	r3, [pc, #628]	; (80008d0 <main+0x27c>)
	uartrecbufftop = 0;
 800065c:	f8df a294 	ldr.w	sl, [pc, #660]	; 80008f4 <main+0x2a0>
{
 8000660:	b0a3      	sub	sp, #140	; 0x8c
	uartrecbufftop = 0;
 8000662:	2400      	movs	r4, #0
	progbuftop = 0;
 8000664:	6014      	str	r4, [r2, #0]
	current_us = 0;
 8000666:	601c      	str	r4, [r3, #0]
	uartrecbufftop = 0;
 8000668:	f8ca 4000 	str.w	r4, [sl]
  HAL_Init();
 800066c:	f001 f8b4 	bl	80017d8 <HAL_Init>
  SystemClock_Config();
 8000670:	f7ff ff9a 	bl	80005a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
 8000678:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	4b95      	ldr	r3, [pc, #596]	; (80008d4 <main+0x280>)
 800067e:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOA, TEST_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000684:	4894      	ldr	r0, [pc, #592]	; (80008d8 <main+0x284>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	f042 0204 	orr.w	r2, r2, #4
 800068a:	631a      	str	r2, [r3, #48]	; 0x30
 800068c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068e:	f002 0204 	and.w	r2, r2, #4
 8000692:	9202      	str	r2, [sp, #8]
 8000694:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	9403      	str	r4, [sp, #12]
 8000698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
 80006a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80006a6:	9203      	str	r2, [sp, #12]
 80006a8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	9404      	str	r4, [sp, #16]
 80006ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006ae:	f042 0201 	orr.w	r2, r2, #1
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
 80006b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b6:	f002 0201 	and.w	r2, r2, #1
 80006ba:	9204      	str	r2, [sp, #16]
 80006bc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	9405      	str	r4, [sp, #20]
 80006c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c2:	f042 0202 	orr.w	r2, r2, #2
 80006c6:	631a      	str	r2, [r3, #48]	; 0x30
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, TEST_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d0:	4622      	mov	r2, r4
 80006d2:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOA, TEST_GPIO_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d6:	f001 fa2d 	bl	8001b34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80006da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e2:	487e      	ldr	r0, [pc, #504]	; (80008dc <main+0x288>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e6:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = B1_Pin;
 80006e8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  GPIO_InitStruct.Pin = TEST_GPIO_Pin|LD2_Pin;
 80006ec:	2600      	movs	r6, #0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f001 f91b 	bl	8001928 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TEST_GPIO_Pin|LD2_Pin;
 80006f2:	2700      	movs	r7, #0
 80006f4:	2230      	movs	r2, #48	; 0x30
 80006f6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	4877      	ldr	r0, [pc, #476]	; (80008d8 <main+0x284>)
 80006fa:	a91a      	add	r1, sp, #104	; 0x68
  GPIO_InitStruct.Pin = TEST_GPIO_Pin|LD2_Pin;
 80006fc:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000700:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f001 f910 	bl	8001928 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8000708:	4875      	ldr	r0, [pc, #468]	; (80008e0 <main+0x28c>)
 800070a:	4b76      	ldr	r3, [pc, #472]	; (80008e4 <main+0x290>)
 800070c:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000712:	220c      	movs	r2, #12
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
  huart2.Init.Parity = UART_PARITY_NONE;
 8000718:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 800071c:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000720:	6084      	str	r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	61c4      	str	r4, [r0, #28]
  huart2.Init.BaudRate = 115200;
 8000724:	6041      	str	r1, [r0, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000726:	f002 f8dd 	bl	80028e4 <HAL_UART_Init>
 800072a:	b108      	cbz	r0, 8000730 <main+0xdc>
 800072c:	b672      	cpsid	i
	while (1) {
 800072e:	e7fe      	b.n	800072e <main+0xda>
  htim1.Instance = TIM1;
 8000730:	4d6d      	ldr	r5, [pc, #436]	; (80008e8 <main+0x294>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	9008      	str	r0, [sp, #32]
 8000734:	4604      	mov	r4, r0
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000736:	2220      	movs	r2, #32
 8000738:	4601      	mov	r1, r0
 800073a:	a81a      	add	r0, sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000740:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000744:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000748:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 800074c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8000750:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000754:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000758:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	9407      	str	r4, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800075e:	f002 fa35 	bl	8002bcc <memset>
  htim1.Instance = TIM1;
 8000762:	4a62      	ldr	r2, [pc, #392]	; (80008ec <main+0x298>)
  htim1.Init.Prescaler = 0;
 8000764:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = 65535;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076a:	4628      	mov	r0, r5
  htim1.Init.RepetitionCounter = 0;
 800076c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000770:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8000774:	602a      	str	r2, [r5, #0]
  htim1.Init.Period = 65535;
 8000776:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	f001 fd00 	bl	800217c <HAL_TIM_Base_Init>
 800077c:	b108      	cbz	r0, 8000782 <main+0x12e>
 800077e:	b672      	cpsid	i
	while (1) {
 8000780:	e7fe      	b.n	8000780 <main+0x12c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000786:	a908      	add	r1, sp, #32
 8000788:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078a:	f8cd 8020 	str.w	r8, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f001 ff01 	bl	8002594 <HAL_TIM_ConfigClockSource>
 8000792:	b108      	cbz	r0, 8000798 <main+0x144>
 8000794:	b672      	cpsid	i
	while (1) {
 8000796:	e7fe      	b.n	8000796 <main+0x142>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000798:	4628      	mov	r0, r5
 800079a:	f001 fd7f 	bl	800229c <HAL_TIM_OC_Init>
 800079e:	b108      	cbz	r0, 80007a4 <main+0x150>
 80007a0:	b672      	cpsid	i
	while (1) {
 80007a2:	e7fe      	b.n	80007a2 <main+0x14e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007a4:	2206      	movs	r2, #6
 80007a6:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007a8:	a90c      	add	r1, sp, #48	; 0x30
 80007aa:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80007ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007b0:	f001 ffa0 	bl	80026f4 <HAL_TIM_SlaveConfigSynchro>
 80007b4:	b108      	cbz	r0, 80007ba <main+0x166>
 80007b6:	b672      	cpsid	i
	while (1) {
 80007b8:	e7fe      	b.n	80007b8 <main+0x164>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ba:	a906      	add	r1, sp, #24
 80007bc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007be:	e9cd 6706 	strd	r6, r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c2:	f002 f823 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	b108      	cbz	r0, 80007cc <main+0x178>
 80007c8:	b672      	cpsid	i
	while (1) {
 80007ca:	e7fe      	b.n	80007ca <main+0x176>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007cc:	2330      	movs	r3, #48	; 0x30
 80007ce:	2400      	movs	r4, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007d0:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007d2:	2208      	movs	r2, #8
 80007d4:	a912      	add	r1, sp, #72	; 0x48
 80007d6:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80007d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 80007dc:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
 80007e0:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e4:	f001 fde8 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 80007e8:	b108      	cbz	r0, 80007ee <main+0x19a>
 80007ea:	b672      	cpsid	i
	while (1) {
 80007ec:	e7fe      	b.n	80007ec <main+0x198>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f4:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f6:	a91a      	add	r1, sp, #104	; 0x68
 80007f8:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fa:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
 80007fe:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000802:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	f002 f843 	bl	8002890 <HAL_TIMEx_ConfigBreakDeadTime>
 800080a:	4604      	mov	r4, r0
 800080c:	b108      	cbz	r0, 8000812 <main+0x1be>
 800080e:	b672      	cpsid	i
	while (1) {
 8000810:	e7fe      	b.n	8000810 <main+0x1bc>
  htim2.Instance = TIM2;
 8000812:	4e37      	ldr	r6, [pc, #220]	; (80008f0 <main+0x29c>)
  HAL_TIM_MspPostInit(&htim1);
 8000814:	4628      	mov	r0, r5
 8000816:	f000 fc5f 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 800081a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Period = 4294967295;
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000822:	4630      	mov	r0, r6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000824:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000828:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800082c:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000830:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 800083c:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000840:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	e9c6 4401 	strd	r4, r4, [r6, #4]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000848:	9416      	str	r4, [sp, #88]	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084a:	9420      	str	r4, [sp, #128]	; 0x80
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084e:	61b4      	str	r4, [r6, #24]
  htim2.Instance = TIM2;
 8000850:	6032      	str	r2, [r6, #0]
  htim2.Init.Period = 4294967295;
 8000852:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000854:	f001 fc92 	bl	800217c <HAL_TIM_Base_Init>
 8000858:	b108      	cbz	r0, 800085e <main+0x20a>
 800085a:	b672      	cpsid	i
	while (1) {
 800085c:	e7fe      	b.n	800085c <main+0x208>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800085e:	4630      	mov	r0, r6
 8000860:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000866:	f001 fe95 	bl	8002594 <HAL_TIM_ConfigClockSource>
 800086a:	b108      	cbz	r0, 8000870 <main+0x21c>
 800086c:	b672      	cpsid	i
	while (1) {
 800086e:	e7fe      	b.n	800086e <main+0x21a>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000870:	481f      	ldr	r0, [pc, #124]	; (80008f0 <main+0x29c>)
 8000872:	f001 fd13 	bl	800229c <HAL_TIM_OC_Init>
 8000876:	b108      	cbz	r0, 800087c <main+0x228>
 8000878:	b672      	cpsid	i
	while (1) {
 800087a:	e7fe      	b.n	800087a <main+0x226>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800087c:	f04f 0806 	mov.w	r8, #6
 8000880:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <main+0x29c>)
 8000886:	a912      	add	r1, sp, #72	; 0x48
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000888:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800088c:	f001 ff32 	bl	80026f4 <HAL_TIM_SlaveConfigSynchro>
 8000890:	b108      	cbz	r0, 8000896 <main+0x242>
 8000892:	b672      	cpsid	i
	while (1) {
 8000894:	e7fe      	b.n	8000894 <main+0x240>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000896:	4816      	ldr	r0, [pc, #88]	; (80008f0 <main+0x29c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000898:	2600      	movs	r6, #0
 800089a:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089c:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	e9cd 6708 	strd	r6, r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	f001 ffb3 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	4603      	mov	r3, r0
 80008a8:	b108      	cbz	r0, 80008ae <main+0x25a>
 80008aa:	b672      	cpsid	i
	while (1) {
 80008ac:	e7fe      	b.n	80008ac <main+0x258>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008ae:	2430      	movs	r4, #48	; 0x30
 80008b0:	2500      	movs	r5, #0
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <main+0x29c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b4:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b6:	2208      	movs	r2, #8
 80008b8:	a91a      	add	r1, sp, #104	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80008ba:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c0:	f001 fd7a 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 80008c4:	b1c0      	cbz	r0, 80008f8 <main+0x2a4>
 80008c6:	b672      	cpsid	i
	while (1) {
 80008c8:	e7fe      	b.n	80008c8 <main+0x274>
 80008ca:	bf00      	nop
 80008cc:	200004a0 	.word	0x200004a0
 80008d0:	20004aa8 	.word	0x20004aa8
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	20004b84 	.word	0x20004b84
 80008e4:	40004400 	.word	0x40004400
 80008e8:	20004af4 	.word	0x20004af4
 80008ec:	40010000 	.word	0x40010000
 80008f0:	20004b3c 	.word	0x20004b3c
 80008f4:	20000aa4 	.word	0x20000aa4
  HAL_TIM_MspPostInit(&htim2);
 80008f8:	9001      	str	r0, [sp, #4]
 80008fa:	48af      	ldr	r0, [pc, #700]	; (8000bb8 <main+0x564>)
  htim3.Instance = TIM3;
 80008fc:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8000bc4 <main+0x570>
  HAL_TIM_MspPostInit(&htim2);
 8000900:	f000 fbea 	bl	80010d8 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000904:	9b01      	ldr	r3, [sp, #4]
  htim3.Instance = TIM3;
 8000906:	4aad      	ldr	r2, [pc, #692]	; (8000bbc <main+0x568>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000908:	9316      	str	r3, [sp, #88]	; 0x58
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800090e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000912:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8000916:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800091e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 8000922:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8000926:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	e9cb 3301 	strd	r3, r3, [fp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	9320      	str	r3, [sp, #128]	; 0x80
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	f8cb 3010 	str.w	r3, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	f8cb 3018 	str.w	r3, [fp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000938:	4658      	mov	r0, fp
  htim3.Init.Period = 6553;
 800093a:	f641 1399 	movw	r3, #6553	; 0x1999
  htim3.Instance = TIM3;
 800093e:	f8cb 2000 	str.w	r2, [fp]
  htim3.Init.Period = 6553;
 8000942:	f8cb 300c 	str.w	r3, [fp, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000946:	f001 fc19 	bl	800217c <HAL_TIM_Base_Init>
 800094a:	b108      	cbz	r0, 8000950 <main+0x2fc>
 800094c:	b672      	cpsid	i
	while (1) {
 800094e:	e7fe      	b.n	800094e <main+0x2fa>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000954:	a90c      	add	r1, sp, #48	; 0x30
 8000956:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095a:	f001 fe1b 	bl	8002594 <HAL_TIM_ConfigClockSource>
 800095e:	b108      	cbz	r0, 8000964 <main+0x310>
 8000960:	b672      	cpsid	i
	while (1) {
 8000962:	e7fe      	b.n	8000962 <main+0x30e>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000964:	4658      	mov	r0, fp
 8000966:	f001 fc99 	bl	800229c <HAL_TIM_OC_Init>
 800096a:	b108      	cbz	r0, 8000970 <main+0x31c>
 800096c:	b672      	cpsid	i
	while (1) {
 800096e:	e7fe      	b.n	800096e <main+0x31a>
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000970:	a912      	add	r1, sp, #72	; 0x48
 8000972:	4658      	mov	r0, fp
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000974:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000978:	f001 febc 	bl	80026f4 <HAL_TIM_SlaveConfigSynchro>
 800097c:	b108      	cbz	r0, 8000982 <main+0x32e>
 800097e:	b672      	cpsid	i
	while (1) {
 8000980:	e7fe      	b.n	8000980 <main+0x32c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000982:	a908      	add	r1, sp, #32
 8000984:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	e9cd 6708 	strd	r6, r7, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098a:	f001 ff3f 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	b108      	cbz	r0, 8000996 <main+0x342>
 8000992:	b672      	cpsid	i
	while (1) {
 8000994:	e7fe      	b.n	8000994 <main+0x340>
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000996:	4658      	mov	r0, fp
 8000998:	2204      	movs	r2, #4
 800099a:	a91a      	add	r1, sp, #104	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800099c:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	931c      	str	r3, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a4:	f001 fd08 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 80009a8:	b108      	cbz	r0, 80009ae <main+0x35a>
 80009aa:	b672      	cpsid	i
	while (1) {
 80009ac:	e7fe      	b.n	80009ac <main+0x358>
  htim4.Instance = TIM4;
 80009ae:	4d84      	ldr	r5, [pc, #528]	; (8000bc0 <main+0x56c>)
  HAL_TIM_MspPostInit(&htim3);
 80009b0:	4884      	ldr	r0, [pc, #528]	; (8000bc4 <main+0x570>)
 80009b2:	f000 fb91 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 80009b6:	4b84      	ldr	r3, [pc, #528]	; (8000bc8 <main+0x574>)
 80009b8:	602b      	str	r3, [r5, #0]
  htim4.Init.Period = 65535;
 80009ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009be:	2300      	movs	r3, #0
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009c0:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80009c6:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009ca:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80009ce:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 80009da:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80009de:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  htim4.Init.Period = 65535;
 80009e2:	60ea      	str	r2, [r5, #12]
  htim4.Init.Prescaler = 0;
 80009e4:	606b      	str	r3, [r5, #4]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009e6:	9316      	str	r3, [sp, #88]	; 0x58
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e8:	9320      	str	r3, [sp, #128]	; 0x80
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	60ab      	str	r3, [r5, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	612b      	str	r3, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009f0:	f001 fbc4 	bl	800217c <HAL_TIM_Base_Init>
 80009f4:	b108      	cbz	r0, 80009fa <main+0x3a6>
 80009f6:	b672      	cpsid	i
	while (1) {
 80009f8:	e7fe      	b.n	80009f8 <main+0x3a4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009fe:	a90c      	add	r1, sp, #48	; 0x30
 8000a00:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a06:	f001 fdc5 	bl	8002594 <HAL_TIM_ConfigClockSource>
 8000a0a:	b108      	cbz	r0, 8000a10 <main+0x3bc>
 8000a0c:	b672      	cpsid	i
	while (1) {
 8000a0e:	e7fe      	b.n	8000a0e <main+0x3ba>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000a10:	4628      	mov	r0, r5
 8000a12:	f001 fc43 	bl	800229c <HAL_TIM_OC_Init>
 8000a16:	b108      	cbz	r0, 8000a1c <main+0x3c8>
 8000a18:	b672      	cpsid	i
	while (1) {
 8000a1a:	e7fe      	b.n	8000a1a <main+0x3c6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a1c:	2606      	movs	r6, #6
 8000a1e:	2700      	movs	r7, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a20:	a912      	add	r1, sp, #72	; 0x48
 8000a22:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a24:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000a28:	f001 fe64 	bl	80026f4 <HAL_TIM_SlaveConfigSynchro>
 8000a2c:	b108      	cbz	r0, 8000a32 <main+0x3de>
 8000a2e:	b672      	cpsid	i
	while (1) {
 8000a30:	e7fe      	b.n	8000a30 <main+0x3dc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2200      	movs	r2, #0
 8000a34:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a36:	a908      	add	r1, sp, #32
 8000a38:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3e:	f001 fee5 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	b108      	cbz	r0, 8000a48 <main+0x3f4>
 8000a44:	b672      	cpsid	i
	while (1) {
 8000a46:	e7fe      	b.n	8000a46 <main+0x3f2>
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a48:	4602      	mov	r2, r0
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a4a:	2330      	movs	r3, #48	; 0x30
 8000a4c:	2400      	movs	r4, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4e:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a50:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a52:	a91a      	add	r1, sp, #104	; 0x68
 8000a54:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a56:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5a:	f001 fcad 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000a5e:	4604      	mov	r4, r0
 8000a60:	b108      	cbz	r0, 8000a66 <main+0x412>
 8000a62:	b672      	cpsid	i
	while (1) {
 8000a64:	e7fe      	b.n	8000a64 <main+0x410>
  htim5.Instance = TIM5;
 8000a66:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8000bd0 <main+0x57c>
  HAL_TIM_MspPostInit(&htim4);
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	f000 fb34 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8000a70:	4a56      	ldr	r2, [pc, #344]	; (8000bcc <main+0x578>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a72:	9416      	str	r4, [sp, #88]	; 0x58
  htim5.Init.Period = 4294967295;
 8000a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a78:	4640      	mov	r0, r8
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000a7e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a82:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000a86:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8e:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000a92:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000a96:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	e9c8 4401 	strd	r4, r4, [r8, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	9420      	str	r4, [sp, #128]	; 0x80
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa0:	f8c8 4010 	str.w	r4, [r8, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	f8c8 4018 	str.w	r4, [r8, #24]
  htim5.Instance = TIM5;
 8000aa8:	f8c8 2000 	str.w	r2, [r8]
  htim5.Init.Period = 4294967295;
 8000aac:	f8c8 300c 	str.w	r3, [r8, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ab0:	f001 fb64 	bl	800217c <HAL_TIM_Base_Init>
 8000ab4:	b108      	cbz	r0, 8000aba <main+0x466>
 8000ab6:	b672      	cpsid	i
	while (1) {
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x464>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000aba:	a90c      	add	r1, sp, #48	; 0x30
 8000abc:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000abe:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ac2:	f001 fd67 	bl	8002594 <HAL_TIM_ConfigClockSource>
 8000ac6:	b108      	cbz	r0, 8000acc <main+0x478>
 8000ac8:	b672      	cpsid	i
	while (1) {
 8000aca:	e7fe      	b.n	8000aca <main+0x476>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8000acc:	4640      	mov	r0, r8
 8000ace:	f001 fbe5 	bl	800229c <HAL_TIM_OC_Init>
 8000ad2:	b108      	cbz	r0, 8000ad8 <main+0x484>
 8000ad4:	b672      	cpsid	i
	while (1) {
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x482>
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ad8:	4640      	mov	r0, r8
 8000ada:	a912      	add	r1, sp, #72	; 0x48
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000adc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000ae0:	f001 fe08 	bl	80026f4 <HAL_TIM_SlaveConfigSynchro>
 8000ae4:	b108      	cbz	r0, 8000aea <main+0x496>
 8000ae6:	b672      	cpsid	i
	while (1) {
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x494>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000aea:	4839      	ldr	r0, [pc, #228]	; (8000bd0 <main+0x57c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aec:	2400      	movs	r4, #0
 8000aee:	2500      	movs	r5, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000af0:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	e9cd 4508 	strd	r4, r5, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000af6:	f001 fe89 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4602      	mov	r2, r0
 8000afc:	b108      	cbz	r0, 8000b02 <main+0x4ae>
 8000afe:	b672      	cpsid	i
	while (1) {
 8000b00:	e7fe      	b.n	8000b00 <main+0x4ac>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b02:	2630      	movs	r6, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	4832      	ldr	r0, [pc, #200]	; (8000bd0 <main+0x57c>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b06:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b08:	a91a      	add	r1, sp, #104	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000b0a:	2700      	movs	r7, #0
 8000b0c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b12:	f001 fc51 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000b16:	4606      	mov	r6, r0
 8000b18:	b108      	cbz	r0, 8000b1e <main+0x4ca>
 8000b1a:	b672      	cpsid	i
	while (1) {
 8000b1c:	e7fe      	b.n	8000b1c <main+0x4c8>
  htim8.Instance = TIM8;
 8000b1e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8000bd8 <main+0x584>
  HAL_TIM_MspPostInit(&htim5);
 8000b22:	482b      	ldr	r0, [pc, #172]	; (8000bd0 <main+0x57c>)
 8000b24:	f000 fad8 	bl	80010d8 <HAL_TIM_MspPostInit>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b28:	2220      	movs	r2, #32
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	a81a      	add	r0, sp, #104	; 0x68
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8000b32:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b36:	e9cd 660c 	strd	r6, r6, [sp, #48]	; 0x30
 8000b3a:	e9cd 660e 	strd	r6, r6, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	e9cd 6606 	strd	r6, r6, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	e9cd 6612 	strd	r6, r6, [sp, #72]	; 0x48
 8000b46:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
 8000b4a:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b4e:	9610      	str	r6, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b50:	9618      	str	r6, [sp, #96]	; 0x60
  htim8.Init.Period = 65535;
 8000b52:	f64f 79ff 	movw	r9, #65535	; 0xffff
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	f002 f839 	bl	8002bcc <memset>
  htim8.Instance = TIM8;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <main+0x580>)
  htim8.Init.Prescaler = 0;
 8000b5c:	f8c8 6004 	str.w	r6, [r8, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b60:	4640      	mov	r0, r8
  htim8.Init.RepetitionCounter = 0;
 8000b62:	e9c8 6604 	strd	r6, r6, [r8, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	f8c8 6008 	str.w	r6, [r8, #8]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	f8c8 6018 	str.w	r6, [r8, #24]
  htim8.Instance = TIM8;
 8000b6e:	f8c8 3000 	str.w	r3, [r8]
  htim8.Init.Period = 65535;
 8000b72:	f8c8 900c 	str.w	r9, [r8, #12]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000b76:	f001 fb01 	bl	800217c <HAL_TIM_Base_Init>
 8000b7a:	b108      	cbz	r0, 8000b80 <main+0x52c>
 8000b7c:	b672      	cpsid	i
	while (1) {
 8000b7e:	e7fe      	b.n	8000b7e <main+0x52a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b84:	a908      	add	r1, sp, #32
 8000b86:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b88:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f001 fd03 	bl	8002594 <HAL_TIM_ConfigClockSource>
 8000b8e:	b108      	cbz	r0, 8000b94 <main+0x540>
 8000b90:	b672      	cpsid	i
	while (1) {
 8000b92:	e7fe      	b.n	8000b92 <main+0x53e>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000b94:	4640      	mov	r0, r8
 8000b96:	f001 fb81 	bl	800229c <HAL_TIM_OC_Init>
 8000b9a:	b108      	cbz	r0, 8000ba0 <main+0x54c>
 8000b9c:	b672      	cpsid	i
	while (1) {
 8000b9e:	e7fe      	b.n	8000b9e <main+0x54a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ba0:	2206      	movs	r2, #6
 8000ba2:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000ba4:	a90c      	add	r1, sp, #48	; 0x30
 8000ba6:	4640      	mov	r0, r8
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ba8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000bac:	f001 fda2 	bl	80026f4 <HAL_TIM_SlaveConfigSynchro>
 8000bb0:	b1a0      	cbz	r0, 8000bdc <main+0x588>
 8000bb2:	b672      	cpsid	i
	while (1) {
 8000bb4:	e7fe      	b.n	8000bb4 <main+0x560>
 8000bb6:	bf00      	nop
 8000bb8:	20004b3c 	.word	0x20004b3c
 8000bbc:	40000400 	.word	0x40000400
 8000bc0:	200004ec 	.word	0x200004ec
 8000bc4:	200009cc 	.word	0x200009cc
 8000bc8:	40000800 	.word	0x40000800
 8000bcc:	40000c00 	.word	0x40000c00
 8000bd0:	20000984 	.word	0x20000984
 8000bd4:	40010400 	.word	0x40010400
 8000bd8:	200004a4 	.word	0x200004a4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000bdc:	a906      	add	r1, sp, #24
 8000bde:	4640      	mov	r0, r8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be0:	e9cd 4506 	strd	r4, r5, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000be4:	f001 fe12 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b108      	cbz	r0, 8000bf0 <main+0x59c>
 8000bec:	b672      	cpsid	i
	while (1) {
 8000bee:	e7fe      	b.n	8000bee <main+0x59a>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000bf0:	2630      	movs	r6, #48	; 0x30
 8000bf2:	2700      	movs	r7, #0
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bf4:	a912      	add	r1, sp, #72	; 0x48
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4640      	mov	r0, r8
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000bfa:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8000bfe:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8000c02:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c06:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c08:	f001 fbd6 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000c0c:	b108      	cbz	r0, 8000c12 <main+0x5be>
 8000c0e:	b672      	cpsid	i
	while (1) {
 8000c10:	e7fe      	b.n	8000c10 <main+0x5bc>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c18:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1a:	a91a      	add	r1, sp, #104	; 0x68
 8000c1c:	4640      	mov	r0, r8
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c1e:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8000c22:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 8000c26:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c2a:	f001 fe31 	bl	8002890 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	b108      	cbz	r0, 8000c36 <main+0x5e2>
 8000c32:	b672      	cpsid	i
	while (1) {
 8000c34:	e7fe      	b.n	8000c34 <main+0x5e0>
  HAL_TIM_MspPostInit(&htim8);
 8000c36:	4640      	mov	r0, r8
 8000c38:	f000 fa4e 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim10.Instance = TIM10;
 8000c3c:	4889      	ldr	r0, [pc, #548]	; (8000e64 <main+0x810>)
 8000c3e:	4b8a      	ldr	r3, [pc, #552]	; (8000e68 <main+0x814>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c40:	9420      	str	r4, [sp, #128]	; 0x80
 8000c42:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000c46:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000c4a:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c52:	e9c0 9403 	strd	r9, r4, [r0, #12]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c56:	6184      	str	r4, [r0, #24]
  htim10.Instance = TIM10;
 8000c58:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c5a:	f001 fa8f 	bl	800217c <HAL_TIM_Base_Init>
 8000c5e:	b108      	cbz	r0, 8000c64 <main+0x610>
 8000c60:	b672      	cpsid	i
	while (1) {
 8000c62:	e7fe      	b.n	8000c62 <main+0x60e>
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8000c64:	487f      	ldr	r0, [pc, #508]	; (8000e64 <main+0x810>)
 8000c66:	f001 fb19 	bl	800229c <HAL_TIM_OC_Init>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	b108      	cbz	r0, 8000c72 <main+0x61e>
 8000c6e:	b672      	cpsid	i
	while (1) {
 8000c70:	e7fe      	b.n	8000c70 <main+0x61c>
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	487c      	ldr	r0, [pc, #496]	; (8000e64 <main+0x810>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c74:	921c      	str	r2, [sp, #112]	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c76:	2630      	movs	r6, #48	; 0x30
 8000c78:	2700      	movs	r7, #0
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c7a:	a91a      	add	r1, sp, #104	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000c7c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c80:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c82:	f001 fb99 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000c86:	4604      	mov	r4, r0
 8000c88:	b108      	cbz	r0, 8000c8e <main+0x63a>
 8000c8a:	b672      	cpsid	i
	while (1) {
 8000c8c:	e7fe      	b.n	8000c8c <main+0x638>
  htim11.Instance = TIM11;
 8000c8e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8000ea0 <main+0x84c>
  HAL_TIM_MspPostInit(&htim10);
 8000c92:	4874      	ldr	r0, [pc, #464]	; (8000e64 <main+0x810>)
 8000c94:	f000 fa20 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim11.Init.Period = 65535;
 8000c98:	f64f 75ff 	movw	r5, #65535	; 0xffff
  htim11.Instance = TIM11;
 8000c9c:	4b73      	ldr	r3, [pc, #460]	; (8000e6c <main+0x818>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9e:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000ca0:	4648      	mov	r0, r9
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca2:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000ca6:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000caa:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	e9c9 4401 	strd	r4, r4, [r9, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	f8c9 4010 	str.w	r4, [r9, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	f8c9 4018 	str.w	r4, [r9, #24]
  htim11.Instance = TIM11;
 8000cba:	f8c9 3000 	str.w	r3, [r9]
  htim11.Init.Period = 65535;
 8000cbe:	f8c9 500c 	str.w	r5, [r9, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000cc2:	f001 fa5b 	bl	800217c <HAL_TIM_Base_Init>
 8000cc6:	b108      	cbz	r0, 8000ccc <main+0x678>
 8000cc8:	b672      	cpsid	i
	while (1) {
 8000cca:	e7fe      	b.n	8000cca <main+0x676>
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8000ccc:	4648      	mov	r0, r9
 8000cce:	f001 fae5 	bl	800229c <HAL_TIM_OC_Init>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	b108      	cbz	r0, 8000cda <main+0x686>
 8000cd6:	b672      	cpsid	i
	while (1) {
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x684>
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cda:	a91a      	add	r1, sp, #104	; 0x68
 8000cdc:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000cde:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce2:	921c      	str	r2, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce4:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ce6:	f001 fb67 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000cea:	4604      	mov	r4, r0
 8000cec:	b108      	cbz	r0, 8000cf2 <main+0x69e>
 8000cee:	b672      	cpsid	i
	while (1) {
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x69c>
  htim13.Instance = TIM13;
 8000cf2:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000ea4 <main+0x850>
  HAL_TIM_MspPostInit(&htim11);
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	f000 f9ee 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim13.Instance = TIM13;
 8000cfc:	4b5c      	ldr	r3, [pc, #368]	; (8000e70 <main+0x81c>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d00:	4640      	mov	r0, r8
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d02:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000d06:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000d0a:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	e9c8 4401 	strd	r4, r4, [r8, #4]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	e9c8 5403 	strd	r5, r4, [r8, #12]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	f8c8 4018 	str.w	r4, [r8, #24]
  htim13.Instance = TIM13;
 8000d1a:	f8c8 3000 	str.w	r3, [r8]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000d1e:	f001 fa2d 	bl	800217c <HAL_TIM_Base_Init>
 8000d22:	b108      	cbz	r0, 8000d28 <main+0x6d4>
 8000d24:	b672      	cpsid	i
	while (1) {
 8000d26:	e7fe      	b.n	8000d26 <main+0x6d2>
  if (HAL_TIM_OC_Init(&htim13) != HAL_OK)
 8000d28:	4640      	mov	r0, r8
 8000d2a:	f001 fab7 	bl	800229c <HAL_TIM_OC_Init>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	b108      	cbz	r0, 8000d36 <main+0x6e2>
 8000d32:	b672      	cpsid	i
	while (1) {
 8000d34:	e7fe      	b.n	8000d34 <main+0x6e0>
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	a91a      	add	r1, sp, #104	; 0x68
 8000d38:	4640      	mov	r0, r8
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d3a:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3e:	921c      	str	r2, [sp, #112]	; 0x70
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d42:	f001 fb39 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000d46:	4604      	mov	r4, r0
 8000d48:	b108      	cbz	r0, 8000d4e <main+0x6fa>
 8000d4a:	b672      	cpsid	i
	while (1) {
 8000d4c:	e7fe      	b.n	8000d4c <main+0x6f8>
  htim14.Instance = TIM14;
 8000d4e:	4e49      	ldr	r6, [pc, #292]	; (8000e74 <main+0x820>)
  HAL_TIM_MspPostInit(&htim13);
 8000d50:	4640      	mov	r0, r8
 8000d52:	f000 f9c1 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim14.Instance = TIM14;
 8000d56:	4b48      	ldr	r3, [pc, #288]	; (8000e78 <main+0x824>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d58:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d5a:	4630      	mov	r0, r6
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5c:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 8000d60:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 8000d64:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	e9c6 4401 	strd	r4, r4, [r6, #4]
  htim14.Init.Period = 65535;
 8000d6c:	60f5      	str	r5, [r6, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6e:	6134      	str	r4, [r6, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d70:	61b4      	str	r4, [r6, #24]
  htim14.Instance = TIM14;
 8000d72:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d74:	f001 fa02 	bl	800217c <HAL_TIM_Base_Init>
 8000d78:	b108      	cbz	r0, 8000d7e <main+0x72a>
 8000d7a:	b672      	cpsid	i
	while (1) {
 8000d7c:	e7fe      	b.n	8000d7c <main+0x728>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f001 fa8c 	bl	800229c <HAL_TIM_OC_Init>
 8000d84:	b108      	cbz	r0, 8000d8a <main+0x736>
 8000d86:	b672      	cpsid	i
	while (1) {
 8000d88:	e7fe      	b.n	8000d88 <main+0x734>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d8c:	2500      	movs	r5, #0
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	4839      	ldr	r0, [pc, #228]	; (8000e74 <main+0x820>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	921c      	str	r2, [sp, #112]	; 0x70
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d92:	2430      	movs	r4, #48	; 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d94:	a91a      	add	r1, sp, #104	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000d96:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9a:	921e      	str	r2, [sp, #120]	; 0x78
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9c:	f001 fb0c 	bl	80023b8 <HAL_TIM_OC_ConfigChannel>
 8000da0:	4605      	mov	r5, r0
 8000da2:	b108      	cbz	r0, 8000da8 <main+0x754>
 8000da4:	b672      	cpsid	i
	while (1) {
 8000da6:	e7fe      	b.n	8000da6 <main+0x752>
  htim6.Instance = TIM6;
 8000da8:	4c34      	ldr	r4, [pc, #208]	; (8000e7c <main+0x828>)
  HAL_TIM_MspPostInit(&htim14);
 8000daa:	4832      	ldr	r0, [pc, #200]	; (8000e74 <main+0x820>)
 8000dac:	f000 f994 	bl	80010d8 <HAL_TIM_MspPostInit>
  htim6.Instance = TIM6;
 8000db0:	4a33      	ldr	r2, [pc, #204]	; (8000e80 <main+0x82c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	951a      	str	r5, [sp, #104]	; 0x68
  htim6.Init.Period = (TIM_CLOCK_FREQ/TIM_TICK_FREQ) - 1;
 8000db4:	234f      	movs	r3, #79	; 0x4f
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000db6:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	951b      	str	r5, [sp, #108]	; 0x6c
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbe:	61a5      	str	r5, [r4, #24]
  htim6.Instance = TIM6;
 8000dc0:	6022      	str	r2, [r4, #0]
  htim6.Init.Period = (TIM_CLOCK_FREQ/TIM_TICK_FREQ) - 1;
 8000dc2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000dc4:	f001 f9da 	bl	800217c <HAL_TIM_Base_Init>
 8000dc8:	b108      	cbz	r0, 8000dce <main+0x77a>
 8000dca:	b672      	cpsid	i
	while (1) {
 8000dcc:	e7fe      	b.n	8000dcc <main+0x778>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dd2:	a91a      	add	r1, sp, #104	; 0x68
 8000dd4:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd6:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000dda:	f001 fd17 	bl	800280c <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	b108      	cbz	r0, 8000de4 <main+0x790>
 8000de0:	b672      	cpsid	i
	while (1) {
 8000de2:	e7fe      	b.n	8000de2 <main+0x78e>
  hcrc.Instance = CRC;
 8000de4:	4827      	ldr	r0, [pc, #156]	; (8000e84 <main+0x830>)
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <main+0x834>)
 8000de8:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000dea:	f000 fd89 	bl	8001900 <HAL_CRC_Init>
 8000dee:	4605      	mov	r5, r0
 8000df0:	b108      	cbz	r0, 8000df6 <main+0x7a2>
 8000df2:	b672      	cpsid	i
	while (1) {
 8000df4:	e7fe      	b.n	8000df4 <main+0x7a0>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df6:	4602      	mov	r2, r0
 8000df8:	4601      	mov	r1, r0
 8000dfa:	2026      	movs	r0, #38	; 0x26
 8000dfc:	f000 fd20 	bl	8001840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e00:	2026      	movs	r0, #38	; 0x26
 8000e02:	f000 fd55 	bl	80018b0 <HAL_NVIC_EnableIRQ>
	uart_interrupt_toggle(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 fb1e 	bl	8001448 <uart_interrupt_toggle>
	htim6.Instance->CR1 |= TIM_CR1_CEN;
 8000e0c:	6823      	ldr	r3, [r4, #0]
 8000e0e:	4e1f      	ldr	r6, [pc, #124]	; (8000e8c <main+0x838>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4c1f      	ldr	r4, [pc, #124]	; (8000e90 <main+0x83c>)
 8000e14:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000ea8 <main+0x854>
			uart_printf("Hi there, received UART string\r\n");
 8000e18:	4f1e      	ldr	r7, [pc, #120]	; (8000e94 <main+0x840>)
	htim6.Instance->CR1 |= TIM_CR1_CEN;
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
	htim6.Instance->DIER |= TIM_DIER_UIE;
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	f042 0201 	orr.w	r2, r2, #1
 8000e26:	60da      	str	r2, [r3, #12]
		if (uart_receive_end) {
 8000e28:	6833      	ldr	r3, [r6, #0]
 8000e2a:	b12b      	cbz	r3, 8000e38 <main+0x7e4>
			uart_printf("Hi there, received UART string\r\n");
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	f000 fb19 	bl	8001464 <uart_printf>
			uart_receive_end = 0;
 8000e32:	6035      	str	r5, [r6, #0]
			uartrecbufftop = 0;
 8000e34:	f8ca 5000 	str.w	r5, [sl]
		switch (fsm_state) {
 8000e38:	7823      	ldrb	r3, [r4, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d1f4      	bne.n	8000e28 <main+0x7d4>
			ret = receive_program();
 8000e3e:	f000 fc07 	bl	8001650 <receive_program>
 8000e42:	4603      	mov	r3, r0
			if (ret < 0) {
 8000e44:	2b00      	cmp	r3, #0
			uart_printf("Programm successfully received!\r\n");
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <main+0x844>)
			ret = receive_program();
 8000e48:	f8c8 3000 	str.w	r3, [r8]
			if (ret < 0) {
 8000e4c:	da04      	bge.n	8000e58 <main+0x804>
				uart_printf("Error receiving programm\r\n");
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <main+0x848>)
 8000e50:	f000 fb08 	bl	8001464 <uart_printf>
				fsm_state = IDLE;
 8000e54:	7025      	strb	r5, [r4, #0]
				break;
 8000e56:	e7e7      	b.n	8000e28 <main+0x7d4>
			uart_printf("Programm successfully received!\r\n");
 8000e58:	f000 fb04 	bl	8001464 <uart_printf>
			fsm_state = WAITING_FOR_START;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	7023      	strb	r3, [r4, #0]
			break;
 8000e60:	e7e2      	b.n	8000e28 <main+0x7d4>
 8000e62:	bf00      	nop
 8000e64:	20000934 	.word	0x20000934
 8000e68:	40014400 	.word	0x40014400
 8000e6c:	40014800 	.word	0x40014800
 8000e70:	40001c00 	.word	0x40001c00
 8000e74:	20004bc8 	.word	0x20004bc8
 8000e78:	40002000 	.word	0x40002000
 8000e7c:	20004aac 	.word	0x20004aac
 8000e80:	40001000 	.word	0x40001000
 8000e84:	2000097c 	.word	0x2000097c
 8000e88:	40023000 	.word	0x40023000
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	2000008c 	.word	0x2000008c
 8000e94:	08003484 	.word	0x08003484
 8000e98:	080034c4 	.word	0x080034c4
 8000e9c:	080034a8 	.word	0x080034a8
 8000ea0:	20000a5c 	.word	0x20000a5c
 8000ea4:	20000a14 	.word	0x20000a14
 8000ea8:	20004c10 	.word	0x20004c10

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_MspInit+0x38>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	9100      	str	r1, [sp, #0]
 8000eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44
 8000ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ebe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	9101      	str	r1, [sp, #4]
 8000ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ece:	641a      	str	r2, [r3, #64]	; 0x40
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eda:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000edc:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ede:	f000 bc9b 	b.w	8001818 <HAL_NVIC_SetPriorityGrouping>
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_CRC_MspInit+0x30>)
 8000eea:	6802      	ldr	r2, [r0, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d000      	beq.n	8000ef2 <HAL_CRC_MspInit+0xa>
 8000ef0:	4770      	bx	lr
{
 8000ef2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	9201      	str	r2, [sp, #4]
 8000ef8:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8000efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f00:	f8c3 2830 	str.w	r2, [r3, #2096]	; 0x830
 8000f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f12:	b002      	add	sp, #8
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40023000 	.word	0x40023000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 8000f1e:	4a63      	ldr	r2, [pc, #396]	; (80010ac <HAL_TIM_Base_MspInit+0x190>)
 8000f20:	6803      	ldr	r3, [r0, #0]
 8000f22:	4293      	cmp	r3, r2
{
 8000f24:	b08d      	sub	sp, #52	; 0x34
  if(htim_base->Instance==TIM1)
 8000f26:	d03d      	beq.n	8000fa4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d02a      	beq.n	8000f84 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000f2e:	4a60      	ldr	r2, [pc, #384]	; (80010b0 <HAL_TIM_Base_MspInit+0x194>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d053      	beq.n	8000fdc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8000f34:	4a5f      	ldr	r2, [pc, #380]	; (80010b4 <HAL_TIM_Base_MspInit+0x198>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d05f      	beq.n	8000ffa <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8000f3a:	4a5f      	ldr	r2, [pc, #380]	; (80010b8 <HAL_TIM_Base_MspInit+0x19c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d040      	beq.n	8000fc2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8000f40:	4a5e      	ldr	r2, [pc, #376]	; (80010bc <HAL_TIM_Base_MspInit+0x1a0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	f000 8082 	beq.w	800104c <HAL_TIM_Base_MspInit+0x130>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8000f48:	4a5d      	ldr	r2, [pc, #372]	; (80010c0 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d071      	beq.n	8001032 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8000f4e:	4a5d      	ldr	r2, [pc, #372]	; (80010c4 <HAL_TIM_Base_MspInit+0x1a8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	f000 8091 	beq.w	8001078 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8000f56:	4a5c      	ldr	r2, [pc, #368]	; (80010c8 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d05d      	beq.n	8001018 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
  else if(htim_base->Instance==TIM13)
 8000f5c:	4a5b      	ldr	r2, [pc, #364]	; (80010cc <HAL_TIM_Base_MspInit+0x1b0>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f000 8097 	beq.w	8001092 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8000f64:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <HAL_TIM_Base_MspInit+0x1b4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d119      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8000f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f82:	e00c      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f84:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9202      	str	r2, [sp, #8]
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	9b02      	ldr	r3, [sp, #8]
}
 8000f9e:	b00d      	add	sp, #52	; 0x34
 8000fa0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa4:	4b4b      	ldr	r3, [pc, #300]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	9201      	str	r2, [sp, #4]
 8000faa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	645a      	str	r2, [r3, #68]	; 0x44
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	9b01      	ldr	r3, [sp, #4]
}
 8000fbc:	b00d      	add	sp, #52	; 0x34
 8000fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000fc2:	4b44      	ldr	r3, [pc, #272]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	9205      	str	r2, [sp, #20]
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fca:	f042 0208 	orr.w	r2, r2, #8
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0308 	and.w	r3, r3, #8
 8000fd6:	9305      	str	r3, [sp, #20]
 8000fd8:	9b05      	ldr	r3, [sp, #20]
 8000fda:	e7e0      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fdc:	4b3d      	ldr	r3, [pc, #244]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	9203      	str	r2, [sp, #12]
 8000fe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe4:	f042 0202 	orr.w	r2, r2, #2
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	9303      	str	r3, [sp, #12]
 8000ff2:	9b03      	ldr	r3, [sp, #12]
}
 8000ff4:	b00d      	add	sp, #52	; 0x34
 8000ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	9204      	str	r2, [sp, #16]
 8001000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001002:	f042 0204 	orr.w	r2, r2, #4
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	9304      	str	r3, [sp, #16]
 8001010:	9b04      	ldr	r3, [sp, #16]
}
 8001012:	b00d      	add	sp, #52	; 0x34
 8001014:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 800101a:	2200      	movs	r2, #0
 800101c:	9209      	str	r2, [sp, #36]	; 0x24
 800101e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001020:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102c:	9309      	str	r3, [sp, #36]	; 0x24
 800102e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001030:	e7b5      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8001034:	2200      	movs	r2, #0
 8001036:	9207      	str	r2, [sp, #28]
 8001038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800103a:	f042 0202 	orr.w	r2, r2, #2
 800103e:	645a      	str	r2, [r3, #68]	; 0x44
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	9307      	str	r3, [sp, #28]
 8001048:	9b07      	ldr	r3, [sp, #28]
 800104a:	e7a8      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800104c:	2200      	movs	r2, #0
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8001050:	9206      	str	r2, [sp, #24]
 8001052:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001054:	f041 0110 	orr.w	r1, r1, #16
 8001058:	6419      	str	r1, [r3, #64]	; 0x40
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	9306      	str	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001062:	4611      	mov	r1, r2
 8001064:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001066:	9b06      	ldr	r3, [sp, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001068:	f000 fbea 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800106c:	2036      	movs	r0, #54	; 0x36
}
 800106e:	b00d      	add	sp, #52	; 0x34
 8001070:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001074:	f000 bc1c 	b.w	80018b0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 800107a:	2200      	movs	r2, #0
 800107c:	9208      	str	r2, [sp, #32]
 800107e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001080:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
 8001086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108c:	9308      	str	r3, [sp, #32]
 800108e:	9b08      	ldr	r3, [sp, #32]
 8001090:	e785      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_TIM_Base_MspInit+0x1b8>)
 8001094:	2200      	movs	r2, #0
 8001096:	920a      	str	r2, [sp, #40]	; 0x28
 8001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a6:	930a      	str	r3, [sp, #40]	; 0x28
 80010a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010aa:	e778      	b.n	8000f9e <HAL_TIM_Base_MspInit+0x82>
 80010ac:	40010000 	.word	0x40010000
 80010b0:	40000400 	.word	0x40000400
 80010b4:	40000800 	.word	0x40000800
 80010b8:	40000c00 	.word	0x40000c00
 80010bc:	40001000 	.word	0x40001000
 80010c0:	40010400 	.word	0x40010400
 80010c4:	40014400 	.word	0x40014400
 80010c8:	40014800 	.word	0x40014800
 80010cc:	40001c00 	.word	0x40001c00
 80010d0:	40002000 	.word	0x40002000
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80010da:	6802      	ldr	r2, [r0, #0]
 80010dc:	4972      	ldr	r1, [pc, #456]	; (80012a8 <HAL_TIM_MspPostInit+0x1d0>)
{
 80010de:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80010e2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80010e8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80010ec:	930e      	str	r3, [sp, #56]	; 0x38
  if(htim->Instance==TIM1)
 80010ee:	d03b      	beq.n	8001168 <HAL_TIM_MspPostInit+0x90>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 80010f0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80010f4:	d04a      	beq.n	800118c <HAL_TIM_MspPostInit+0xb4>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80010f6:	496d      	ldr	r1, [pc, #436]	; (80012ac <HAL_TIM_MspPostInit+0x1d4>)
 80010f8:	428a      	cmp	r2, r1
 80010fa:	d05a      	beq.n	80011b2 <HAL_TIM_MspPostInit+0xda>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 80010fc:	496c      	ldr	r1, [pc, #432]	; (80012b0 <HAL_TIM_MspPostInit+0x1d8>)
 80010fe:	428a      	cmp	r2, r1
 8001100:	d017      	beq.n	8001132 <HAL_TIM_MspPostInit+0x5a>

  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }
  else if(htim->Instance==TIM5)
 8001102:	496c      	ldr	r1, [pc, #432]	; (80012b4 <HAL_TIM_MspPostInit+0x1dc>)
 8001104:	428a      	cmp	r2, r1
 8001106:	d065      	beq.n	80011d4 <HAL_TIM_MspPostInit+0xfc>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM8)
 8001108:	496b      	ldr	r1, [pc, #428]	; (80012b8 <HAL_TIM_MspPostInit+0x1e0>)
 800110a:	428a      	cmp	r2, r1
 800110c:	d073      	beq.n	80011f6 <HAL_TIM_MspPostInit+0x11e>

  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }
  else if(htim->Instance==TIM10)
 800110e:	496b      	ldr	r1, [pc, #428]	; (80012bc <HAL_TIM_MspPostInit+0x1e4>)
 8001110:	428a      	cmp	r2, r1
 8001112:	f000 8081 	beq.w	8001218 <HAL_TIM_MspPostInit+0x140>

  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }
  else if(htim->Instance==TIM11)
 8001116:	496a      	ldr	r1, [pc, #424]	; (80012c0 <HAL_TIM_MspPostInit+0x1e8>)
 8001118:	428a      	cmp	r2, r1
 800111a:	f000 80a0 	beq.w	800125e <HAL_TIM_MspPostInit+0x186>

  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }
  else if(htim->Instance==TIM13)
 800111e:	4969      	ldr	r1, [pc, #420]	; (80012c4 <HAL_TIM_MspPostInit+0x1ec>)
 8001120:	428a      	cmp	r2, r1
 8001122:	f000 808b 	beq.w	800123c <HAL_TIM_MspPostInit+0x164>

  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }
  else if(htim->Instance==TIM14)
 8001126:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <HAL_TIM_MspPostInit+0x1f0>)
 8001128:	429a      	cmp	r2, r3
 800112a:	f000 80aa 	beq.w	8001282 <HAL_TIM_MspPostInit+0x1aa>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800112e:	b011      	add	sp, #68	; 0x44
 8001130:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4a66      	ldr	r2, [pc, #408]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 8001134:	9303      	str	r3, [sp, #12]
 8001136:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	4865      	ldr	r0, [pc, #404]	; (80012d0 <HAL_TIM_MspPostInit+0x1f8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	f043 0302 	orr.w	r3, r3, #2
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114a:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800114c:	2440      	movs	r4, #64	; 0x40
 800114e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001150:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001152:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001154:	2200      	movs	r2, #0
 8001156:	2303      	movs	r3, #3
 8001158:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800115c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f000 fbe2 	bl	8001928 <HAL_GPIO_Init>
}
 8001164:	b011      	add	sp, #68	; 0x44
 8001166:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	4859      	ldr	r0, [pc, #356]	; (80012d4 <HAL_TIM_MspPostInit+0x1fc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001182:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001186:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001188:	2301      	movs	r3, #1
 800118a:	e7e2      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118c:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	484e      	ldr	r0, [pc, #312]	; (80012d0 <HAL_TIM_MspPostInit+0x1f8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	f043 0302 	orr.w	r3, r3, #2
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80011ac:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e7cf      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4a46      	ldr	r2, [pc, #280]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	4845      	ldr	r0, [pc, #276]	; (80012d0 <HAL_TIM_MspPostInit+0x1f8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	6313      	str	r3, [r2, #48]	; 0x30
 80011c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	9a02      	ldr	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011cc:	2420      	movs	r4, #32
 80011ce:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011d0:	2302      	movs	r3, #2
 80011d2:	e7be      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 80011d6:	9304      	str	r3, [sp, #16]
 80011d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	483e      	ldr	r0, [pc, #248]	; (80012d4 <HAL_TIM_MspPostInit+0x1fc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	9304      	str	r3, [sp, #16]
 80011ea:	9a04      	ldr	r2, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ee:	2401      	movs	r4, #1
 80011f0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011f2:	2302      	movs	r3, #2
 80011f4:	e7ad      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4a35      	ldr	r2, [pc, #212]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 80011f8:	9305      	str	r3, [sp, #20]
 80011fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fc:	4836      	ldr	r0, [pc, #216]	; (80012d8 <HAL_TIM_MspPostInit+0x200>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	9305      	str	r3, [sp, #20]
 800120c:	9a05      	ldr	r2, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120e:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001210:	2480      	movs	r4, #128	; 0x80
 8001212:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001214:	2303      	movs	r3, #3
 8001216:	e79c      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4a2c      	ldr	r2, [pc, #176]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 800121a:	9306      	str	r3, [sp, #24]
 800121c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	482c      	ldr	r0, [pc, #176]	; (80012d0 <HAL_TIM_MspPostInit+0x1f8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	9306      	str	r3, [sp, #24]
 800122e:	9a06      	ldr	r2, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001232:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001236:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001238:	2303      	movs	r3, #3
 800123a:	e78a      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4a23      	ldr	r2, [pc, #140]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 800123e:	9308      	str	r3, [sp, #32]
 8001240:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	4824      	ldr	r0, [pc, #144]	; (80012d4 <HAL_TIM_MspPostInit+0x1fc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	9308      	str	r3, [sp, #32]
 8001252:	9a08      	ldr	r2, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001256:	2440      	movs	r4, #64	; 0x40
 8001258:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800125a:	2309      	movs	r3, #9
 800125c:	e779      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_TIM_MspPostInit+0x1f4>)
 8001260:	9307      	str	r3, [sp, #28]
 8001262:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	481a      	ldr	r0, [pc, #104]	; (80012d0 <HAL_TIM_MspPostInit+0x1f8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	f043 0302 	orr.w	r3, r3, #2
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	9307      	str	r3, [sp, #28]
 8001274:	9a07      	ldr	r2, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001276:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001278:	f44f 7400 	mov.w	r4, #512	; 0x200
 800127c:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800127e:	2303      	movs	r3, #3
 8001280:	e767      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	f503 3306 	add.w	r3, r3, #137216	; 0x21800
 8001286:	2200      	movs	r2, #0
 8001288:	9209      	str	r2, [sp, #36]	; 0x24
 800128a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	4811      	ldr	r0, [pc, #68]	; (80012d4 <HAL_TIM_MspPostInit+0x1fc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	9309      	str	r3, [sp, #36]	; 0x24
 800129c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012a0:	2480      	movs	r4, #128	; 0x80
 80012a2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80012a4:	2309      	movs	r3, #9
 80012a6:	e754      	b.n	8001152 <HAL_TIM_MspPostInit+0x7a>
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40000800 	.word	0x40000800
 80012b4:	40000c00 	.word	0x40000c00
 80012b8:	40010400 	.word	0x40010400
 80012bc:	40014400 	.word	0x40014400
 80012c0:	40014800 	.word	0x40014800
 80012c4:	40001c00 	.word	0x40001c00
 80012c8:	40002000 	.word	0x40002000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020800 	.word	0x40020800

080012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012dc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80012de:	6801      	ldr	r1, [r0, #0]
 80012e0:	4a18      	ldr	r2, [pc, #96]	; (8001344 <HAL_UART_MspInit+0x68>)
{
 80012e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e4:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80012e6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80012ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80012f0:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80012f2:	d001      	beq.n	80012f8 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012f4:	b009      	add	sp, #36	; 0x24
 80012f6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f8:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	6c11      	ldr	r1, [r2, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	4811      	ldr	r0, [pc, #68]	; (8001348 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001302:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001306:	6411      	str	r1, [r2, #64]	; 0x40
 8001308:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800130a:	f401 3100 	and.w	r1, r1, #131072	; 0x20000
 800130e:	9100      	str	r1, [sp, #0]
 8001310:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001324:	2307      	movs	r3, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001328:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|USART_TX_Pin|USART_RX_Pin;
 800132a:	2200      	movs	r2, #0
 800132c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_1|USART_TX_Pin|USART_RX_Pin;
 8001330:	240e      	movs	r4, #14
 8001332:	2502      	movs	r5, #2
 8001334:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001338:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f000 faf4 	bl	8001928 <HAL_GPIO_Init>
}
 8001340:	b009      	add	sp, #36	; 0x24
 8001342:	bd30      	pop	{r4, r5, pc}
 8001344:	40004400 	.word	0x40004400
 8001348:	40020000 	.word	0x40020000

0800134c <NMI_Handler>:
void NMI_Handler(void) {
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800134c:	e7fe      	b.n	800134c <NMI_Handler>
 800134e:	bf00      	nop

08001350 <HardFault_Handler>:
 */
void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8001350:	e7fe      	b.n	8001350 <HardFault_Handler>
 8001352:	bf00      	nop

08001354 <MemManage_Handler>:
 */
void MemManage_Handler(void) {
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler>
 8001356:	bf00      	nop

08001358 <BusFault_Handler>:
 */
void BusFault_Handler(void) {
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001358:	e7fe      	b.n	8001358 <BusFault_Handler>
 800135a:	bf00      	nop

0800135c <UsageFault_Handler>:
 */
void UsageFault_Handler(void) {
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler>
 800135e:	bf00      	nop

08001360 <SVC_Handler>:

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <DebugMon_Handler>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <PendSV_Handler>:
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop

0800136c <SysTick_Handler>:
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <USART2_IRQHandler>:
 */
void USART2_IRQHandler(void) {
	/* USER CODE BEGIN USART2_IRQn 0 */
	//implements a simple circular buffer
	// if there is a data in receive register
	if ( USART2->SR & USART_SR_RXNE) {
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <USART2_IRQHandler+0x40>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	0692      	lsls	r2, r2, #26
 8001376:	d511      	bpl.n	800139c <USART2_IRQHandler+0x2c>
		// save the data to the buffer
		uartrecbuffer[uartrecbufftop] = (USART2->DR & USART_DR_DR);
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	490e      	ldr	r1, [pc, #56]	; (80013b4 <USART2_IRQHandler+0x44>)
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <USART2_IRQHandler+0x48>)
 800137e:	680a      	ldr	r2, [r1, #0]
 8001380:	b2db      	uxtb	r3, r3
		// if end symbol is detected, raise receive end flag
		switch (uartrecbuffer[uartrecbufftop]) {
 8001382:	2b0d      	cmp	r3, #13
		uartrecbuffer[uartrecbufftop] = (USART2->DR & USART_DR_DR);
 8001384:	5483      	strb	r3, [r0, r2]
		switch (uartrecbuffer[uartrecbufftop]) {
 8001386:	d00e      	beq.n	80013a6 <USART2_IRQHandler+0x36>
 8001388:	2b11      	cmp	r3, #17
 800138a:	d008      	beq.n	800139e <USART2_IRQHandler+0x2e>
		}

		if (uartrecbuffer[uartrecbufftop] == END_RECEIVE_CHAR) {
			uart_receive_end = 1;
		}
		uartrecbufftop++;
 800138c:	3201      	adds	r2, #1
		if (uartrecbufftop == UART_RECEIVE_BUF_SIZE) {
 800138e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001392:	d001      	beq.n	8001398 <USART2_IRQHandler+0x28>
		uartrecbufftop++;
 8001394:	600a      	str	r2, [r1, #0]
 8001396:	4770      	bx	lr
			uartrecbufftop = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	600b      	str	r3, [r1, #0]
	}
	/* USER CODE END USART2_IRQn 0 */
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800139c:	4770      	bx	lr
			fsm_state = PROGRAM_RECEIVING;
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <USART2_IRQHandler+0x4c>)
 80013a0:	2001      	movs	r0, #1
 80013a2:	7018      	strb	r0, [r3, #0]
			break;
 80013a4:	e7f2      	b.n	800138c <USART2_IRQHandler+0x1c>
			uart_receive_end = 1;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <USART2_IRQHandler+0x50>)
 80013a8:	2001      	movs	r0, #1
 80013aa:	6018      	str	r0, [r3, #0]
			uart_receive_end = 1;
 80013ac:	e7ee      	b.n	800138c <USART2_IRQHandler+0x1c>
 80013ae:	bf00      	nop
 80013b0:	40004400 	.word	0x40004400
 80013b4:	20000aa4 	.word	0x20000aa4
 80013b8:	20000534 	.word	0x20000534
 80013bc:	2000008c 	.word	0x2000008c
 80013c0:	20000090 	.word	0x20000090

080013c4 <TIM6_DAC_IRQHandler>:
 * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	//reset bit
	TICK_TIMER->SR &= ~TIM_SR_UIF;
 80013c4:	4807      	ldr	r0, [pc, #28]	; (80013e4 <TIM6_DAC_IRQHandler+0x20>)
	current_us++;
 80013c6:	4908      	ldr	r1, [pc, #32]	; (80013e8 <TIM6_DAC_IRQHandler+0x24>)
	TICK_TIMER->SR &= ~TIM_SR_UIF;
 80013c8:	6903      	ldr	r3, [r0, #16]
	TEST_GPIO_GPIO_Port->ODR ^= TEST_GPIO_Pin;
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <TIM6_DAC_IRQHandler+0x28>)
	TICK_TIMER->SR &= ~TIM_SR_UIF;
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6103      	str	r3, [r0, #16]
	current_us++;
 80013d2:	680b      	ldr	r3, [r1, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	600b      	str	r3, [r1, #0]
	TEST_GPIO_GPIO_Port->ODR ^= TEST_GPIO_Pin;
 80013d8:	6953      	ldr	r3, [r2, #20]
 80013da:	f083 0310 	eor.w	r3, r3, #16
 80013de:	6153      	str	r3, [r2, #20]
	}
	/* USER CODE END TIM6_DAC_IRQn 0 */
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40001000 	.word	0x40001000
 80013e8:	20004aa8 	.word	0x20004aa8
 80013ec:	40020000 	.word	0x40020000

080013f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f2:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80013f4:	680b      	ldr	r3, [r1, #0]
{
 80013f6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f8:	4c0c      	ldr	r4, [pc, #48]	; (800142c <_sbrk+0x3c>)
 80013fa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80013fc:	b12b      	cbz	r3, 800140a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4418      	add	r0, r3
 8001400:	4290      	cmp	r0, r2
 8001402:	d807      	bhi.n	8001414 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001404:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001406:	4618      	mov	r0, r3
 8001408:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <_sbrk+0x40>)
 800140c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4418      	add	r0, r3
 8001410:	4290      	cmp	r0, r2
 8001412:	d9f7      	bls.n	8001404 <_sbrk+0x14>
    errno = ENOMEM;
 8001414:	f001 fbb0 	bl	8002b78 <__errno>
 8001418:	230c      	movs	r3, #12
 800141a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd10      	pop	{r4, pc}
 8001424:	20000094 	.word	0x20000094
 8001428:	20020000 	.word	0x20020000
 800142c:	00000400 	.word	0x00000400
 8001430:	20004c30 	.word	0x20004c30

08001434 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <SystemInit+0x10>)
 8001436:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800143a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800143e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <uart_interrupt_toggle>:
/**
 * @brief enables/disables UART interrupts
 */
void uart_interrupt_toggle(int flag) {
	if (flag) {
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <uart_interrupt_toggle+0x18>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68d3      	ldr	r3, [r2, #12]
	if (flag) {
 800144e:	b918      	cbnz	r0, 8001458 <uart_interrupt_toggle+0x10>
		return;
	}
	huart2.Instance->CR1 &= ~USART_CR1_RXNEIE;
 8001450:	f023 0320 	bic.w	r3, r3, #32
 8001454:	60d3      	str	r3, [r2, #12]
}
 8001456:	4770      	bx	lr
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	60d3      	str	r3, [r2, #12]
		return;
 800145e:	4770      	bx	lr
 8001460:	20004b84 	.word	0x20004b84

08001464 <uart_printf>:

/**
 * @brief printf by uart
 * @retval None
 */
void uart_printf(const char *format, ...) {
 8001464:	b40f      	push	{r0, r1, r2, r3}
 8001466:	b510      	push	{r4, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	ab04      	add	r3, sp, #16
	va_list args;
	va_start(args, format);
	nchars = vsnprintf(uartsendbuffer, UART_SEND_BUF_SIZE - 1, format, args);
 800146c:	4c0b      	ldr	r4, [pc, #44]	; (800149c <uart_printf+0x38>)
void uart_printf(const char *format, ...) {
 800146e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, format);
 8001472:	9301      	str	r3, [sp, #4]
	nchars = vsnprintf(uartsendbuffer, UART_SEND_BUF_SIZE - 1, format, args);
 8001474:	4620      	mov	r0, r4
 8001476:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800147a:	f001 fbdb 	bl	8002c34 <vsniprintf>
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <uart_printf+0x3c>)
 8001480:	4602      	mov	r2, r0
 8001482:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, uartsendbuffer, nchars, HAL_TIMEOUT);
 8001484:	4621      	mov	r1, r4
 8001486:	b292      	uxth	r2, r2
 8001488:	2303      	movs	r3, #3
 800148a:	4806      	ldr	r0, [pc, #24]	; (80014a4 <uart_printf+0x40>)
 800148c:	f001 fac6 	bl	8002a1c <HAL_UART_Transmit>
	va_end(args);
}
 8001490:	b002      	add	sp, #8
 8001492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001496:	b004      	add	sp, #16
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	200000a0 	.word	0x200000a0
 80014a0:	20004c14 	.word	0x20004c14
 80014a4:	20004b84 	.word	0x20004b84

080014a8 <crc32_bytes>:
 * @param  pData Buffer pointer
 * @param  uLen  Buffer Length
 * @retval CRC32 Checksum
 * from https://stackoverflow.com/questions/39646441/how-to-set-stm32-to-generate-standard-crc32
 */
uint32_t crc32_bytes(uint8_t *pData, uint32_t uLen) {
 80014a8:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t uIndex = 0, uData = 0, i;
	uIndex = uLen >> 2;

	/* Reset CRC generator */
	CRC->CR |= CRC_CR_RESET;
 80014aa:	4f67      	ldr	r7, [pc, #412]	; (8001648 <crc32_bytes+0x1a0>)
 80014ac:	68ba      	ldr	r2, [r7, #8]

	while (uIndex--) {
 80014ae:	088e      	lsrs	r6, r1, #2
	CRC->CR |= CRC_CR_RESET;
 80014b0:	f042 0201 	orr.w	r2, r2, #1
uint32_t crc32_bytes(uint8_t *pData, uint32_t uLen) {
 80014b4:	b082      	sub	sp, #8
	CRC->CR |= CRC_CR_RESET;
 80014b6:	60ba      	str	r2, [r7, #8]
	while (uIndex--) {
 80014b8:	f000 80c4 	beq.w	8001644 <crc32_bytes+0x19c>
 80014bc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
#ifdef USED_BIG_ENDIAN
        uData = __REV((uint32_t*)pData);
#else
		((uint8_t*) &uData)[0] = pData[0];
 80014c0:	f850 5b04 	ldr.w	r5, [r0], #4
 80014c4:	9501      	str	r5, [sp, #4]
	return uData ^ 0xFFFFFFFF;
}

uint32_t revbit(uint32_t uData) {
	uint32_t uRevData = 0, uIndex = 0;
	uRevData |= ((uData >> uIndex) & 0x01);
 80014c6:	f005 0401 	and.w	r4, r5, #1
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014ca:	2301      	movs	r3, #1
		uRevData <<= 1;
		uRevData |= ((uData >> uIndex) & 0x01);
 80014cc:	fa25 f203 	lsr.w	r2, r5, r3
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014d0:	3301      	adds	r3, #1
		uRevData |= ((uData >> uIndex) & 0x01);
 80014d2:	f002 0201 	and.w	r2, r2, #1
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014d6:	2b20      	cmp	r3, #32
		uRevData |= ((uData >> uIndex) & 0x01);
 80014d8:	ea42 0444 	orr.w	r4, r2, r4, lsl #1
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014dc:	d1f6      	bne.n	80014cc <crc32_bytes+0x24>
	while (uIndex--) {
 80014de:	4286      	cmp	r6, r0
		CRC->DR = uData;
 80014e0:	603c      	str	r4, [r7, #0]
	while (uIndex--) {
 80014e2:	d1ed      	bne.n	80014c0 <crc32_bytes+0x18>
	uData = revbit(CRC->DR);
 80014e4:	4b58      	ldr	r3, [pc, #352]	; (8001648 <crc32_bytes+0x1a0>)
 80014e6:	681c      	ldr	r4, [r3, #0]
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014e8:	2301      	movs	r3, #1
	uRevData |= ((uData >> uIndex) & 0x01);
 80014ea:	ea04 0003 	and.w	r0, r4, r3
		uRevData |= ((uData >> uIndex) & 0x01);
 80014ee:	fa24 f203 	lsr.w	r2, r4, r3
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014f2:	3301      	adds	r3, #1
		uRevData |= ((uData >> uIndex) & 0x01);
 80014f4:	f002 0201 	and.w	r2, r2, #1
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014f8:	2b20      	cmp	r3, #32
		uRevData |= ((uData >> uIndex) & 0x01);
 80014fa:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
	for (uIndex = 1; uIndex < 32; uIndex++) {
 80014fe:	d1f6      	bne.n	80014ee <crc32_bytes+0x46>
	while (uIndex--) {
 8001500:	f011 0303 	ands.w	r3, r1, #3
 8001504:	f000 809a 	beq.w	800163c <crc32_bytes+0x194>
		uData ^= (uint32_t) *pData++;
 8001508:	7832      	ldrb	r2, [r6, #0]
 800150a:	4050      	eors	r0, r2
			if (uData & 0x1)
 800150c:	07c2      	lsls	r2, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800150e:	bf4a      	itet	mi
 8001510:	4a4e      	ldrmi	r2, [pc, #312]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001512:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001514:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001518:	07c7      	lsls	r7, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800151a:	bf4a      	itet	mi
 800151c:	4a4b      	ldrmi	r2, [pc, #300]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800151e:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001520:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001524:	07c5      	lsls	r5, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001526:	bf4a      	itet	mi
 8001528:	4a48      	ldrmi	r2, [pc, #288]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800152a:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800152c:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001530:	07c4      	lsls	r4, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001532:	bf4a      	itet	mi
 8001534:	4a45      	ldrmi	r2, [pc, #276]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001536:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001538:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 800153c:	07c1      	lsls	r1, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800153e:	bf4a      	itet	mi
 8001540:	4a42      	ldrmi	r2, [pc, #264]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001542:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001544:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001548:	07c2      	lsls	r2, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800154a:	bf4a      	itet	mi
 800154c:	4a3f      	ldrmi	r2, [pc, #252]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800154e:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001550:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001554:	07c7      	lsls	r7, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001556:	bf4a      	itet	mi
 8001558:	4a3c      	ldrmi	r2, [pc, #240]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800155a:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800155c:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001560:	07c5      	lsls	r5, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001562:	bf4a      	itet	mi
 8001564:	4a39      	ldrmi	r2, [pc, #228]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001566:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001568:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
	while (uIndex--) {
 800156c:	2b01      	cmp	r3, #1
 800156e:	d065      	beq.n	800163c <crc32_bytes+0x194>
		uData ^= (uint32_t) *pData++;
 8001570:	7872      	ldrb	r2, [r6, #1]
 8001572:	4050      	eors	r0, r2
			if (uData & 0x1)
 8001574:	07c4      	lsls	r4, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001576:	bf4a      	itet	mi
 8001578:	4a34      	ldrmi	r2, [pc, #208]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800157a:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800157c:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001580:	07c1      	lsls	r1, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001582:	bf4a      	itet	mi
 8001584:	4a31      	ldrmi	r2, [pc, #196]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001586:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001588:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 800158c:	07c2      	lsls	r2, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800158e:	bf4a      	itet	mi
 8001590:	4a2e      	ldrmi	r2, [pc, #184]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001592:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001594:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 8001598:	07c7      	lsls	r7, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800159a:	bf4a      	itet	mi
 800159c:	4a2b      	ldrmi	r2, [pc, #172]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800159e:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015a0:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 80015a4:	07c5      	lsls	r5, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015a6:	bf4a      	itet	mi
 80015a8:	4a28      	ldrmi	r2, [pc, #160]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015aa:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015ac:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 80015b0:	07c4      	lsls	r4, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015b2:	bf4a      	itet	mi
 80015b4:	4a25      	ldrmi	r2, [pc, #148]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015b6:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015b8:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 80015bc:	07c1      	lsls	r1, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015be:	bf4a      	itet	mi
 80015c0:	4a22      	ldrmi	r2, [pc, #136]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015c2:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015c4:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
			if (uData & 0x1)
 80015c8:	07c2      	lsls	r2, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015ca:	bf4a      	itet	mi
 80015cc:	4a1f      	ldrmi	r2, [pc, #124]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015ce:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015d0:	ea82 0050 	eormi.w	r0, r2, r0, lsr #1
	while (uIndex--) {
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d031      	beq.n	800163c <crc32_bytes+0x194>
		uData ^= (uint32_t) *pData++;
 80015d8:	78b3      	ldrb	r3, [r6, #2]
 80015da:	4058      	eors	r0, r3
			if (uData & 0x1)
 80015dc:	07c3      	lsls	r3, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015de:	bf4a      	itet	mi
 80015e0:	4b1a      	ldrmi	r3, [pc, #104]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015e2:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015e4:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 80015e8:	07c7      	lsls	r7, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015ea:	bf4a      	itet	mi
 80015ec:	4b17      	ldrmi	r3, [pc, #92]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015ee:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015f0:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 80015f4:	07c6      	lsls	r6, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015f6:	bf4a      	itet	mi
 80015f8:	4b14      	ldrmi	r3, [pc, #80]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 80015fa:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 80015fc:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 8001600:	07c5      	lsls	r5, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001602:	bf4a      	itet	mi
 8001604:	4b11      	ldrmi	r3, [pc, #68]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001606:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001608:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 800160c:	07c4      	lsls	r4, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800160e:	bf4a      	itet	mi
 8001610:	4b0e      	ldrmi	r3, [pc, #56]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001612:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001614:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 8001618:	07c1      	lsls	r1, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800161a:	bf4a      	itet	mi
 800161c:	4b0b      	ldrmi	r3, [pc, #44]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800161e:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001620:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 8001624:	07c2      	lsls	r2, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001626:	bf4a      	itet	mi
 8001628:	4b08      	ldrmi	r3, [pc, #32]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 800162a:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 800162c:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
			if (uData & 0x1)
 8001630:	07c3      	lsls	r3, r0, #31
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001632:	bf4a      	itet	mi
 8001634:	4b05      	ldrmi	r3, [pc, #20]	; (800164c <crc32_bytes+0x1a4>)
				uData >>= 1;
 8001636:	0840      	lsrpl	r0, r0, #1
				uData = (uData >> 1) ^ CRC32_POLYNOMIAL;
 8001638:	ea83 0050 	eormi.w	r0, r3, r0, lsr #1
}
 800163c:	43c0      	mvns	r0, r0
 800163e:	b002      	add	sp, #8
 8001640:	bcf0      	pop	{r4, r5, r6, r7}
 8001642:	4770      	bx	lr
	while (uIndex--) {
 8001644:	4606      	mov	r6, r0
 8001646:	e74d      	b.n	80014e4 <crc32_bytes+0x3c>
 8001648:	40023000 	.word	0x40023000
 800164c:	edb88320 	.word	0xedb88320

08001650 <receive_program>:
int receive_program(void) {
 8001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	huart2.Instance->CR1 &= ~USART_CR1_RXNEIE;
 8001654:	4f32      	ldr	r7, [pc, #200]	; (8001720 <receive_program+0xd0>)
	uartrecbufftop = 0;
 8001656:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001734 <receive_program+0xe4>
	huart2.Instance->CR1 &= ~USART_CR1_RXNEIE;
 800165a:	6838      	ldr	r0, [r7, #0]
		if ( USART2->SR & USART_SR_RXNE) {
 800165c:	4931      	ldr	r1, [pc, #196]	; (8001724 <receive_program+0xd4>)
	huart2.Instance->CR1 &= ~USART_CR1_RXNEIE;
 800165e:	68c3      	ldr	r3, [r0, #12]
	} while (counter < MAX_RECEIVE_CYCLES);
 8001660:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8001738 <receive_program+0xe8>
			uartrecbuffer[uartrecbufftop] = curr_byte;
 8001664:	4e30      	ldr	r6, [pc, #192]	; (8001728 <receive_program+0xd8>)
	uartrecbufftop = 0;
 8001666:	2200      	movs	r2, #0
	huart2.Instance->CR1 &= ~USART_CR1_RXNEIE;
 8001668:	f023 0320 	bic.w	r3, r3, #32
 800166c:	60c3      	str	r3, [r0, #12]
	uartrecbufftop = 0;
 800166e:	4615      	mov	r5, r2
 8001670:	f8c8 2000 	str.w	r2, [r8]
	int counter = 0;
 8001674:	4613      	mov	r3, r2
		if ( USART2->SR & USART_SR_RXNE) {
 8001676:	680c      	ldr	r4, [r1, #0]
 8001678:	f014 0420 	ands.w	r4, r4, #32
		counter++;
 800167c:	f103 0301 	add.w	r3, r3, #1
		if ( USART2->SR & USART_SR_RXNE) {
 8001680:	d00e      	beq.n	80016a0 <receive_program+0x50>
			curr_byte = (USART2->DR & USART_DR_DR);
 8001682:	684b      	ldr	r3, [r1, #4]
			uartrecbuffer[uartrecbufftop] = curr_byte;
 8001684:	54b3      	strb	r3, [r6, r2]
			uartrecbufftop++;
 8001686:	3201      	adds	r2, #1
			if (uartrecbufftop >= UART_RECEIVE_BUF_SIZE) {
 8001688:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800168c:	d22b      	bcs.n	80016e6 <receive_program+0x96>
		if ( USART2->SR & USART_SR_RXNE) {
 800168e:	680c      	ldr	r4, [r1, #0]
			counter = 0;
 8001690:	2300      	movs	r3, #0
		if ( USART2->SR & USART_SR_RXNE) {
 8001692:	f014 0420 	ands.w	r4, r4, #32
 8001696:	f04f 0501 	mov.w	r5, #1
		counter++;
 800169a:	f103 0301 	add.w	r3, r3, #1
		if ( USART2->SR & USART_SR_RXNE) {
 800169e:	d1f0      	bne.n	8001682 <receive_program+0x32>
	} while (counter < MAX_RECEIVE_CYCLES);
 80016a0:	4563      	cmp	r3, ip
 80016a2:	dde8      	ble.n	8001676 <receive_program+0x26>
 80016a4:	b385      	cbz	r5, 8001708 <receive_program+0xb8>
	if(uartrecbufftop < 5){
 80016a6:	2a04      	cmp	r2, #4
 80016a8:	f8c8 2000 	str.w	r2, [r8]
 80016ac:	d92c      	bls.n	8001708 <receive_program+0xb8>
	uint32_t received_crc = uartrecbuffer[uartrecbufftop - 5] + (uartrecbuffer[uartrecbufftop - 4] << 8) + (uartrecbuffer[uartrecbufftop - 3] << 16) + (uartrecbuffer[uartrecbufftop - 2] << 24);
 80016ae:	481e      	ldr	r0, [pc, #120]	; (8001728 <receive_program+0xd8>)
 80016b0:	1f51      	subs	r1, r2, #5
 80016b2:	4402      	add	r2, r0
 80016b4:	5c43      	ldrb	r3, [r0, r1]
 80016b6:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 80016ba:	f812 6c03 	ldrb.w	r6, [r2, #-3]
 80016be:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 80016c2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80016c6:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80016ca:	eb03 6505 	add.w	r5, r3, r5, lsl #24
	uint32_t crc = crc32_bytes(uartrecbuffer, uartrecbufftop - 5);
 80016ce:	f7ff feeb 	bl	80014a8 <crc32_bytes>
	if (received_crc != crc){
 80016d2:	4285      	cmp	r5, r0
 80016d4:	d118      	bne.n	8001708 <receive_program+0xb8>
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	68d3      	ldr	r3, [r2, #12]
 80016da:	f043 0320 	orr.w	r3, r3, #32
	return 0;
 80016de:	4620      	mov	r0, r4
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 80016e0:	60d3      	str	r3, [r2, #12]
}
 80016e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				uart_printf(
 80016e6:	4811      	ldr	r0, [pc, #68]	; (800172c <receive_program+0xdc>)
 80016e8:	f8c8 2000 	str.w	r2, [r8]
 80016ec:	f7ff feba 	bl	8001464 <uart_printf>
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	68d3      	ldr	r3, [r2, #12]
				uartrecbufftop = 0;
 80016f4:	2100      	movs	r1, #0
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 80016f6:	f043 0320 	orr.w	r3, r3, #32
 80016fa:	60d3      	str	r3, [r2, #12]
				uartrecbufftop = 0;
 80016fc:	f8c8 1000 	str.w	r1, [r8]
				return -1;
 8001700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_printf("Control sum mismatch!\r\n");
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <receive_program+0xe0>)
 800170a:	f7ff feab 	bl	8001464 <uart_printf>
		huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	68d3      	ldr	r3, [r2, #12]
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	60d3      	str	r3, [r2, #12]
		return -1;
 8001718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return;
 800171c:	e7f2      	b.n	8001704 <receive_program+0xb4>
 800171e:	bf00      	nop
 8001720:	20004b84 	.word	0x20004b84
 8001724:	40004400 	.word	0x40004400
 8001728:	20000534 	.word	0x20000534
 800172c:	08003500 	.word	0x08003500
 8001730:	08003560 	.word	0x08003560
 8001734:	20000aa4 	.word	0x20000aa4
 8001738:	000270ff 	.word	0x000270ff

0800173c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800173c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001774 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001742:	490e      	ldr	r1, [pc, #56]	; (800177c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001744:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001758:	4c0b      	ldr	r4, [pc, #44]	; (8001788 <LoopFillZerobss+0x26>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001766:	f7ff fe65 	bl	8001434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f001 fa0b 	bl	8002b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176e:	f7fe ff71 	bl	8000654 <main>
  bx  lr    
 8001772:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001774:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001780:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 8001784:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001788:	20004c2c 	.word	0x20004c2c

0800178c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800178c:	e7fe      	b.n	800178c <ADC_IRQHandler>
	...

08001790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001790:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001792:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <HAL_InitTick+0x3c>)
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_InitTick+0x40>)
 8001796:	7812      	ldrb	r2, [r2, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
{
 800179a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80017a4:	fbb3 f0f0 	udiv	r0, r3, r0
 80017a8:	f000 f890 	bl	80018cc <HAL_SYSTICK_Config>
 80017ac:	b908      	cbnz	r0, 80017b2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	2d0f      	cmp	r5, #15
 80017b0:	d901      	bls.n	80017b6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017b4:	bd38      	pop	{r3, r4, r5, pc}
 80017b6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	4602      	mov	r2, r0
 80017ba:	4629      	mov	r1, r5
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c0:	f000 f83e 	bl	8001840 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_InitTick+0x44>)
 80017c6:	4620      	mov	r0, r4
 80017c8:	601d      	str	r5, [r3, #0]
}
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_Init>:
{
 80017d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_Init+0x30>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f80f 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff ffc8 	bl	8001790 <HAL_InitTick>
  HAL_MspInit();
 8001800:	f7ff fb54 	bl	8000eac <HAL_MspInit>
}
 8001804:	2000      	movs	r0, #0
 8001806:	bd08      	pop	{r3, pc}
 8001808:	40023c00 	.word	0x40023c00

0800180c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800180c:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_GetTick+0x8>)
 800180e:	6818      	ldr	r0, [r3, #0]
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20004c18 	.word	0x20004c18

08001818 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4908      	ldr	r1, [pc, #32]	; (800183c <HAL_NVIC_SetPriorityGrouping+0x24>)
 800181a:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181e:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001820:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001824:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001826:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001834:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001838:	60cb      	str	r3, [r1, #12]
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_NVIC_SetPriority+0x68>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001848:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184a:	f1c3 0507 	rsb	r5, r3, #7
 800184e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001850:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	bf28      	it	cs
 8001856:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001858:	2c06      	cmp	r4, #6
 800185a:	d919      	bls.n	8001890 <HAL_NVIC_SetPriority+0x50>
 800185c:	3b03      	subs	r3, #3
 800185e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001862:	409c      	lsls	r4, r3
 8001864:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800186c:	40ac      	lsls	r4, r5
 800186e:	ea21 0104 	bic.w	r1, r1, r4
 8001872:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001874:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001876:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800187a:	db0c      	blt.n	8001896 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001880:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001884:	0109      	lsls	r1, r1, #4
 8001886:	b2c9      	uxtb	r1, r1
 8001888:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800188c:	bc30      	pop	{r4, r5}
 800188e:	4770      	bx	lr
 8001890:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	4613      	mov	r3, r2
 8001894:	e7e8      	b.n	8001868 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_NVIC_SetPriority+0x6c>)
 8001898:	f000 000f 	and.w	r0, r0, #15
 800189c:	0109      	lsls	r1, r1, #4
 800189e:	4403      	add	r3, r0
 80018a0:	b2c9      	uxtb	r1, r1
 80018a2:	7619      	strb	r1, [r3, #24]
 80018a4:	bc30      	pop	{r4, r5}
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	e000ecfc 	.word	0xe000ecfc

080018b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018b0:	2800      	cmp	r0, #0
 80018b2:	db07      	blt.n	80018c4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b4:	f000 011f 	and.w	r1, r0, #31
 80018b8:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_NVIC_EnableIRQ+0x18>)
 80018ba:	0940      	lsrs	r0, r0, #5
 80018bc:	2301      	movs	r3, #1
 80018be:	408b      	lsls	r3, r1
 80018c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	3801      	subs	r0, #1
 80018ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80018d2:	d20e      	bcs.n	80018f2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d8:	4c08      	ldr	r4, [pc, #32]	; (80018fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	20f0      	movs	r0, #240	; 0xf0
 80018de:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80018ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	6019      	str	r1, [r3, #0]
 80018f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2001      	movs	r0, #1
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001900:	b180      	cbz	r0, 8001924 <HAL_CRC_Init+0x24>
{
 8001902:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001904:	7943      	ldrb	r3, [r0, #5]
 8001906:	4604      	mov	r4, r0
 8001908:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800190c:	b11b      	cbz	r3, 8001916 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800190e:	2301      	movs	r3, #1
 8001910:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001912:	2000      	movs	r0, #0
}
 8001914:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001916:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001918:	f7ff fae6 	bl	8000ee8 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 800191c:	2301      	movs	r3, #1
 800191e:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 8001920:	2000      	movs	r0, #0
}
 8001922:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001924:	2001      	movs	r0, #1
}
 8001926:	4770      	bx	lr

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192c:	468b      	mov	fp, r1
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8001b2c <HAL_GPIO_Init+0x204>
 8001932:	6809      	ldr	r1, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001934:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8001b30 <HAL_GPIO_Init+0x208>
{
 8001938:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	46d9      	mov	r9, fp
 800193e:	e003      	b.n	8001948 <HAL_GPIO_Init+0x20>
 8001940:	3301      	adds	r3, #1
 8001942:	2b10      	cmp	r3, #16
 8001944:	f000 8085 	beq.w	8001a52 <HAL_GPIO_Init+0x12a>
    ioposition = 0x01U << position;
 8001948:	2201      	movs	r2, #1
 800194a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194c:	ea02 0b01 	and.w	fp, r2, r1
    if(iocurrent == ioposition)
 8001950:	438a      	bics	r2, r1
 8001952:	d1f5      	bne.n	8001940 <HAL_GPIO_Init+0x18>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001954:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8001958:	f005 0203 	and.w	r2, r5, #3
 800195c:	1e54      	subs	r4, r2, #1
 800195e:	2c01      	cmp	r4, #1
 8001960:	ea4f 0743 	mov.w	r7, r3, lsl #1
 8001964:	d978      	bls.n	8001a58 <HAL_GPIO_Init+0x130>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001966:	2a03      	cmp	r2, #3
 8001968:	f040 80b6 	bne.w	8001ad8 <HAL_GPIO_Init+0x1b0>
 800196c:	40ba      	lsls	r2, r7
 800196e:	43d4      	mvns	r4, r2
 8001970:	9400      	str	r4, [sp, #0]
      temp = GPIOx->MODER;
 8001972:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001974:	9c00      	ldr	r4, [sp, #0]
 8001976:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001978:	4322      	orrs	r2, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800197e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	d0de      	beq.n	8001940 <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	2200      	movs	r2, #0
 8001984:	9203      	str	r2, [sp, #12]
 8001986:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800198a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800198e:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 8001992:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 8001996:	f023 0403 	bic.w	r4, r3, #3
 800199a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800199e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019a2:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 80019a6:	9203      	str	r2, [sp, #12]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a8:	f003 0603 	and.w	r6, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ac:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80019ae:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b0:	00b6      	lsls	r6, r6, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	40b2      	lsls	r2, r6
 80019b6:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	4f56      	ldr	r7, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x1ec>)
 80019bc:	42b8      	cmp	r0, r7
 80019be:	d01c      	beq.n	80019fa <HAL_GPIO_Init+0xd2>
 80019c0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80019c4:	42b8      	cmp	r0, r7
 80019c6:	f000 808c 	beq.w	8001ae2 <HAL_GPIO_Init+0x1ba>
 80019ca:	4f53      	ldr	r7, [pc, #332]	; (8001b18 <HAL_GPIO_Init+0x1f0>)
 80019cc:	42b8      	cmp	r0, r7
 80019ce:	f000 808d 	beq.w	8001aec <HAL_GPIO_Init+0x1c4>
 80019d2:	4f52      	ldr	r7, [pc, #328]	; (8001b1c <HAL_GPIO_Init+0x1f4>)
 80019d4:	42b8      	cmp	r0, r7
 80019d6:	f000 808e 	beq.w	8001af6 <HAL_GPIO_Init+0x1ce>
 80019da:	4f51      	ldr	r7, [pc, #324]	; (8001b20 <HAL_GPIO_Init+0x1f8>)
 80019dc:	42b8      	cmp	r0, r7
 80019de:	f000 808f 	beq.w	8001b00 <HAL_GPIO_Init+0x1d8>
 80019e2:	4f50      	ldr	r7, [pc, #320]	; (8001b24 <HAL_GPIO_Init+0x1fc>)
 80019e4:	42b8      	cmp	r0, r7
 80019e6:	f000 8090 	beq.w	8001b0a <HAL_GPIO_Init+0x1e2>
 80019ea:	4f4f      	ldr	r7, [pc, #316]	; (8001b28 <HAL_GPIO_Init+0x200>)
 80019ec:	42b8      	cmp	r0, r7
 80019ee:	bf0c      	ite	eq
 80019f0:	2706      	moveq	r7, #6
 80019f2:	2707      	movne	r7, #7
 80019f4:	fa07 f606 	lsl.w	r6, r7, r6
 80019f8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019fa:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80019fc:	f8dc 2000 	ldr.w	r2, [ip]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	ea6f 060b 	mvn.w	r6, fp
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a04:	03ec      	lsls	r4, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001a06:	bf54      	ite	pl
 8001a08:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001a0a:	ea4b 0202 	orrmi.w	r2, fp, r2
        }
        EXTI->IMR = temp;
 8001a0e:	f8cc 2000 	str.w	r2, [ip]

        temp = EXTI->EMR;
 8001a12:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a16:	03aa      	lsls	r2, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001a18:	bf54      	ite	pl
 8001a1a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a1c:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->EMR = temp;
 8001a20:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a24:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a28:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	bf54      	ite	pl
 8001a2c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001a2e:	ea4b 0404 	orrmi.w	r4, fp, r4
        }
        EXTI->RTSR = temp;
 8001a32:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8001a36:	f8dc 200c 	ldr.w	r2, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3a:	02ac      	lsls	r4, r5, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001a40:	bf54      	ite	pl
 8001a42:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8001a44:	ea4b 0202 	orrmi.w	r2, fp, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a48:	2b10      	cmp	r3, #16
        }
        EXTI->FTSR = temp;
 8001a4a:	f8cc 200c 	str.w	r2, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	f47f af7b 	bne.w	8001948 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a52:	b005      	add	sp, #20
 8001a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001a58:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a5a:	2403      	movs	r4, #3
 8001a5c:	40bc      	lsls	r4, r7
 8001a5e:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8001a66:	40be      	lsls	r6, r7
 8001a68:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8001a6c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a6e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a72:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a76:	ea2e 0e0b 	bic.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7a:	409e      	lsls	r6, r3
 8001a7c:	ea46 060e 	orr.w	r6, r6, lr
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	43e4      	mvns	r4, r4
 8001a82:	9400      	str	r4, [sp, #0]
        GPIOx->OTYPER = temp;
 8001a84:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8001a86:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a88:	ea06 0e04 	and.w	lr, r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8c:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8001a90:	40be      	lsls	r6, r7
 8001a92:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001a98:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9a:	d001      	beq.n	8001aa0 <HAL_GPIO_Init+0x178>
 8001a9c:	40ba      	lsls	r2, r7
 8001a9e:	e768      	b.n	8001972 <HAL_GPIO_Init+0x4a>
        temp = GPIOx->AFR[position >> 3U];
 8001aa0:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001aa4:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	f8d8 4020 	ldr.w	r4, [r8, #32]
 8001ab0:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ab6:	240f      	movs	r4, #15
 8001ab8:	fa04 f60e 	lsl.w	r6, r4, lr
 8001abc:	9c01      	ldr	r4, [sp, #4]
 8001abe:	ea24 0606 	bic.w	r6, r4, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac2:	f8d9 4010 	ldr.w	r4, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	9601      	str	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ac8:	fa04 f60e 	lsl.w	r6, r4, lr
 8001acc:	9c01      	ldr	r4, [sp, #4]
 8001ace:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3U] = temp;
 8001ad0:	40ba      	lsls	r2, r7
 8001ad2:	f8c8 6020 	str.w	r6, [r8, #32]
 8001ad6:	e74c      	b.n	8001972 <HAL_GPIO_Init+0x4a>
 8001ad8:	2403      	movs	r4, #3
 8001ada:	40bc      	lsls	r4, r7
 8001adc:	43e4      	mvns	r4, r4
 8001ade:	9400      	str	r4, [sp, #0]
 8001ae0:	e7d1      	b.n	8001a86 <HAL_GPIO_Init+0x15e>
 8001ae2:	2701      	movs	r7, #1
 8001ae4:	fa07 f606 	lsl.w	r6, r7, r6
 8001ae8:	4332      	orrs	r2, r6
 8001aea:	e786      	b.n	80019fa <HAL_GPIO_Init+0xd2>
 8001aec:	2702      	movs	r7, #2
 8001aee:	fa07 f606 	lsl.w	r6, r7, r6
 8001af2:	4332      	orrs	r2, r6
 8001af4:	e781      	b.n	80019fa <HAL_GPIO_Init+0xd2>
 8001af6:	2703      	movs	r7, #3
 8001af8:	fa07 f606 	lsl.w	r6, r7, r6
 8001afc:	4332      	orrs	r2, r6
 8001afe:	e77c      	b.n	80019fa <HAL_GPIO_Init+0xd2>
 8001b00:	2704      	movs	r7, #4
 8001b02:	fa07 f606 	lsl.w	r6, r7, r6
 8001b06:	4332      	orrs	r2, r6
 8001b08:	e777      	b.n	80019fa <HAL_GPIO_Init+0xd2>
 8001b0a:	2705      	movs	r7, #5
 8001b0c:	fa07 f606 	lsl.w	r6, r7, r6
 8001b10:	4332      	orrs	r2, r6
 8001b12:	e772      	b.n	80019fa <HAL_GPIO_Init+0xd2>
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40021800 	.word	0x40021800
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013c00 	.word	0x40013c00

08001b34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b34:	b902      	cbnz	r2, 8001b38 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b36:	0409      	lsls	r1, r1, #16
 8001b38:	6181      	str	r1, [r0, #24]
  }
}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	f000 8087 	beq.w	8001c50 <HAL_RCC_ClockConfig+0x114>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b42:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_RCC_ClockConfig+0x128>)
 8001b44:	6813      	ldr	r3, [r2, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	428b      	cmp	r3, r1
{
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	460d      	mov	r5, r1
 8001b52:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	d209      	bcs.n	8001b6a <HAL_RCC_ClockConfig+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	b2cb      	uxtb	r3, r1
 8001b58:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	6813      	ldr	r3, [r2, #0]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	428b      	cmp	r3, r1
 8001b62:	d002      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001b64:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8001b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	0798      	lsls	r0, r3, #30
 8001b6e:	d514      	bpl.n	8001b9a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	0759      	lsls	r1, r3, #29
 8001b72:	d504      	bpl.n	8001b7e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b74:	493c      	ldr	r1, [pc, #240]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001b76:	688a      	ldr	r2, [r1, #8]
 8001b78:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001b7c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7e:	071a      	lsls	r2, r3, #28
 8001b80:	d504      	bpl.n	8001b8c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b82:	4939      	ldr	r1, [pc, #228]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001b84:	688a      	ldr	r2, [r1, #8]
 8001b86:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001b8a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001b8e:	68a0      	ldr	r0, [r4, #8]
 8001b90:	688a      	ldr	r2, [r1, #8]
 8001b92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b96:	4302      	orrs	r2, r0
 8001b98:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9a:	07df      	lsls	r7, r3, #31
 8001b9c:	d521      	bpl.n	8001be2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9e:	6862      	ldr	r2, [r4, #4]
 8001ba0:	2a01      	cmp	r2, #1
 8001ba2:	d057      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba4:	1e93      	subs	r3, r2, #2
 8001ba6:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bac:	d94d      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	0799      	lsls	r1, r3, #30
 8001bb0:	d5d8      	bpl.n	8001b64 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb2:	4e2d      	ldr	r6, [pc, #180]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001bb4:	68b3      	ldr	r3, [r6, #8]
 8001bb6:	f023 0303 	bic.w	r3, r3, #3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bbe:	f7ff fe25 	bl	800180c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bc6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc8:	e004      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f7ff fe1f 	bl	800180c <HAL_GetTick>
 8001bce:	1bc0      	subs	r0, r0, r7
 8001bd0:	4540      	cmp	r0, r8
 8001bd2:	d844      	bhi.n	8001c5e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd4:	68b3      	ldr	r3, [r6, #8]
 8001bd6:	6862      	ldr	r2, [r4, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001be0:	d1f3      	bne.n	8001bca <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x128>)
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	42ab      	cmp	r3, r5
 8001bec:	d906      	bls.n	8001bfc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	b2eb      	uxtb	r3, r5
 8001bf0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	42ab      	cmp	r3, r5
 8001bfa:	d1b3      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	075a      	lsls	r2, r3, #29
 8001c00:	d506      	bpl.n	8001c10 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c02:	4919      	ldr	r1, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001c04:	68e0      	ldr	r0, [r4, #12]
 8001c06:	688a      	ldr	r2, [r1, #8]
 8001c08:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001c0c:	4302      	orrs	r2, r0
 8001c0e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c10:	071b      	lsls	r3, r3, #28
 8001c12:	d507      	bpl.n	8001c24 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001c16:	6921      	ldr	r1, [r4, #16]
 8001c18:	6893      	ldr	r3, [r2, #8]
 8001c1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c22:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c24:	f000 f848 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c28:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001c2a:	4c10      	ldr	r4, [pc, #64]	; (8001c6c <HAL_RCC_ClockConfig+0x130>)
 8001c2c:	6892      	ldr	r2, [r2, #8]
 8001c2e:	4910      	ldr	r1, [pc, #64]	; (8001c70 <HAL_RCC_ClockConfig+0x134>)
 8001c30:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001c34:	4603      	mov	r3, r0
 8001c36:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001c38:	480e      	ldr	r0, [pc, #56]	; (8001c74 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c3a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001c3c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c3e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001c40:	f7ff fda6 	bl	8001790 <HAL_InitTick>
  return HAL_OK;
 8001c44:	2000      	movs	r0, #0
}
 8001c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	0198      	lsls	r0, r3, #6
 8001c4c:	d4b1      	bmi.n	8001bb2 <HAL_RCC_ClockConfig+0x76>
 8001c4e:	e789      	b.n	8001b64 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001c50:	2001      	movs	r0, #1
}
 8001c52:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c54:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	039e      	lsls	r6, r3, #14
 8001c5a:	d4aa      	bmi.n	8001bb2 <HAL_RCC_ClockConfig+0x76>
 8001c5c:	e782      	b.n	8001b64 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001c5e:	2003      	movs	r0, #3
 8001c60:	e781      	b.n	8001b66 <HAL_RCC_ClockConfig+0x2a>
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080034e8 	.word	0x080034e8
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000008 	.word	0x20000008

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001c7e:	4905      	ldr	r1, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c84:	6808      	ldr	r0, [r1, #0]
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c88:	40d8      	lsrs	r0, r3
 8001c8a:	4770      	bx	lr
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	080034f8 	.word	0x080034f8
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001c9e:	4905      	ldr	r1, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ca0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ca4:	6808      	ldr	r0, [r1, #0]
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4770      	bx	lr
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	080034f8 	.word	0x080034f8
 8001cb4:	20000000 	.word	0x20000000

08001cb8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb8:	4928      	ldr	r1, [pc, #160]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa4>)
{
 8001cba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cbc:	688b      	ldr	r3, [r1, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d007      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1e>
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d01d      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x4e>
 8001cca:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001ccc:	4825      	ldr	r0, [pc, #148]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xac>)
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	bf08      	it	eq
 8001cd2:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001cd4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd8:	684b      	ldr	r3, [r1, #4]
 8001cda:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cde:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	d130      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x8e>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce4:	6849      	ldr	r1, [r1, #4]
 8001ce6:	481f      	ldr	r0, [pc, #124]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ce8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001cec:	fba1 0100 	umull	r0, r1, r1, r0
 8001cf0:	f7fe fade 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001d00:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d08:	684b      	ldr	r3, [r1, #4]
 8001d0a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d0e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d12:	d10e      	bne.n	8001d32 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	6849      	ldr	r1, [r1, #4]
 8001d16:	4813      	ldr	r0, [pc, #76]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d18:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d1c:	fba1 0100 	umull	r0, r1, r1, r0
 8001d20:	f7fe fac6 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001d2c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001d30:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d32:	684b      	ldr	r3, [r1, #4]
 8001d34:	480a      	ldr	r0, [pc, #40]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d36:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d3a:	fba3 0100 	umull	r0, r1, r3, r0
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f7fe fab6 	bl	80002b0 <__aeabi_uldivmod>
 8001d44:	e7ee      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x6c>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	684b      	ldr	r3, [r1, #4]
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d4a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d4e:	fba3 0100 	umull	r0, r1, r3, r0
 8001d52:	2300      	movs	r3, #0
 8001d54:	f7fe faac 	bl	80002b0 <__aeabi_uldivmod>
 8001d58:	e7cc      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x3c>
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	00f42400 	.word	0x00f42400

08001d68 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	f000 81b5 	beq.w	80020d8 <HAL_RCC_OscConfig+0x370>
{
 8001d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	6803      	ldr	r3, [r0, #0]
 8001d74:	07da      	lsls	r2, r3, #31
{
 8001d76:	b082      	sub	sp, #8
 8001d78:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7a:	d536      	bpl.n	8001dea <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d7c:	49ad      	ldr	r1, [pc, #692]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001d7e:	688a      	ldr	r2, [r1, #8]
 8001d80:	f002 020c 	and.w	r2, r2, #12
 8001d84:	2a04      	cmp	r2, #4
 8001d86:	f000 80df 	beq.w	8001f48 <HAL_RCC_OscConfig+0x1e0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d8a:	688a      	ldr	r2, [r1, #8]
 8001d8c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d90:	2a08      	cmp	r2, #8
 8001d92:	f000 80d5 	beq.w	8001f40 <HAL_RCC_OscConfig+0x1d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	49a7      	ldr	r1, [pc, #668]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001d98:	688a      	ldr	r2, [r1, #8]
 8001d9a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d9e:	2a0c      	cmp	r2, #12
 8001da0:	f000 8104 	beq.w	8001fac <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da4:	6863      	ldr	r3, [r4, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001daa:	f000 8118 	beq.w	8001fde <HAL_RCC_OscConfig+0x276>
 8001dae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db2:	f000 8198 	beq.w	80020e6 <HAL_RCC_OscConfig+0x37e>
 8001db6:	4d9f      	ldr	r5, [pc, #636]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001db8:	682a      	ldr	r2, [r5, #0]
 8001dba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dbe:	602a      	str	r2, [r5, #0]
 8001dc0:	682a      	ldr	r2, [r5, #0]
 8001dc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dc6:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 810d 	bne.w	8001fe8 <HAL_RCC_OscConfig+0x280>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fd1d 	bl	800180c <HAL_GetTick>
 8001dd2:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd4:	e005      	b.n	8001de2 <HAL_RCC_OscConfig+0x7a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd6:	f7ff fd19 	bl	800180c <HAL_GetTick>
 8001dda:	1b80      	subs	r0, r0, r6
 8001ddc:	2864      	cmp	r0, #100	; 0x64
 8001dde:	f200 80fa 	bhi.w	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	682b      	ldr	r3, [r5, #0]
 8001de4:	0399      	lsls	r1, r3, #14
 8001de6:	d4f6      	bmi.n	8001dd6 <HAL_RCC_OscConfig+0x6e>
 8001de8:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	079a      	lsls	r2, r3, #30
 8001dec:	d52f      	bpl.n	8001e4e <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dee:	4a91      	ldr	r2, [pc, #580]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001df0:	6891      	ldr	r1, [r2, #8]
 8001df2:	f011 0f0c 	tst.w	r1, #12
 8001df6:	f000 8098 	beq.w	8001f2a <HAL_RCC_OscConfig+0x1c2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001dfa:	6891      	ldr	r1, [r2, #8]
 8001dfc:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e00:	2908      	cmp	r1, #8
 8001e02:	f000 808e 	beq.w	8001f22 <HAL_RCC_OscConfig+0x1ba>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	498b      	ldr	r1, [pc, #556]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001e08:	688a      	ldr	r2, [r1, #8]
 8001e0a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e0e:	2a0c      	cmp	r2, #12
 8001e10:	f000 8164 	beq.w	80020dc <HAL_RCC_OscConfig+0x374>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e14:	68e3      	ldr	r3, [r4, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8116 	beq.w	8002048 <HAL_RCC_OscConfig+0x2e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e1c:	4b86      	ldr	r3, [pc, #536]	; (8002038 <HAL_RCC_OscConfig+0x2d0>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4e85      	ldr	r6, [pc, #532]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_ENABLE();
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e24:	f7ff fcf2 	bl	800180c <HAL_GetTick>
 8001e28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	e005      	b.n	8001e38 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fcee 	bl	800180c <HAL_GetTick>
 8001e30:	1b40      	subs	r0, r0, r5
 8001e32:	2802      	cmp	r0, #2
 8001e34:	f200 80cf 	bhi.w	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	6833      	ldr	r3, [r6, #0]
 8001e3a:	0798      	lsls	r0, r3, #30
 8001e3c:	d5f6      	bpl.n	8001e2c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	6833      	ldr	r3, [r6, #0]
 8001e40:	6922      	ldr	r2, [r4, #16]
 8001e42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e4a:	6033      	str	r3, [r6, #0]
 8001e4c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4e:	071a      	lsls	r2, r3, #28
 8001e50:	d452      	bmi.n	8001ef8 <HAL_RCC_OscConfig+0x190>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e52:	0758      	lsls	r0, r3, #29
 8001e54:	d530      	bpl.n	8001eb8 <HAL_RCC_OscConfig+0x150>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4a77      	ldr	r2, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001e58:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e5a:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	f000 8099 	beq.w	8001f94 <HAL_RCC_OscConfig+0x22c>
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4e75      	ldr	r6, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x2d4>)
 8001e66:	6833      	ldr	r3, [r6, #0]
 8001e68:	05d9      	lsls	r1, r3, #23
 8001e6a:	f140 80a4 	bpl.w	8001fb6 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e6e:	68a3      	ldr	r3, [r4, #8]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	f000 80c7 	beq.w	8002004 <HAL_RCC_OscConfig+0x29c>
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	f000 813f 	beq.w	80020fa <HAL_RCC_OscConfig+0x392>
 8001e7c:	4e6d      	ldr	r6, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001e7e:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001e80:	f022 0201 	bic.w	r2, r2, #1
 8001e84:	6732      	str	r2, [r6, #112]	; 0x70
 8001e86:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001e88:	f022 0204 	bic.w	r2, r2, #4
 8001e8c:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 80bd 	bne.w	800200e <HAL_RCC_OscConfig+0x2a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fcba 	bl	800180c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e98:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001e9c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9e:	e005      	b.n	8001eac <HAL_RCC_OscConfig+0x144>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fcb4 	bl	800180c <HAL_GetTick>
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4540      	cmp	r0, r8
 8001ea8:	f200 8095 	bhi.w	8001fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001eae:	0798      	lsls	r0, r3, #30
 8001eb0:	d4f6      	bmi.n	8001ea0 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb2:	2d00      	cmp	r5, #0
 8001eb4:	f040 810a 	bne.w	80020cc <HAL_RCC_OscConfig+0x364>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb8:	69a0      	ldr	r0, [r4, #24]
 8001eba:	b1c8      	cbz	r0, 8001ef0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ebc:	4d5d      	ldr	r5, [pc, #372]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001ebe:	68ab      	ldr	r3, [r5, #8]
 8001ec0:	f003 030c 	and.w	r3, r3, #12
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	f000 80d0 	beq.w	800206a <HAL_RCC_OscConfig+0x302>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x2d8>)
 8001ecc:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ece:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001ed0:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed2:	f000 811c 	beq.w	800210e <HAL_RCC_OscConfig+0x3a6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed6:	f7ff fc99 	bl	800180c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8001edc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e004      	b.n	8001eea <HAL_RCC_OscConfig+0x182>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff fc94 	bl	800180c <HAL_GetTick>
 8001ee4:	1b40      	subs	r0, r0, r5
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d875      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	019b      	lsls	r3, r3, #6
 8001eee:	d4f7      	bmi.n	8001ee0 <HAL_RCC_OscConfig+0x178>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
}
 8001ef2:	b002      	add	sp, #8
 8001ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef8:	6963      	ldr	r3, [r4, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d02e      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f00:	4e4c      	ldr	r6, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_ENABLE();
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f06:	f7ff fc81 	bl	800180c <HAL_GetTick>
 8001f0a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0c:	e004      	b.n	8001f18 <HAL_RCC_OscConfig+0x1b0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0e:	f7ff fc7d 	bl	800180c <HAL_GetTick>
 8001f12:	1b40      	subs	r0, r0, r5
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d85e      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f18:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001f1a:	079b      	lsls	r3, r3, #30
 8001f1c:	d5f7      	bpl.n	8001f0e <HAL_RCC_OscConfig+0x1a6>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	e797      	b.n	8001e52 <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f22:	6852      	ldr	r2, [r2, #4]
 8001f24:	0257      	lsls	r7, r2, #9
 8001f26:	f53f af6e 	bmi.w	8001e06 <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	0795      	lsls	r5, r2, #30
 8001f30:	d524      	bpl.n	8001f7c <HAL_RCC_OscConfig+0x214>
 8001f32:	68e2      	ldr	r2, [r4, #12]
 8001f34:	2a01      	cmp	r2, #1
 8001f36:	d021      	beq.n	8001f7c <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
}
 8001f3a:	b002      	add	sp, #8
 8001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001f40:	684a      	ldr	r2, [r1, #4]
 8001f42:	0257      	lsls	r7, r2, #9
 8001f44:	f57f af27 	bpl.w	8001d96 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	4a3a      	ldr	r2, [pc, #232]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	0395      	lsls	r5, r2, #14
 8001f4e:	f57f af4c 	bpl.w	8001dea <HAL_RCC_OscConfig+0x82>
 8001f52:	6862      	ldr	r2, [r4, #4]
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	f47f af48 	bne.w	8001dea <HAL_RCC_OscConfig+0x82>
 8001f5a:	e7ed      	b.n	8001f38 <HAL_RCC_OscConfig+0x1d0>
      __HAL_RCC_LSI_DISABLE();
 8001f5c:	4a39      	ldr	r2, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x2dc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5e:	4e35      	ldr	r6, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
      __HAL_RCC_LSI_DISABLE();
 8001f60:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001f62:	f7ff fc53 	bl	800180c <HAL_GetTick>
 8001f66:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f68:	e004      	b.n	8001f74 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fc4f 	bl	800180c <HAL_GetTick>
 8001f6e:	1b40      	subs	r0, r0, r5
 8001f70:	2802      	cmp	r0, #2
 8001f72:	d830      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001f76:	079f      	lsls	r7, r3, #30
 8001f78:	d4f7      	bmi.n	8001f6a <HAL_RCC_OscConfig+0x202>
 8001f7a:	e7d0      	b.n	8001f1e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	492d      	ldr	r1, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001f7e:	6920      	ldr	r0, [r4, #16]
 8001f80:	680a      	ldr	r2, [r1, #0]
 8001f82:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f86:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001f8a:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8c:	071a      	lsls	r2, r3, #28
 8001f8e:	f57f af60 	bpl.w	8001e52 <HAL_RCC_OscConfig+0xea>
 8001f92:	e7b1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fa8:	2501      	movs	r5, #1
 8001faa:	e75b      	b.n	8001e64 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fac:	684a      	ldr	r2, [r1, #4]
 8001fae:	0256      	lsls	r6, r2, #9
 8001fb0:	f57f aef8 	bpl.w	8001da4 <HAL_RCC_OscConfig+0x3c>
 8001fb4:	e7c8      	b.n	8001f48 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb6:	6833      	ldr	r3, [r6, #0]
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fc25 	bl	800180c <HAL_GetTick>
 8001fc2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	6833      	ldr	r3, [r6, #0]
 8001fc6:	05da      	lsls	r2, r3, #23
 8001fc8:	f53f af51 	bmi.w	8001e6e <HAL_RCC_OscConfig+0x106>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fcc:	f7ff fc1e 	bl	800180c <HAL_GetTick>
 8001fd0:	1bc0      	subs	r0, r0, r7
 8001fd2:	2802      	cmp	r0, #2
 8001fd4:	d9f6      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8001fd6:	2003      	movs	r0, #3
}
 8001fd8:	b002      	add	sp, #8
 8001fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fc10 	bl	800180c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fec:	4e11      	ldr	r6, [pc, #68]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8001fee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff0:	e004      	b.n	8001ffc <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff2:	f7ff fc0b 	bl	800180c <HAL_GetTick>
 8001ff6:	1b40      	subs	r0, r0, r5
 8001ff8:	2864      	cmp	r0, #100	; 0x64
 8001ffa:	d8ec      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffc:	6833      	ldr	r3, [r6, #0]
 8001ffe:	0398      	lsls	r0, r3, #14
 8002000:	d5f7      	bpl.n	8001ff2 <HAL_RCC_OscConfig+0x28a>
 8002002:	e6f1      	b.n	8001de8 <HAL_RCC_OscConfig+0x80>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
 8002006:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800200e:	f7ff fbfd 	bl	800180c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002012:	4f08      	ldr	r7, [pc, #32]	; (8002034 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002014:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201a:	e004      	b.n	8002026 <HAL_RCC_OscConfig+0x2be>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201c:	f7ff fbf6 	bl	800180c <HAL_GetTick>
 8002020:	1b80      	subs	r0, r0, r6
 8002022:	4540      	cmp	r0, r8
 8002024:	d8d7      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002028:	079b      	lsls	r3, r3, #30
 800202a:	d5f7      	bpl.n	800201c <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 800202c:	2d00      	cmp	r5, #0
 800202e:	f43f af43 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x150>
 8002032:	e04b      	b.n	80020cc <HAL_RCC_OscConfig+0x364>
 8002034:	40023800 	.word	0x40023800
 8002038:	42470000 	.word	0x42470000
 800203c:	40007000 	.word	0x40007000
 8002040:	42470060 	.word	0x42470060
 8002044:	42470e80 	.word	0x42470e80
        __HAL_RCC_HSI_DISABLE();
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_RCC_OscConfig+0x408>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	4e4a      	ldr	r6, [pc, #296]	; (8002174 <HAL_RCC_OscConfig+0x40c>)
        __HAL_RCC_HSI_DISABLE();
 800204c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800204e:	f7ff fbdd 	bl	800180c <HAL_GetTick>
 8002052:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002054:	e004      	b.n	8002060 <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff fbd9 	bl	800180c <HAL_GetTick>
 800205a:	1b40      	subs	r0, r0, r5
 800205c:	2802      	cmp	r0, #2
 800205e:	d8ba      	bhi.n	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002060:	6833      	ldr	r3, [r6, #0]
 8002062:	0799      	lsls	r1, r3, #30
 8002064:	d4f7      	bmi.n	8002056 <HAL_RCC_OscConfig+0x2ee>
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	e6f1      	b.n	8001e4e <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206a:	2801      	cmp	r0, #1
 800206c:	f43f af41 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x18a>
        pll_config = RCC->PLLCFGR;
 8002070:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002072:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002074:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002078:	4291      	cmp	r1, r2
 800207a:	f47f af5d 	bne.w	8001f38 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002084:	4291      	cmp	r1, r2
 8002086:	f47f af57 	bne.w	8001f38 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800208a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800208c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002090:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002092:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002096:	f47f af4f 	bne.w	8001f38 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800209a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800209c:	0852      	lsrs	r2, r2, #1
 800209e:	3a01      	subs	r2, #1
 80020a0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80020a8:	f47f af46 	bne.w	8001f38 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80020b6:	f47f af3f 	bne.w	8001f38 <HAL_RCC_OscConfig+0x1d0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
  return HAL_OK;
 80020c4:	bf14      	ite	ne
 80020c6:	2001      	movne	r0, #1
 80020c8:	2000      	moveq	r0, #0
 80020ca:	e712      	b.n	8001ef2 <HAL_RCC_OscConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4a29      	ldr	r2, [pc, #164]	; (8002174 <HAL_RCC_OscConfig+0x40c>)
 80020ce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	e6ef      	b.n	8001eb8 <HAL_RCC_OscConfig+0x150>
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
}
 80020da:	4770      	bx	lr
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020dc:	684a      	ldr	r2, [r1, #4]
 80020de:	0256      	lsls	r6, r2, #9
 80020e0:	f53f ae98 	bmi.w	8001e14 <HAL_RCC_OscConfig+0xac>
 80020e4:	e721      	b.n	8001f2a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e6:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_RCC_OscConfig+0x40c>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020f6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f8:	e776      	b.n	8001fe8 <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_OscConfig+0x40c>)
 80020fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020fe:	f042 0204 	orr.w	r2, r2, #4
 8002102:	671a      	str	r2, [r3, #112]	; 0x70
 8002104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002106:	f042 0201 	orr.w	r2, r2, #1
 800210a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800210c:	e77f      	b.n	800200e <HAL_RCC_OscConfig+0x2a6>
        tickstart = HAL_GetTick();
 800210e:	f7ff fb7d 	bl	800180c <HAL_GetTick>
 8002112:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002114:	e005      	b.n	8002122 <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002116:	f7ff fb79 	bl	800180c <HAL_GetTick>
 800211a:	1b80      	subs	r0, r0, r6
 800211c:	2802      	cmp	r0, #2
 800211e:	f63f af5a 	bhi.w	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	682b      	ldr	r3, [r5, #0]
 8002124:	0199      	lsls	r1, r3, #6
 8002126:	d4f6      	bmi.n	8002116 <HAL_RCC_OscConfig+0x3ae>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002128:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800212c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800212e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002130:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002132:	4313      	orrs	r3, r2
 8002134:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002136:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800213a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800213e:	0852      	lsrs	r2, r2, #1
 8002140:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002144:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x410>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002148:	4e0a      	ldr	r6, [pc, #40]	; (8002174 <HAL_RCC_OscConfig+0x40c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800214a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800214e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002150:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002152:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002154:	f7ff fb5a 	bl	800180c <HAL_GetTick>
 8002158:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215a:	e005      	b.n	8002168 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff fb56 	bl	800180c <HAL_GetTick>
 8002160:	1b00      	subs	r0, r0, r4
 8002162:	2802      	cmp	r0, #2
 8002164:	f63f af37 	bhi.w	8001fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002168:	6833      	ldr	r3, [r6, #0]
 800216a:	019a      	lsls	r2, r3, #6
 800216c:	d5f6      	bpl.n	800215c <HAL_RCC_OscConfig+0x3f4>
 800216e:	e6bf      	b.n	8001ef0 <HAL_RCC_OscConfig+0x188>
 8002170:	42470000 	.word	0x42470000
 8002174:	40023800 	.word	0x40023800
 8002178:	42470060 	.word	0x42470060

0800217c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800217c:	2800      	cmp	r0, #0
 800217e:	f000 8087 	beq.w	8002290 <HAL_TIM_Base_Init+0x114>
{
 8002182:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002184:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002188:	4604      	mov	r4, r0
 800218a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800218e:	2b00      	cmp	r3, #0
 8002190:	d079      	beq.n	8002286 <HAL_TIM_Base_Init+0x10a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002192:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	493f      	ldr	r1, [pc, #252]	; (8002294 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800219c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800219e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a0:	d05d      	beq.n	800225e <HAL_TIM_Base_Init+0xe2>
 80021a2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80021a6:	d031      	beq.n	800220c <HAL_TIM_Base_Init+0x90>
 80021a8:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80021ac:	428a      	cmp	r2, r1
 80021ae:	d02d      	beq.n	800220c <HAL_TIM_Base_Init+0x90>
 80021b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021b4:	428a      	cmp	r2, r1
 80021b6:	d029      	beq.n	800220c <HAL_TIM_Base_Init+0x90>
 80021b8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021bc:	428a      	cmp	r2, r1
 80021be:	d025      	beq.n	800220c <HAL_TIM_Base_Init+0x90>
 80021c0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80021c4:	428a      	cmp	r2, r1
 80021c6:	d04a      	beq.n	800225e <HAL_TIM_Base_Init+0xe2>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80021cc:	428a      	cmp	r2, r1
 80021ce:	d021      	beq.n	8002214 <HAL_TIM_Base_Init+0x98>
 80021d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021d4:	428a      	cmp	r2, r1
 80021d6:	d01d      	beq.n	8002214 <HAL_TIM_Base_Init+0x98>
 80021d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021dc:	428a      	cmp	r2, r1
 80021de:	d019      	beq.n	8002214 <HAL_TIM_Base_Init+0x98>
 80021e0:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 80021e4:	428a      	cmp	r2, r1
 80021e6:	d015      	beq.n	8002214 <HAL_TIM_Base_Init+0x98>
 80021e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021ec:	428a      	cmp	r2, r1
 80021ee:	d011      	beq.n	8002214 <HAL_TIM_Base_Init+0x98>
 80021f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80021f4:	428a      	cmp	r2, r1
 80021f6:	d00d      	beq.n	8002214 <HAL_TIM_Base_Init+0x98>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021fa:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021fc:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002202:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002204:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002206:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002208:	6291      	str	r1, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800220a:	e010      	b.n	800222e <HAL_TIM_Base_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 800220c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002212:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002214:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002216:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002218:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002224:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002226:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002228:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800222c:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800222e:	2301      	movs	r3, #1
 8002230:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002232:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002236:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800223a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800223e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002242:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800224a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800224e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002256:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800225a:	2000      	movs	r0, #0
}
 800225c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800225e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002260:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002262:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002268:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800226a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800226e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002270:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002274:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002276:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002278:	68e3      	ldr	r3, [r4, #12]
 800227a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800227c:	6863      	ldr	r3, [r4, #4]
 800227e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002280:	6963      	ldr	r3, [r4, #20]
 8002282:	6313      	str	r3, [r2, #48]	; 0x30
 8002284:	e7d3      	b.n	800222e <HAL_TIM_Base_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 8002286:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800228a:	f7fe fe47 	bl	8000f1c <HAL_TIM_Base_MspInit>
 800228e:	e780      	b.n	8002192 <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8002290:	2001      	movs	r0, #1
}
 8002292:	4770      	bx	lr
 8002294:	40010000 	.word	0x40010000

08002298 <HAL_TIM_OC_MspInit>:
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop

0800229c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800229c:	2800      	cmp	r0, #0
 800229e:	f000 8087 	beq.w	80023b0 <HAL_TIM_OC_Init+0x114>
{
 80022a2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80022a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022a8:	4604      	mov	r4, r0
 80022aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d079      	beq.n	80023a6 <HAL_TIM_OC_Init+0x10a>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80022b2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	493f      	ldr	r1, [pc, #252]	; (80023b4 <HAL_TIM_OC_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 80022b6:	2302      	movs	r3, #2
 80022b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022bc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80022be:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	d05d      	beq.n	800237e <HAL_TIM_OC_Init+0xe2>
 80022c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80022c6:	d031      	beq.n	800232c <HAL_TIM_OC_Init+0x90>
 80022c8:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80022cc:	428a      	cmp	r2, r1
 80022ce:	d02d      	beq.n	800232c <HAL_TIM_OC_Init+0x90>
 80022d0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022d4:	428a      	cmp	r2, r1
 80022d6:	d029      	beq.n	800232c <HAL_TIM_OC_Init+0x90>
 80022d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022dc:	428a      	cmp	r2, r1
 80022de:	d025      	beq.n	800232c <HAL_TIM_OC_Init+0x90>
 80022e0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 80022e4:	428a      	cmp	r2, r1
 80022e6:	d04a      	beq.n	800237e <HAL_TIM_OC_Init+0xe2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d021      	beq.n	8002334 <HAL_TIM_OC_Init+0x98>
 80022f0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022f4:	428a      	cmp	r2, r1
 80022f6:	d01d      	beq.n	8002334 <HAL_TIM_OC_Init+0x98>
 80022f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80022fc:	428a      	cmp	r2, r1
 80022fe:	d019      	beq.n	8002334 <HAL_TIM_OC_Init+0x98>
 8002300:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 8002304:	428a      	cmp	r2, r1
 8002306:	d015      	beq.n	8002334 <HAL_TIM_OC_Init+0x98>
 8002308:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800230c:	428a      	cmp	r2, r1
 800230e:	d011      	beq.n	8002334 <HAL_TIM_OC_Init+0x98>
 8002310:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002314:	428a      	cmp	r2, r1
 8002316:	d00d      	beq.n	8002334 <HAL_TIM_OC_Init+0x98>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002318:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231a:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800231c:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002322:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002324:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002326:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002328:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800232a:	e010      	b.n	800234e <HAL_TIM_OC_Init+0xb2>
    tmpcr1 |= Structure->CounterMode;
 800232c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002332:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002334:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002336:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800233a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233e:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002344:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002346:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002348:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800234a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800234c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800234e:	2301      	movs	r3, #1
 8002350:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002352:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002356:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800235a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800235e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002362:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002366:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800236a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800236e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002376:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800237a:	2000      	movs	r0, #0
}
 800237c:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800237e:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002380:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002382:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002388:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002394:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002396:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002398:	68e3      	ldr	r3, [r4, #12]
 800239a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800239c:	6863      	ldr	r3, [r4, #4]
 800239e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80023a0:	6963      	ldr	r3, [r4, #20]
 80023a2:	6313      	str	r3, [r2, #48]	; 0x30
 80023a4:	e7d3      	b.n	800234e <HAL_TIM_OC_Init+0xb2>
    htim->Lock = HAL_UNLOCKED;
 80023a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80023aa:	f7ff ff75 	bl	8002298 <HAL_TIM_OC_MspInit>
 80023ae:	e780      	b.n	80022b2 <HAL_TIM_OC_Init+0x16>
    return HAL_ERROR;
 80023b0:	2001      	movs	r0, #1
}
 80023b2:	4770      	bx	lr
 80023b4:	40010000 	.word	0x40010000

080023b8 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80023b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	f000 80ae 	beq.w	800251e <HAL_TIM_OC_ConfigChannel+0x166>
 80023c2:	2301      	movs	r3, #1
{
 80023c4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80023c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80023ca:	2a0c      	cmp	r2, #12
 80023cc:	d808      	bhi.n	80023e0 <HAL_TIM_OC_ConfigChannel+0x28>
 80023ce:	e8df f002 	tbb	[pc, r2]
 80023d2:	0736      	.short	0x0736
 80023d4:	075c0707 	.word	0x075c0707
 80023d8:	07810707 	.word	0x07810707
 80023dc:	0707      	.short	0x0707
 80023de:	0e          	.byte	0x0e
 80023df:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80023e0:	2200      	movs	r2, #0
 80023e2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bcf0      	pop	{r4, r5, r6, r7}
 80023ec:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ee:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023f0:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023f4:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023f6:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f8:	4e64      	ldr	r6, [pc, #400]	; (800258c <HAL_TIM_OC_ConfigChannel+0x1d4>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023fe:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8002400:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002402:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8002404:	69d5      	ldr	r5, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002406:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800240a:	f425 45e6 	bic.w	r5, r5, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800240e:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002410:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002414:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002418:	f000 80a1 	beq.w	800255e <HAL_TIM_OC_ConfigChannel+0x1a6>
 800241c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002420:	42b2      	cmp	r2, r6
 8002422:	f000 809c 	beq.w	800255e <HAL_TIM_OC_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002426:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002428:	6053      	str	r3, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800242a:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800242c:	6411      	str	r1, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800242e:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8002430:	2200      	movs	r2, #0
 8002432:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	bcf0      	pop	{r4, r5, r6, r7}
 800243c:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800243e:	6802      	ldr	r2, [r0, #0]
  tmpccer |= OC_Config->OCPolarity;
 8002440:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002444:	6a13      	ldr	r3, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8002446:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002448:	4e50      	ldr	r6, [pc, #320]	; (800258c <HAL_TIM_OC_ConfigChannel+0x1d4>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8002450:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002452:	6853      	ldr	r3, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8002454:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002456:	f024 0402 	bic.w	r4, r4, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800245a:	f025 0573 	bic.w	r5, r5, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800245e:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8002460:	ea44 040c 	orr.w	r4, r4, ip
  tmpccmrx |= OC_Config->OCMode;
 8002464:	ea45 0507 	orr.w	r5, r5, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002468:	d05c      	beq.n	8002524 <HAL_TIM_OC_ConfigChannel+0x16c>
 800246a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800246e:	42b2      	cmp	r2, r6
 8002470:	d058      	beq.n	8002524 <HAL_TIM_OC_ConfigChannel+0x16c>
  TIMx->CCR1 = OC_Config->Pulse;
 8002472:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002474:	6053      	str	r3, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002476:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002478:	6351      	str	r1, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800247a:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 800247c:	2200      	movs	r2, #0
 800247e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	bcf0      	pop	{r4, r5, r6, r7}
 8002488:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800248a:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800248c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248e:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002490:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002492:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800258c <HAL_TIM_OC_ConfigChannel+0x1d4>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002496:	f025 0510 	bic.w	r5, r5, #16
 800249a:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 800249c:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800249e:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 80024a0:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80024a2:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024a6:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024aa:	4562      	cmp	r2, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024ac:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024b0:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024b4:	d043      	beq.n	800253e <HAL_TIM_OC_ConfigChannel+0x186>
 80024b6:	4f36      	ldr	r7, [pc, #216]	; (8002590 <HAL_TIM_OC_ConfigChannel+0x1d8>)
 80024b8:	42ba      	cmp	r2, r7
 80024ba:	d040      	beq.n	800253e <HAL_TIM_OC_ConfigChannel+0x186>
  TIMx->CCR2 = OC_Config->Pulse;
 80024bc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80024be:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024c0:	6196      	str	r6, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024c2:	6391      	str	r1, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80024c4:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bcf0      	pop	{r4, r5, r6, r7}
 80024d2:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024d4:	6802      	ldr	r2, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024d6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d8:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 80024da:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024dc:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 800258c <HAL_TIM_OC_ConfigChannel+0x1d4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024e0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 80024e4:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80024e6:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80024e8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80024ea:	69d3      	ldr	r3, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 80024ec:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024f0:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024f4:	4562      	cmp	r2, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024f6:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 80024fa:	ea46 0603 	orr.w	r6, r6, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024fe:	d034      	beq.n	800256a <HAL_TIM_OC_ConfigChannel+0x1b2>
 8002500:	4f23      	ldr	r7, [pc, #140]	; (8002590 <HAL_TIM_OC_ConfigChannel+0x1d8>)
 8002502:	42ba      	cmp	r2, r7
 8002504:	d031      	beq.n	800256a <HAL_TIM_OC_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 8002506:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002508:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800250a:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800250c:	63d1      	str	r1, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800250e:	6214      	str	r4, [r2, #32]
  __HAL_UNLOCK(htim);
 8002510:	2200      	movs	r2, #0
 8002512:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	bcf0      	pop	{r4, r5, r6, r7}
 800251c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800251e:	2302      	movs	r3, #2
}
 8002520:	4618      	mov	r0, r3
 8002522:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8002524:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002526:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= OC_Config->OCNPolarity;
 800252a:	4334      	orrs	r4, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800252c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002534:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8002536:	f024 0404 	bic.w	r4, r4, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800253a:	4333      	orrs	r3, r6
 800253c:	e799      	b.n	8002472 <HAL_TIM_OC_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800253e:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002540:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002544:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002548:	e9d1 3705 	ldrd	r3, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800254c:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002550:	ea43 0507 	orr.w	r5, r3, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8002554:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002558:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 800255c:	e7ae      	b.n	80024bc <HAL_TIM_OC_ConfigChannel+0x104>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800255e:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002564:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8002568:	e75d      	b.n	8002426 <HAL_TIM_OC_ConfigChannel+0x6e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800256a:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800256c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002570:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002574:	e9d1 3705 	ldrd	r3, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002578:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800257c:	ea43 0507 	orr.w	r5, r3, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8002580:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002584:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8002588:	e7bd      	b.n	8002506 <HAL_TIM_OC_ConfigChannel+0x14e>
 800258a:	bf00      	nop
 800258c:	40010000 	.word	0x40010000
 8002590:	40010400 	.word	0x40010400

08002594 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002594:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002598:	2b01      	cmp	r3, #1
 800259a:	d075      	beq.n	8002688 <HAL_TIM_ConfigClockSource+0xf4>
 800259c:	4602      	mov	r2, r0
{
 800259e:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80025a2:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025a4:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80025ae:	68a5      	ldr	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80025b0:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b2:	f425 457f 	bic.w	r5, r5, #65280	; 0xff00
 80025b6:	f025 0577 	bic.w	r5, r5, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80025ba:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80025bc:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80025be:	d065      	beq.n	800268c <HAL_TIM_ConfigClockSource+0xf8>
 80025c0:	d824      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x78>
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d07c      	beq.n	80026c0 <HAL_TIM_ConfigClockSource+0x12c>
 80025c6:	d94b      	bls.n	8002660 <HAL_TIM_ConfigClockSource+0xcc>
 80025c8:	2b50      	cmp	r3, #80	; 0x50
 80025ca:	d117      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025cc:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ce:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d0:	6848      	ldr	r0, [r1, #4]
 80025d2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d4:	f026 0601 	bic.w	r6, r6, #1
 80025d8:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025da:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025dc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80025e4:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025e6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ea:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80025ec:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025ee:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025f8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80025fe:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002600:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002604:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002608:	bcf0      	pop	{r4, r5, r6, r7}
 800260a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d038      	beq.n	8002684 <HAL_TIM_ConfigClockSource+0xf0>
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002616:	d110      	bne.n	800263a <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002618:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800261c:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800261e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002620:	432b      	orrs	r3, r5
 8002622:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002626:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800262c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800262e:	68a3      	ldr	r3, [r4, #8]
 8002630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002634:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002636:	2000      	movs	r0, #0
      break;
 8002638:	e7e0      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800263a:	2b70      	cmp	r3, #112	; 0x70
 800263c:	d1de      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800263e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8002642:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002644:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002646:	432b      	orrs	r3, r5
 8002648:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800264c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002650:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002652:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002654:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002656:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800265a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2000      	movs	r0, #0
      break;
 800265e:	e7cd      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002660:	2b20      	cmp	r3, #32
 8002662:	d002      	beq.n	800266a <HAL_TIM_ConfigClockSource+0xd6>
 8002664:	d90a      	bls.n	800267c <HAL_TIM_ConfigClockSource+0xe8>
 8002666:	2b30      	cmp	r3, #48	; 0x30
 8002668:	d1c8      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800266a:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800266c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002670:	430b      	orrs	r3, r1
 8002672:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002676:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2000      	movs	r0, #0
}
 800267a:	e7bf      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800267c:	f033 0110 	bics.w	r1, r3, #16
 8002680:	d1bc      	bne.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
 8002682:	e7f2      	b.n	800266a <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	2000      	movs	r0, #0
 8002686:	e7b9      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002688:	2002      	movs	r0, #2
}
 800268a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800268c:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800268e:	684d      	ldr	r5, [r1, #4]
 8002690:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002692:	f020 0010 	bic.w	r0, r0, #16
 8002696:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002698:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800269a:	6a23      	ldr	r3, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800269c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80026a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026a8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80026ac:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80026ae:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80026b0:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026b6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80026ba:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026bc:	2000      	movs	r0, #0
}
 80026be:	e79d      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
  tmpccer = TIMx->CCER;
 80026c0:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c2:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c4:	6848      	ldr	r0, [r1, #4]
 80026c6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026c8:	f026 0601 	bic.w	r6, r6, #1
 80026cc:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ce:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026d0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80026d8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026da:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80026de:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80026e0:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80026e2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80026ec:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2000      	movs	r0, #0
}
 80026f0:	e784      	b.n	80025fc <HAL_TIM_ConfigClockSource+0x68>
 80026f2:	bf00      	nop

080026f4 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80026f4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80026f8:	2a01      	cmp	r2, #1
 80026fa:	d050      	beq.n	800279e <HAL_TIM_SlaveConfigSynchro+0xaa>
 80026fc:	4603      	mov	r3, r0
{
 80026fe:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8002700:	2001      	movs	r0, #1
  tmpsmcr = htim->Instance->SMCR;
 8002702:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 8002704:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	2202      	movs	r2, #2
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800270e:	e9d1 5000 	ldrd	r5, r0, [r1]
  tmpsmcr = htim->Instance->SMCR;
 8002712:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002714:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002718:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 800271a:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800271e:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 8002720:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8002722:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8002724:	d060      	beq.n	80027e8 <HAL_TIM_SlaveConfigSynchro+0xf4>
 8002726:	d90f      	bls.n	8002748 <HAL_TIM_SlaveConfigSynchro+0x54>
 8002728:	2860      	cmp	r0, #96	; 0x60
 800272a:	d03a      	beq.n	80027a2 <HAL_TIM_SlaveConfigSynchro+0xae>
 800272c:	2870      	cmp	r0, #112	; 0x70
 800272e:	d10e      	bne.n	800274e <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002730:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 8002734:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 8002736:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002738:	432a      	orrs	r2, r5
 800273a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800273e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002742:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8002744:	60a2      	str	r2, [r4, #8]
 8002746:	e00f      	b.n	8002768 <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 8002748:	2840      	cmp	r0, #64	; 0x40
 800274a:	d03d      	beq.n	80027c8 <HAL_TIM_SlaveConfigSynchro+0xd4>
 800274c:	d907      	bls.n	800275e <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 800274e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8002750:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8002752:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800275a:	bcf0      	pop	{r4, r5, r6, r7}
 800275c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800275e:	2820      	cmp	r0, #32
 8002760:	d002      	beq.n	8002768 <HAL_TIM_SlaveConfigSynchro+0x74>
 8002762:	d912      	bls.n	800278a <HAL_TIM_SlaveConfigSynchro+0x96>
 8002764:	2830      	cmp	r0, #48	; 0x30
 8002766:	d1f2      	bne.n	800274e <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002768:	68e2      	ldr	r2, [r4, #12]
 800276a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800276e:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002770:	68e2      	ldr	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002772:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 8002774:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002776:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800277a:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800277c:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002780:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8002784:	4608      	mov	r0, r1
}
 8002786:	bcf0      	pop	{r4, r5, r6, r7}
 8002788:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800278a:	f030 0210 	bics.w	r2, r0, #16
 800278e:	d0eb      	beq.n	8002768 <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8002790:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8002792:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8002794:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800279c:	e7dd      	b.n	800275a <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 800279e:	2002      	movs	r0, #2
}
 80027a0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a2:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a4:	688d      	ldr	r5, [r1, #8]
 80027a6:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a8:	f020 0010 	bic.w	r0, r0, #16
 80027ac:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ae:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80027b0:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ba:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80027be:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80027c2:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80027c4:	6222      	str	r2, [r4, #32]
 80027c6:	e7cf      	b.n	8002768 <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80027c8:	2d05      	cmp	r5, #5
 80027ca:	d0c0      	beq.n	800274e <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 80027cc:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80027ce:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80027d0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80027d2:	f020 0001 	bic.w	r0, r0, #1
 80027d6:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80027d8:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027da:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80027de:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80027e2:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80027e4:	6225      	str	r5, [r4, #32]
      break;
 80027e6:	e7bf      	b.n	8002768 <HAL_TIM_SlaveConfigSynchro+0x74>
  tmpccer = TIMx->CCER;
 80027e8:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ea:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ec:	6888      	ldr	r0, [r1, #8]
 80027ee:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f0:	f026 0601 	bic.w	r6, r6, #1
 80027f4:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f6:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027f8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002800:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002802:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002806:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8002808:	6221      	str	r1, [r4, #32]
 800280a:	e7ad      	b.n	8002768 <HAL_TIM_SlaveConfigSynchro+0x74>

0800280c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d036      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x76>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002814:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002816:	2202      	movs	r2, #2
{
 8002818:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800281e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002822:	4d19      	ldr	r5, [pc, #100]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8002824:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002828:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282a:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 800282c:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800282e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002830:	d019      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002836:	d016      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800283e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002842:	4293      	cmp	r3, r2
 8002844:	d00f      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800284a:	4293      	cmp	r3, r2
 800284c:	d00b      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800284e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002856:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800285a:	4293      	cmp	r3, r2
 800285c:	d003      	beq.n	8002866 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800285e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002862:	4293      	cmp	r3, r2
 8002864:	d104      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002866:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002868:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800286c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002870:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002872:	2201      	movs	r2, #1
 8002874:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002878:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800287c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800287e:	4618      	mov	r0, r3
}
 8002880:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002882:	2002      	movs	r0, #2
}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40010000 	.word	0x40010000
 800288c:	40000400 	.word	0x40000400

08002890 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002890:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002894:	2b01      	cmp	r3, #1
 8002896:	d022      	beq.n	80028de <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
{
 8002898:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800289a:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 800289e:	4604      	mov	r4, r0
 80028a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028a4:	e9d1 2000 	ldrd	r2, r0, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80028a8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80028aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028ae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028b4:	e9d1 5004 	ldrd	r5, r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80028b8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028be:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028c4:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028c6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028c8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ce:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80028d0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80028d2:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80028d4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c

  return HAL_OK;
 80028d8:	4608      	mov	r0, r1
}
 80028da:	bc30      	pop	{r4, r5}
 80028dc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80028de:	2002      	movs	r0, #2
}
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop

080028e4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	2800      	cmp	r0, #0
 80028e6:	f000 8090 	beq.w	8002a0a <HAL_UART_Init+0x126>
{
 80028ea:	b570      	push	{r4, r5, r6, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028f0:	4604      	mov	r4, r0
 80028f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 8082 	beq.w	8002a00 <HAL_UART_Init+0x11c>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028fc:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028fe:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8002900:	2224      	movs	r2, #36	; 0x24
 8002902:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002906:	68d8      	ldr	r0, [r3, #12]
 8002908:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800290c:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8002910:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002912:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002914:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002916:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800291a:	4329      	orrs	r1, r5
 800291c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800291e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002920:	6965      	ldr	r5, [r4, #20]
 8002922:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8002924:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002928:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800292a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800292e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002930:	430a      	orrs	r2, r1
 8002932:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002938:	4935      	ldr	r1, [pc, #212]	; (8002a10 <HAL_UART_Init+0x12c>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800293a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800293e:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002940:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002942:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002944:	d035      	beq.n	80029b2 <HAL_UART_Init+0xce>
 8002946:	4a33      	ldr	r2, [pc, #204]	; (8002a14 <HAL_UART_Init+0x130>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d032      	beq.n	80029b2 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294c:	f7ff f994 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002950:	69e3      	ldr	r3, [r4, #28]
 8002952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002956:	d032      	beq.n	80029be <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	4e2f      	ldr	r6, [pc, #188]	; (8002a18 <HAL_UART_Init+0x134>)
 800295c:	2119      	movs	r1, #25
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	fba0 0101 	umull	r0, r1, r0, r1
 8002964:	0f9b      	lsrs	r3, r3, #30
 8002966:	f7fd fca3 	bl	80002b0 <__aeabi_uldivmod>
 800296a:	fba6 2500 	umull	r2, r5, r6, r0
 800296e:	096d      	lsrs	r5, r5, #5
 8002970:	2164      	movs	r1, #100	; 0x64
 8002972:	fb01 0215 	mls	r2, r1, r5, r0
 8002976:	0112      	lsls	r2, r2, #4
 8002978:	3232      	adds	r2, #50	; 0x32
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	fba6 1202 	umull	r1, r2, r6, r2
 8002980:	012d      	lsls	r5, r5, #4
 8002982:	eb05 1252 	add.w	r2, r5, r2, lsr #5
 8002986:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800298e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002996:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002998:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800299a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800299c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800299e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029a2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029a6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029aa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80029ae:	4628      	mov	r0, r5
}
 80029b0:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b2:	f7ff f971 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029b6:	69e3      	ldr	r3, [r4, #28]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029bc:	d1cc      	bne.n	8002958 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029be:	6862      	ldr	r2, [r4, #4]
 80029c0:	4e15      	ldr	r6, [pc, #84]	; (8002a18 <HAL_UART_Init+0x134>)
 80029c2:	1892      	adds	r2, r2, r2
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f04f 0119 	mov.w	r1, #25
 80029cc:	415b      	adcs	r3, r3
 80029ce:	fba0 0101 	umull	r0, r1, r0, r1
 80029d2:	f7fd fc6d 	bl	80002b0 <__aeabi_uldivmod>
 80029d6:	fba6 2100 	umull	r2, r1, r6, r0
 80029da:	094d      	lsrs	r5, r1, #5
 80029dc:	2164      	movs	r1, #100	; 0x64
 80029de:	fb01 0215 	mls	r2, r1, r5, r0
 80029e2:	00d2      	lsls	r2, r2, #3
 80029e4:	3232      	adds	r2, #50	; 0x32
 80029e6:	fba6 1202 	umull	r1, r2, r6, r2
 80029ea:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80029ee:	0912      	lsrs	r2, r2, #4
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80029f6:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80029fa:	440a      	add	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	e7c3      	b.n	8002988 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8002a00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002a04:	f7fe fc6a 	bl	80012dc <HAL_UART_MspInit>
 8002a08:	e778      	b.n	80028fc <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40011400 	.word	0x40011400
 8002a18:	51eb851f 	.word	0x51eb851f

08002a1c <HAL_UART_Transmit>:
{
 8002a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a20:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8002a22:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8002a26:	2820      	cmp	r0, #32
 8002a28:	d177      	bne.n	8002b1a <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8002a2a:	4688      	mov	r8, r1
 8002a2c:	2900      	cmp	r1, #0
 8002a2e:	d040      	beq.n	8002ab2 <HAL_UART_Transmit+0x96>
 8002a30:	4617      	mov	r7, r2
 8002a32:	2a00      	cmp	r2, #0
 8002a34:	d03d      	beq.n	8002ab2 <HAL_UART_Transmit+0x96>
 8002a36:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8002a38:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d06c      	beq.n	8002b1a <HAL_UART_Transmit+0xfe>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a40:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8002a42:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a44:	f04f 0900 	mov.w	r9, #0
 8002a48:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    __HAL_LOCK(huart);
 8002a4c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002a54:	f7fe feda 	bl	800180c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a58:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8002a5a:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002a60:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002a62:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a64:	d05c      	beq.n	8002b20 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8002a66:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8002a68:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8002a6a:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8002a6c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d07e      	beq.n	8002b72 <HAL_UART_Transmit+0x156>
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	1c69      	adds	r1, r5, #1
 8002a78:	d11e      	bne.n	8002ab8 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7a:	6813      	ldr	r3, [r2, #0]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	d5fc      	bpl.n	8002a7a <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8002a80:	f1b8 0f00 	cmp.w	r8, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a86:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002a8a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002a8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a94:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ec      	bne.n	8002a76 <HAL_UART_Transmit+0x5a>
 8002a9c:	1c68      	adds	r0, r5, #1
 8002a9e:	d145      	bne.n	8002b2c <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	0659      	lsls	r1, r3, #25
 8002aa4:	d5fc      	bpl.n	8002aa0 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002aac:	2000      	movs	r0, #0
}
 8002aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8002ab2:	2001      	movs	r0, #1
}
 8002ab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab8:	6813      	ldr	r3, [r2, #0]
 8002aba:	061f      	lsls	r7, r3, #24
 8002abc:	d4e0      	bmi.n	8002a80 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002abe:	b12d      	cbz	r5, 8002acc <HAL_UART_Transmit+0xb0>
 8002ac0:	f7fe fea4 	bl	800180c <HAL_GetTick>
 8002ac4:	1b80      	subs	r0, r0, r6
 8002ac6:	4285      	cmp	r5, r0
 8002ac8:	6822      	ldr	r2, [r4, #0]
 8002aca:	d2d4      	bcs.n	8002a76 <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002acc:	f102 030c 	add.w	r3, r2, #12
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	f102 000c 	add.w	r0, r2, #12
 8002adc:	e840 3100 	strex	r1, r3, [r0]
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d1f3      	bne.n	8002acc <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	f102 0314 	add.w	r3, r2, #20
 8002ae8:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aec:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af0:	f102 0014 	add.w	r0, r2, #20
 8002af4:	e840 3100 	strex	r1, r3, [r0]
 8002af8:	2900      	cmp	r1, #0
 8002afa:	d1f3      	bne.n	8002ae4 <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8002afc:	2320      	movs	r3, #32
 8002afe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002b02:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002b06:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      return HAL_TIMEOUT;
 8002b0a:	2003      	movs	r0, #3
}
 8002b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b10:	f839 3b02 	ldrh.w	r3, [r9], #2
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	e7b7      	b.n	8002a8a <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8002b1a:	2002      	movs	r0, #2
}
 8002b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b20:	6923      	ldr	r3, [r4, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d19f      	bne.n	8002a66 <HAL_UART_Transmit+0x4a>
 8002b26:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8002b28:	4698      	mov	r8, r3
 8002b2a:	e79c      	b.n	8002a66 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b2c:	6813      	ldr	r3, [r2, #0]
 8002b2e:	065b      	lsls	r3, r3, #25
 8002b30:	d4b9      	bmi.n	8002aa6 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b32:	b12d      	cbz	r5, 8002b40 <HAL_UART_Transmit+0x124>
 8002b34:	f7fe fe6a 	bl	800180c <HAL_GetTick>
 8002b38:	1b80      	subs	r0, r0, r6
 8002b3a:	4285      	cmp	r5, r0
 8002b3c:	6822      	ldr	r2, [r4, #0]
 8002b3e:	d2ad      	bcs.n	8002a9c <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b40:	f102 030c 	add.w	r3, r2, #12
 8002b44:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4c:	f102 000c 	add.w	r0, r2, #12
 8002b50:	e840 3100 	strex	r1, r3, [r0]
 8002b54:	2900      	cmp	r1, #0
 8002b56:	d1f3      	bne.n	8002b40 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	f102 0314 	add.w	r3, r2, #20
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b60:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	f102 0014 	add.w	r0, r2, #20
 8002b68:	e840 3100 	strex	r1, r3, [r0]
 8002b6c:	2900      	cmp	r1, #0
 8002b6e:	d1f3      	bne.n	8002b58 <HAL_UART_Transmit+0x13c>
 8002b70:	e7c4      	b.n	8002afc <HAL_UART_Transmit+0xe0>
 8002b72:	6822      	ldr	r2, [r4, #0]
 8002b74:	e792      	b.n	8002a9c <HAL_UART_Transmit+0x80>
 8002b76:	bf00      	nop

08002b78 <__errno>:
 8002b78:	4b01      	ldr	r3, [pc, #4]	; (8002b80 <__errno+0x8>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	2000000c 	.word	0x2000000c

08002b84 <__libc_init_array>:
 8002b84:	b570      	push	{r4, r5, r6, lr}
 8002b86:	4d0d      	ldr	r5, [pc, #52]	; (8002bbc <__libc_init_array+0x38>)
 8002b88:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <__libc_init_array+0x3c>)
 8002b8a:	1b64      	subs	r4, r4, r5
 8002b8c:	10a4      	asrs	r4, r4, #2
 8002b8e:	2600      	movs	r6, #0
 8002b90:	42a6      	cmp	r6, r4
 8002b92:	d109      	bne.n	8002ba8 <__libc_init_array+0x24>
 8002b94:	4d0b      	ldr	r5, [pc, #44]	; (8002bc4 <__libc_init_array+0x40>)
 8002b96:	4c0c      	ldr	r4, [pc, #48]	; (8002bc8 <__libc_init_array+0x44>)
 8002b98:	f000 fc68 	bl	800346c <_init>
 8002b9c:	1b64      	subs	r4, r4, r5
 8002b9e:	10a4      	asrs	r4, r4, #2
 8002ba0:	2600      	movs	r6, #0
 8002ba2:	42a6      	cmp	r6, r4
 8002ba4:	d105      	bne.n	8002bb2 <__libc_init_array+0x2e>
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bac:	4798      	blx	r3
 8002bae:	3601      	adds	r6, #1
 8002bb0:	e7ee      	b.n	8002b90 <__libc_init_array+0xc>
 8002bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb6:	4798      	blx	r3
 8002bb8:	3601      	adds	r6, #1
 8002bba:	e7f2      	b.n	8002ba2 <__libc_init_array+0x1e>
 8002bbc:	080035b4 	.word	0x080035b4
 8002bc0:	080035b4 	.word	0x080035b4
 8002bc4:	080035b4 	.word	0x080035b4
 8002bc8:	080035b8 	.word	0x080035b8

08002bcc <memset>:
 8002bcc:	4402      	add	r2, r0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d100      	bne.n	8002bd6 <memset+0xa>
 8002bd4:	4770      	bx	lr
 8002bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bda:	e7f9      	b.n	8002bd0 <memset+0x4>

08002bdc <_vsniprintf_r>:
 8002bdc:	b530      	push	{r4, r5, lr}
 8002bde:	1e14      	subs	r4, r2, #0
 8002be0:	4605      	mov	r5, r0
 8002be2:	b09b      	sub	sp, #108	; 0x6c
 8002be4:	4618      	mov	r0, r3
 8002be6:	da05      	bge.n	8002bf4 <_vsniprintf_r+0x18>
 8002be8:	238b      	movs	r3, #139	; 0x8b
 8002bea:	602b      	str	r3, [r5, #0]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf0:	b01b      	add	sp, #108	; 0x6c
 8002bf2:	bd30      	pop	{r4, r5, pc}
 8002bf4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002bf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002bfc:	bf14      	ite	ne
 8002bfe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8002c02:	4623      	moveq	r3, r4
 8002c04:	9302      	str	r3, [sp, #8]
 8002c06:	9305      	str	r3, [sp, #20]
 8002c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0c:	9100      	str	r1, [sp, #0]
 8002c0e:	9104      	str	r1, [sp, #16]
 8002c10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002c14:	4602      	mov	r2, r0
 8002c16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002c18:	4669      	mov	r1, sp
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f000 f874 	bl	8002d08 <_svfiprintf_r>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	bfbc      	itt	lt
 8002c24:	238b      	movlt	r3, #139	; 0x8b
 8002c26:	602b      	strlt	r3, [r5, #0]
 8002c28:	2c00      	cmp	r4, #0
 8002c2a:	d0e1      	beq.n	8002bf0 <_vsniprintf_r+0x14>
 8002c2c:	9b00      	ldr	r3, [sp, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e7dd      	b.n	8002bf0 <_vsniprintf_r+0x14>

08002c34 <vsniprintf>:
 8002c34:	b507      	push	{r0, r1, r2, lr}
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	460a      	mov	r2, r1
 8002c3c:	4601      	mov	r1, r0
 8002c3e:	4803      	ldr	r0, [pc, #12]	; (8002c4c <vsniprintf+0x18>)
 8002c40:	6800      	ldr	r0, [r0, #0]
 8002c42:	f7ff ffcb 	bl	8002bdc <_vsniprintf_r>
 8002c46:	b003      	add	sp, #12
 8002c48:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c4c:	2000000c 	.word	0x2000000c

08002c50 <__ssputs_r>:
 8002c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c54:	688e      	ldr	r6, [r1, #8]
 8002c56:	429e      	cmp	r6, r3
 8002c58:	4682      	mov	sl, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	4690      	mov	r8, r2
 8002c5e:	461f      	mov	r7, r3
 8002c60:	d838      	bhi.n	8002cd4 <__ssputs_r+0x84>
 8002c62:	898a      	ldrh	r2, [r1, #12]
 8002c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c68:	d032      	beq.n	8002cd0 <__ssputs_r+0x80>
 8002c6a:	6825      	ldr	r5, [r4, #0]
 8002c6c:	6909      	ldr	r1, [r1, #16]
 8002c6e:	eba5 0901 	sub.w	r9, r5, r1
 8002c72:	6965      	ldr	r5, [r4, #20]
 8002c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	444b      	add	r3, r9
 8002c80:	106d      	asrs	r5, r5, #1
 8002c82:	429d      	cmp	r5, r3
 8002c84:	bf38      	it	cc
 8002c86:	461d      	movcc	r5, r3
 8002c88:	0553      	lsls	r3, r2, #21
 8002c8a:	d531      	bpl.n	8002cf0 <__ssputs_r+0xa0>
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f000 fb47 	bl	8003320 <_malloc_r>
 8002c92:	4606      	mov	r6, r0
 8002c94:	b950      	cbnz	r0, 8002cac <__ssputs_r+0x5c>
 8002c96:	230c      	movs	r3, #12
 8002c98:	f8ca 3000 	str.w	r3, [sl]
 8002c9c:	89a3      	ldrh	r3, [r4, #12]
 8002c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca2:	81a3      	strh	r3, [r4, #12]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cac:	6921      	ldr	r1, [r4, #16]
 8002cae:	464a      	mov	r2, r9
 8002cb0:	f000 fabe 	bl	8003230 <memcpy>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	6126      	str	r6, [r4, #16]
 8002cc2:	6165      	str	r5, [r4, #20]
 8002cc4:	444e      	add	r6, r9
 8002cc6:	eba5 0509 	sub.w	r5, r5, r9
 8002cca:	6026      	str	r6, [r4, #0]
 8002ccc:	60a5      	str	r5, [r4, #8]
 8002cce:	463e      	mov	r6, r7
 8002cd0:	42be      	cmp	r6, r7
 8002cd2:	d900      	bls.n	8002cd6 <__ssputs_r+0x86>
 8002cd4:	463e      	mov	r6, r7
 8002cd6:	4632      	mov	r2, r6
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	4641      	mov	r1, r8
 8002cdc:	f000 fab6 	bl	800324c <memmove>
 8002ce0:	68a3      	ldr	r3, [r4, #8]
 8002ce2:	6822      	ldr	r2, [r4, #0]
 8002ce4:	1b9b      	subs	r3, r3, r6
 8002ce6:	4432      	add	r2, r6
 8002ce8:	60a3      	str	r3, [r4, #8]
 8002cea:	6022      	str	r2, [r4, #0]
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7db      	b.n	8002ca8 <__ssputs_r+0x58>
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	f000 fb6f 	bl	80033d4 <_realloc_r>
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d1e1      	bne.n	8002cc0 <__ssputs_r+0x70>
 8002cfc:	6921      	ldr	r1, [r4, #16]
 8002cfe:	4650      	mov	r0, sl
 8002d00:	f000 fabe 	bl	8003280 <_free_r>
 8002d04:	e7c7      	b.n	8002c96 <__ssputs_r+0x46>
	...

08002d08 <_svfiprintf_r>:
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	4698      	mov	r8, r3
 8002d0e:	898b      	ldrh	r3, [r1, #12]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	b09d      	sub	sp, #116	; 0x74
 8002d14:	4607      	mov	r7, r0
 8002d16:	460d      	mov	r5, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	d50e      	bpl.n	8002d3a <_svfiprintf_r+0x32>
 8002d1c:	690b      	ldr	r3, [r1, #16]
 8002d1e:	b963      	cbnz	r3, 8002d3a <_svfiprintf_r+0x32>
 8002d20:	2140      	movs	r1, #64	; 0x40
 8002d22:	f000 fafd 	bl	8003320 <_malloc_r>
 8002d26:	6028      	str	r0, [r5, #0]
 8002d28:	6128      	str	r0, [r5, #16]
 8002d2a:	b920      	cbnz	r0, 8002d36 <_svfiprintf_r+0x2e>
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d34:	e0d1      	b.n	8002eda <_svfiprintf_r+0x1d2>
 8002d36:	2340      	movs	r3, #64	; 0x40
 8002d38:	616b      	str	r3, [r5, #20]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d3e:	2320      	movs	r3, #32
 8002d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d48:	2330      	movs	r3, #48	; 0x30
 8002d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ef4 <_svfiprintf_r+0x1ec>
 8002d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d52:	f04f 0901 	mov.w	r9, #1
 8002d56:	4623      	mov	r3, r4
 8002d58:	469a      	mov	sl, r3
 8002d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d5e:	b10a      	cbz	r2, 8002d64 <_svfiprintf_r+0x5c>
 8002d60:	2a25      	cmp	r2, #37	; 0x25
 8002d62:	d1f9      	bne.n	8002d58 <_svfiprintf_r+0x50>
 8002d64:	ebba 0b04 	subs.w	fp, sl, r4
 8002d68:	d00b      	beq.n	8002d82 <_svfiprintf_r+0x7a>
 8002d6a:	465b      	mov	r3, fp
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	4638      	mov	r0, r7
 8002d72:	f7ff ff6d 	bl	8002c50 <__ssputs_r>
 8002d76:	3001      	adds	r0, #1
 8002d78:	f000 80aa 	beq.w	8002ed0 <_svfiprintf_r+0x1c8>
 8002d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d7e:	445a      	add	r2, fp
 8002d80:	9209      	str	r2, [sp, #36]	; 0x24
 8002d82:	f89a 3000 	ldrb.w	r3, [sl]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a2 	beq.w	8002ed0 <_svfiprintf_r+0x1c8>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d96:	f10a 0a01 	add.w	sl, sl, #1
 8002d9a:	9304      	str	r3, [sp, #16]
 8002d9c:	9307      	str	r3, [sp, #28]
 8002d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002da2:	931a      	str	r3, [sp, #104]	; 0x68
 8002da4:	4654      	mov	r4, sl
 8002da6:	2205      	movs	r2, #5
 8002da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dac:	4851      	ldr	r0, [pc, #324]	; (8002ef4 <_svfiprintf_r+0x1ec>)
 8002dae:	f7fd fa2f 	bl	8000210 <memchr>
 8002db2:	9a04      	ldr	r2, [sp, #16]
 8002db4:	b9d8      	cbnz	r0, 8002dee <_svfiprintf_r+0xe6>
 8002db6:	06d0      	lsls	r0, r2, #27
 8002db8:	bf44      	itt	mi
 8002dba:	2320      	movmi	r3, #32
 8002dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dc0:	0711      	lsls	r1, r2, #28
 8002dc2:	bf44      	itt	mi
 8002dc4:	232b      	movmi	r3, #43	; 0x2b
 8002dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dca:	f89a 3000 	ldrb.w	r3, [sl]
 8002dce:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd0:	d015      	beq.n	8002dfe <_svfiprintf_r+0xf6>
 8002dd2:	9a07      	ldr	r2, [sp, #28]
 8002dd4:	4654      	mov	r4, sl
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f04f 0c0a 	mov.w	ip, #10
 8002ddc:	4621      	mov	r1, r4
 8002dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de2:	3b30      	subs	r3, #48	; 0x30
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	d94e      	bls.n	8002e86 <_svfiprintf_r+0x17e>
 8002de8:	b1b0      	cbz	r0, 8002e18 <_svfiprintf_r+0x110>
 8002dea:	9207      	str	r2, [sp, #28]
 8002dec:	e014      	b.n	8002e18 <_svfiprintf_r+0x110>
 8002dee:	eba0 0308 	sub.w	r3, r0, r8
 8002df2:	fa09 f303 	lsl.w	r3, r9, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	9304      	str	r3, [sp, #16]
 8002dfa:	46a2      	mov	sl, r4
 8002dfc:	e7d2      	b.n	8002da4 <_svfiprintf_r+0x9c>
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	1d19      	adds	r1, r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	9103      	str	r1, [sp, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bfbb      	ittet	lt
 8002e0a:	425b      	neglt	r3, r3
 8002e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e10:	9307      	strge	r3, [sp, #28]
 8002e12:	9307      	strlt	r3, [sp, #28]
 8002e14:	bfb8      	it	lt
 8002e16:	9204      	strlt	r2, [sp, #16]
 8002e18:	7823      	ldrb	r3, [r4, #0]
 8002e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e1c:	d10c      	bne.n	8002e38 <_svfiprintf_r+0x130>
 8002e1e:	7863      	ldrb	r3, [r4, #1]
 8002e20:	2b2a      	cmp	r3, #42	; 0x2a
 8002e22:	d135      	bne.n	8002e90 <_svfiprintf_r+0x188>
 8002e24:	9b03      	ldr	r3, [sp, #12]
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	9203      	str	r2, [sp, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bfb8      	it	lt
 8002e30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002e34:	3402      	adds	r4, #2
 8002e36:	9305      	str	r3, [sp, #20]
 8002e38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f04 <_svfiprintf_r+0x1fc>
 8002e3c:	7821      	ldrb	r1, [r4, #0]
 8002e3e:	2203      	movs	r2, #3
 8002e40:	4650      	mov	r0, sl
 8002e42:	f7fd f9e5 	bl	8000210 <memchr>
 8002e46:	b140      	cbz	r0, 8002e5a <_svfiprintf_r+0x152>
 8002e48:	2340      	movs	r3, #64	; 0x40
 8002e4a:	eba0 000a 	sub.w	r0, r0, sl
 8002e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e52:	9b04      	ldr	r3, [sp, #16]
 8002e54:	4303      	orrs	r3, r0
 8002e56:	3401      	adds	r4, #1
 8002e58:	9304      	str	r3, [sp, #16]
 8002e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e5e:	4826      	ldr	r0, [pc, #152]	; (8002ef8 <_svfiprintf_r+0x1f0>)
 8002e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e64:	2206      	movs	r2, #6
 8002e66:	f7fd f9d3 	bl	8000210 <memchr>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d038      	beq.n	8002ee0 <_svfiprintf_r+0x1d8>
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <_svfiprintf_r+0x1f4>)
 8002e70:	bb1b      	cbnz	r3, 8002eba <_svfiprintf_r+0x1b2>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	3307      	adds	r3, #7
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	9303      	str	r3, [sp, #12]
 8002e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e80:	4433      	add	r3, r6
 8002e82:	9309      	str	r3, [sp, #36]	; 0x24
 8002e84:	e767      	b.n	8002d56 <_svfiprintf_r+0x4e>
 8002e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	e7a5      	b.n	8002ddc <_svfiprintf_r+0xd4>
 8002e90:	2300      	movs	r3, #0
 8002e92:	3401      	adds	r4, #1
 8002e94:	9305      	str	r3, [sp, #20]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 0c0a 	mov.w	ip, #10
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea2:	3a30      	subs	r2, #48	; 0x30
 8002ea4:	2a09      	cmp	r2, #9
 8002ea6:	d903      	bls.n	8002eb0 <_svfiprintf_r+0x1a8>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0c5      	beq.n	8002e38 <_svfiprintf_r+0x130>
 8002eac:	9105      	str	r1, [sp, #20]
 8002eae:	e7c3      	b.n	8002e38 <_svfiprintf_r+0x130>
 8002eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e7f0      	b.n	8002e9c <_svfiprintf_r+0x194>
 8002eba:	ab03      	add	r3, sp, #12
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <_svfiprintf_r+0x1f8>)
 8002ec2:	a904      	add	r1, sp, #16
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	f3af 8000 	nop.w
 8002eca:	1c42      	adds	r2, r0, #1
 8002ecc:	4606      	mov	r6, r0
 8002ece:	d1d6      	bne.n	8002e7e <_svfiprintf_r+0x176>
 8002ed0:	89ab      	ldrh	r3, [r5, #12]
 8002ed2:	065b      	lsls	r3, r3, #25
 8002ed4:	f53f af2c 	bmi.w	8002d30 <_svfiprintf_r+0x28>
 8002ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eda:	b01d      	add	sp, #116	; 0x74
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee0:	ab03      	add	r3, sp, #12
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	462a      	mov	r2, r5
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <_svfiprintf_r+0x1f8>)
 8002ee8:	a904      	add	r1, sp, #16
 8002eea:	4638      	mov	r0, r7
 8002eec:	f000 f87a 	bl	8002fe4 <_printf_i>
 8002ef0:	e7eb      	b.n	8002eca <_svfiprintf_r+0x1c2>
 8002ef2:	bf00      	nop
 8002ef4:	08003578 	.word	0x08003578
 8002ef8:	08003582 	.word	0x08003582
 8002efc:	00000000 	.word	0x00000000
 8002f00:	08002c51 	.word	0x08002c51
 8002f04:	0800357e 	.word	0x0800357e

08002f08 <_printf_common>:
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	4699      	mov	r9, r3
 8002f10:	688a      	ldr	r2, [r1, #8]
 8002f12:	690b      	ldr	r3, [r1, #16]
 8002f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bfb8      	it	lt
 8002f1c:	4613      	movlt	r3, r2
 8002f1e:	6033      	str	r3, [r6, #0]
 8002f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f24:	4607      	mov	r7, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	b10a      	cbz	r2, 8002f2e <_printf_common+0x26>
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	6033      	str	r3, [r6, #0]
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	0699      	lsls	r1, r3, #26
 8002f32:	bf42      	ittt	mi
 8002f34:	6833      	ldrmi	r3, [r6, #0]
 8002f36:	3302      	addmi	r3, #2
 8002f38:	6033      	strmi	r3, [r6, #0]
 8002f3a:	6825      	ldr	r5, [r4, #0]
 8002f3c:	f015 0506 	ands.w	r5, r5, #6
 8002f40:	d106      	bne.n	8002f50 <_printf_common+0x48>
 8002f42:	f104 0a19 	add.w	sl, r4, #25
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	6832      	ldr	r2, [r6, #0]
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	42ab      	cmp	r3, r5
 8002f4e:	dc26      	bgt.n	8002f9e <_printf_common+0x96>
 8002f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f54:	1e13      	subs	r3, r2, #0
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	bf18      	it	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	0692      	lsls	r2, r2, #26
 8002f5e:	d42b      	bmi.n	8002fb8 <_printf_common+0xb0>
 8002f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f64:	4649      	mov	r1, r9
 8002f66:	4638      	mov	r0, r7
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d01e      	beq.n	8002fac <_printf_common+0xa4>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	68e5      	ldr	r5, [r4, #12]
 8002f72:	6832      	ldr	r2, [r6, #0]
 8002f74:	f003 0306 	and.w	r3, r3, #6
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	bf08      	it	eq
 8002f7c:	1aad      	subeq	r5, r5, r2
 8002f7e:	68a3      	ldr	r3, [r4, #8]
 8002f80:	6922      	ldr	r2, [r4, #16]
 8002f82:	bf0c      	ite	eq
 8002f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f88:	2500      	movne	r5, #0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	bfc4      	itt	gt
 8002f8e:	1a9b      	subgt	r3, r3, r2
 8002f90:	18ed      	addgt	r5, r5, r3
 8002f92:	2600      	movs	r6, #0
 8002f94:	341a      	adds	r4, #26
 8002f96:	42b5      	cmp	r5, r6
 8002f98:	d11a      	bne.n	8002fd0 <_printf_common+0xc8>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e008      	b.n	8002fb0 <_printf_common+0xa8>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	47c0      	blx	r8
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d103      	bne.n	8002fb4 <_printf_common+0xac>
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb4:	3501      	adds	r5, #1
 8002fb6:	e7c6      	b.n	8002f46 <_printf_common+0x3e>
 8002fb8:	18e1      	adds	r1, r4, r3
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	2030      	movs	r0, #48	; 0x30
 8002fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fc2:	4422      	add	r2, r4
 8002fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fcc:	3302      	adds	r3, #2
 8002fce:	e7c7      	b.n	8002f60 <_printf_common+0x58>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	47c0      	blx	r8
 8002fda:	3001      	adds	r0, #1
 8002fdc:	d0e6      	beq.n	8002fac <_printf_common+0xa4>
 8002fde:	3601      	adds	r6, #1
 8002fe0:	e7d9      	b.n	8002f96 <_printf_common+0x8e>
	...

08002fe4 <_printf_i>:
 8002fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe8:	460c      	mov	r4, r1
 8002fea:	4691      	mov	r9, r2
 8002fec:	7e27      	ldrb	r7, [r4, #24]
 8002fee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ff0:	2f78      	cmp	r7, #120	; 0x78
 8002ff2:	4680      	mov	r8, r0
 8002ff4:	469a      	mov	sl, r3
 8002ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ffa:	d807      	bhi.n	800300c <_printf_i+0x28>
 8002ffc:	2f62      	cmp	r7, #98	; 0x62
 8002ffe:	d80a      	bhi.n	8003016 <_printf_i+0x32>
 8003000:	2f00      	cmp	r7, #0
 8003002:	f000 80d8 	beq.w	80031b6 <_printf_i+0x1d2>
 8003006:	2f58      	cmp	r7, #88	; 0x58
 8003008:	f000 80a3 	beq.w	8003152 <_printf_i+0x16e>
 800300c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003014:	e03a      	b.n	800308c <_printf_i+0xa8>
 8003016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800301a:	2b15      	cmp	r3, #21
 800301c:	d8f6      	bhi.n	800300c <_printf_i+0x28>
 800301e:	a001      	add	r0, pc, #4	; (adr r0, 8003024 <_printf_i+0x40>)
 8003020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003024:	0800307d 	.word	0x0800307d
 8003028:	08003091 	.word	0x08003091
 800302c:	0800300d 	.word	0x0800300d
 8003030:	0800300d 	.word	0x0800300d
 8003034:	0800300d 	.word	0x0800300d
 8003038:	0800300d 	.word	0x0800300d
 800303c:	08003091 	.word	0x08003091
 8003040:	0800300d 	.word	0x0800300d
 8003044:	0800300d 	.word	0x0800300d
 8003048:	0800300d 	.word	0x0800300d
 800304c:	0800300d 	.word	0x0800300d
 8003050:	0800319d 	.word	0x0800319d
 8003054:	080030c1 	.word	0x080030c1
 8003058:	0800317f 	.word	0x0800317f
 800305c:	0800300d 	.word	0x0800300d
 8003060:	0800300d 	.word	0x0800300d
 8003064:	080031bf 	.word	0x080031bf
 8003068:	0800300d 	.word	0x0800300d
 800306c:	080030c1 	.word	0x080030c1
 8003070:	0800300d 	.word	0x0800300d
 8003074:	0800300d 	.word	0x0800300d
 8003078:	08003187 	.word	0x08003187
 800307c:	680b      	ldr	r3, [r1, #0]
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	600a      	str	r2, [r1, #0]
 8003084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800308c:	2301      	movs	r3, #1
 800308e:	e0a3      	b.n	80031d8 <_printf_i+0x1f4>
 8003090:	6825      	ldr	r5, [r4, #0]
 8003092:	6808      	ldr	r0, [r1, #0]
 8003094:	062e      	lsls	r6, r5, #24
 8003096:	f100 0304 	add.w	r3, r0, #4
 800309a:	d50a      	bpl.n	80030b2 <_printf_i+0xce>
 800309c:	6805      	ldr	r5, [r0, #0]
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	da03      	bge.n	80030ac <_printf_i+0xc8>
 80030a4:	232d      	movs	r3, #45	; 0x2d
 80030a6:	426d      	negs	r5, r5
 80030a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030ac:	485e      	ldr	r0, [pc, #376]	; (8003228 <_printf_i+0x244>)
 80030ae:	230a      	movs	r3, #10
 80030b0:	e019      	b.n	80030e6 <_printf_i+0x102>
 80030b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80030b6:	6805      	ldr	r5, [r0, #0]
 80030b8:	600b      	str	r3, [r1, #0]
 80030ba:	bf18      	it	ne
 80030bc:	b22d      	sxthne	r5, r5
 80030be:	e7ef      	b.n	80030a0 <_printf_i+0xbc>
 80030c0:	680b      	ldr	r3, [r1, #0]
 80030c2:	6825      	ldr	r5, [r4, #0]
 80030c4:	1d18      	adds	r0, r3, #4
 80030c6:	6008      	str	r0, [r1, #0]
 80030c8:	0628      	lsls	r0, r5, #24
 80030ca:	d501      	bpl.n	80030d0 <_printf_i+0xec>
 80030cc:	681d      	ldr	r5, [r3, #0]
 80030ce:	e002      	b.n	80030d6 <_printf_i+0xf2>
 80030d0:	0669      	lsls	r1, r5, #25
 80030d2:	d5fb      	bpl.n	80030cc <_printf_i+0xe8>
 80030d4:	881d      	ldrh	r5, [r3, #0]
 80030d6:	4854      	ldr	r0, [pc, #336]	; (8003228 <_printf_i+0x244>)
 80030d8:	2f6f      	cmp	r7, #111	; 0x6f
 80030da:	bf0c      	ite	eq
 80030dc:	2308      	moveq	r3, #8
 80030de:	230a      	movne	r3, #10
 80030e0:	2100      	movs	r1, #0
 80030e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030e6:	6866      	ldr	r6, [r4, #4]
 80030e8:	60a6      	str	r6, [r4, #8]
 80030ea:	2e00      	cmp	r6, #0
 80030ec:	bfa2      	ittt	ge
 80030ee:	6821      	ldrge	r1, [r4, #0]
 80030f0:	f021 0104 	bicge.w	r1, r1, #4
 80030f4:	6021      	strge	r1, [r4, #0]
 80030f6:	b90d      	cbnz	r5, 80030fc <_printf_i+0x118>
 80030f8:	2e00      	cmp	r6, #0
 80030fa:	d04d      	beq.n	8003198 <_printf_i+0x1b4>
 80030fc:	4616      	mov	r6, r2
 80030fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003102:	fb03 5711 	mls	r7, r3, r1, r5
 8003106:	5dc7      	ldrb	r7, [r0, r7]
 8003108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800310c:	462f      	mov	r7, r5
 800310e:	42bb      	cmp	r3, r7
 8003110:	460d      	mov	r5, r1
 8003112:	d9f4      	bls.n	80030fe <_printf_i+0x11a>
 8003114:	2b08      	cmp	r3, #8
 8003116:	d10b      	bne.n	8003130 <_printf_i+0x14c>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	07df      	lsls	r7, r3, #31
 800311c:	d508      	bpl.n	8003130 <_printf_i+0x14c>
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	6861      	ldr	r1, [r4, #4]
 8003122:	4299      	cmp	r1, r3
 8003124:	bfde      	ittt	le
 8003126:	2330      	movle	r3, #48	; 0x30
 8003128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800312c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003130:	1b92      	subs	r2, r2, r6
 8003132:	6122      	str	r2, [r4, #16]
 8003134:	f8cd a000 	str.w	sl, [sp]
 8003138:	464b      	mov	r3, r9
 800313a:	aa03      	add	r2, sp, #12
 800313c:	4621      	mov	r1, r4
 800313e:	4640      	mov	r0, r8
 8003140:	f7ff fee2 	bl	8002f08 <_printf_common>
 8003144:	3001      	adds	r0, #1
 8003146:	d14c      	bne.n	80031e2 <_printf_i+0x1fe>
 8003148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800314c:	b004      	add	sp, #16
 800314e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003152:	4835      	ldr	r0, [pc, #212]	; (8003228 <_printf_i+0x244>)
 8003154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	680e      	ldr	r6, [r1, #0]
 800315c:	061f      	lsls	r7, r3, #24
 800315e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003162:	600e      	str	r6, [r1, #0]
 8003164:	d514      	bpl.n	8003190 <_printf_i+0x1ac>
 8003166:	07d9      	lsls	r1, r3, #31
 8003168:	bf44      	itt	mi
 800316a:	f043 0320 	orrmi.w	r3, r3, #32
 800316e:	6023      	strmi	r3, [r4, #0]
 8003170:	b91d      	cbnz	r5, 800317a <_printf_i+0x196>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	f023 0320 	bic.w	r3, r3, #32
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	2310      	movs	r3, #16
 800317c:	e7b0      	b.n	80030e0 <_printf_i+0xfc>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	2378      	movs	r3, #120	; 0x78
 8003188:	4828      	ldr	r0, [pc, #160]	; (800322c <_printf_i+0x248>)
 800318a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800318e:	e7e3      	b.n	8003158 <_printf_i+0x174>
 8003190:	065e      	lsls	r6, r3, #25
 8003192:	bf48      	it	mi
 8003194:	b2ad      	uxthmi	r5, r5
 8003196:	e7e6      	b.n	8003166 <_printf_i+0x182>
 8003198:	4616      	mov	r6, r2
 800319a:	e7bb      	b.n	8003114 <_printf_i+0x130>
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	6826      	ldr	r6, [r4, #0]
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	1d1d      	adds	r5, r3, #4
 80031a4:	600d      	str	r5, [r1, #0]
 80031a6:	0635      	lsls	r5, r6, #24
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	d501      	bpl.n	80031b0 <_printf_i+0x1cc>
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	e002      	b.n	80031b6 <_printf_i+0x1d2>
 80031b0:	0671      	lsls	r1, r6, #25
 80031b2:	d5fb      	bpl.n	80031ac <_printf_i+0x1c8>
 80031b4:	8018      	strh	r0, [r3, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	6123      	str	r3, [r4, #16]
 80031ba:	4616      	mov	r6, r2
 80031bc:	e7ba      	b.n	8003134 <_printf_i+0x150>
 80031be:	680b      	ldr	r3, [r1, #0]
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	600a      	str	r2, [r1, #0]
 80031c4:	681e      	ldr	r6, [r3, #0]
 80031c6:	6862      	ldr	r2, [r4, #4]
 80031c8:	2100      	movs	r1, #0
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7fd f820 	bl	8000210 <memchr>
 80031d0:	b108      	cbz	r0, 80031d6 <_printf_i+0x1f2>
 80031d2:	1b80      	subs	r0, r0, r6
 80031d4:	6060      	str	r0, [r4, #4]
 80031d6:	6863      	ldr	r3, [r4, #4]
 80031d8:	6123      	str	r3, [r4, #16]
 80031da:	2300      	movs	r3, #0
 80031dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e0:	e7a8      	b.n	8003134 <_printf_i+0x150>
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	4632      	mov	r2, r6
 80031e6:	4649      	mov	r1, r9
 80031e8:	4640      	mov	r0, r8
 80031ea:	47d0      	blx	sl
 80031ec:	3001      	adds	r0, #1
 80031ee:	d0ab      	beq.n	8003148 <_printf_i+0x164>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	079b      	lsls	r3, r3, #30
 80031f4:	d413      	bmi.n	800321e <_printf_i+0x23a>
 80031f6:	68e0      	ldr	r0, [r4, #12]
 80031f8:	9b03      	ldr	r3, [sp, #12]
 80031fa:	4298      	cmp	r0, r3
 80031fc:	bfb8      	it	lt
 80031fe:	4618      	movlt	r0, r3
 8003200:	e7a4      	b.n	800314c <_printf_i+0x168>
 8003202:	2301      	movs	r3, #1
 8003204:	4632      	mov	r2, r6
 8003206:	4649      	mov	r1, r9
 8003208:	4640      	mov	r0, r8
 800320a:	47d0      	blx	sl
 800320c:	3001      	adds	r0, #1
 800320e:	d09b      	beq.n	8003148 <_printf_i+0x164>
 8003210:	3501      	adds	r5, #1
 8003212:	68e3      	ldr	r3, [r4, #12]
 8003214:	9903      	ldr	r1, [sp, #12]
 8003216:	1a5b      	subs	r3, r3, r1
 8003218:	42ab      	cmp	r3, r5
 800321a:	dcf2      	bgt.n	8003202 <_printf_i+0x21e>
 800321c:	e7eb      	b.n	80031f6 <_printf_i+0x212>
 800321e:	2500      	movs	r5, #0
 8003220:	f104 0619 	add.w	r6, r4, #25
 8003224:	e7f5      	b.n	8003212 <_printf_i+0x22e>
 8003226:	bf00      	nop
 8003228:	08003589 	.word	0x08003589
 800322c:	0800359a 	.word	0x0800359a

08003230 <memcpy>:
 8003230:	440a      	add	r2, r1
 8003232:	4291      	cmp	r1, r2
 8003234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003238:	d100      	bne.n	800323c <memcpy+0xc>
 800323a:	4770      	bx	lr
 800323c:	b510      	push	{r4, lr}
 800323e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003246:	4291      	cmp	r1, r2
 8003248:	d1f9      	bne.n	800323e <memcpy+0xe>
 800324a:	bd10      	pop	{r4, pc}

0800324c <memmove>:
 800324c:	4288      	cmp	r0, r1
 800324e:	b510      	push	{r4, lr}
 8003250:	eb01 0402 	add.w	r4, r1, r2
 8003254:	d902      	bls.n	800325c <memmove+0x10>
 8003256:	4284      	cmp	r4, r0
 8003258:	4623      	mov	r3, r4
 800325a:	d807      	bhi.n	800326c <memmove+0x20>
 800325c:	1e43      	subs	r3, r0, #1
 800325e:	42a1      	cmp	r1, r4
 8003260:	d008      	beq.n	8003274 <memmove+0x28>
 8003262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800326a:	e7f8      	b.n	800325e <memmove+0x12>
 800326c:	4402      	add	r2, r0
 800326e:	4601      	mov	r1, r0
 8003270:	428a      	cmp	r2, r1
 8003272:	d100      	bne.n	8003276 <memmove+0x2a>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800327a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800327e:	e7f7      	b.n	8003270 <memmove+0x24>

08003280 <_free_r>:
 8003280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003282:	2900      	cmp	r1, #0
 8003284:	d048      	beq.n	8003318 <_free_r+0x98>
 8003286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800328a:	9001      	str	r0, [sp, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f1a1 0404 	sub.w	r4, r1, #4
 8003292:	bfb8      	it	lt
 8003294:	18e4      	addlt	r4, r4, r3
 8003296:	f000 f8d3 	bl	8003440 <__malloc_lock>
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <_free_r+0x9c>)
 800329c:	9801      	ldr	r0, [sp, #4]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	4615      	mov	r5, r2
 80032a2:	b933      	cbnz	r3, 80032b2 <_free_r+0x32>
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6014      	str	r4, [r2, #0]
 80032a8:	b003      	add	sp, #12
 80032aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032ae:	f000 b8cd 	b.w	800344c <__malloc_unlock>
 80032b2:	42a3      	cmp	r3, r4
 80032b4:	d90b      	bls.n	80032ce <_free_r+0x4e>
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	1862      	adds	r2, r4, r1
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bf04      	itt	eq
 80032be:	681a      	ldreq	r2, [r3, #0]
 80032c0:	685b      	ldreq	r3, [r3, #4]
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	bf04      	itt	eq
 80032c6:	1852      	addeq	r2, r2, r1
 80032c8:	6022      	streq	r2, [r4, #0]
 80032ca:	602c      	str	r4, [r5, #0]
 80032cc:	e7ec      	b.n	80032a8 <_free_r+0x28>
 80032ce:	461a      	mov	r2, r3
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	b10b      	cbz	r3, 80032d8 <_free_r+0x58>
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d9fa      	bls.n	80032ce <_free_r+0x4e>
 80032d8:	6811      	ldr	r1, [r2, #0]
 80032da:	1855      	adds	r5, r2, r1
 80032dc:	42a5      	cmp	r5, r4
 80032de:	d10b      	bne.n	80032f8 <_free_r+0x78>
 80032e0:	6824      	ldr	r4, [r4, #0]
 80032e2:	4421      	add	r1, r4
 80032e4:	1854      	adds	r4, r2, r1
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	d1dd      	bne.n	80032a8 <_free_r+0x28>
 80032ec:	681c      	ldr	r4, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6053      	str	r3, [r2, #4]
 80032f2:	4421      	add	r1, r4
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	e7d7      	b.n	80032a8 <_free_r+0x28>
 80032f8:	d902      	bls.n	8003300 <_free_r+0x80>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6003      	str	r3, [r0, #0]
 80032fe:	e7d3      	b.n	80032a8 <_free_r+0x28>
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	1961      	adds	r1, r4, r5
 8003304:	428b      	cmp	r3, r1
 8003306:	bf04      	itt	eq
 8003308:	6819      	ldreq	r1, [r3, #0]
 800330a:	685b      	ldreq	r3, [r3, #4]
 800330c:	6063      	str	r3, [r4, #4]
 800330e:	bf04      	itt	eq
 8003310:	1949      	addeq	r1, r1, r5
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	6054      	str	r4, [r2, #4]
 8003316:	e7c7      	b.n	80032a8 <_free_r+0x28>
 8003318:	b003      	add	sp, #12
 800331a:	bd30      	pop	{r4, r5, pc}
 800331c:	20000098 	.word	0x20000098

08003320 <_malloc_r>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	1ccd      	adds	r5, r1, #3
 8003324:	f025 0503 	bic.w	r5, r5, #3
 8003328:	3508      	adds	r5, #8
 800332a:	2d0c      	cmp	r5, #12
 800332c:	bf38      	it	cc
 800332e:	250c      	movcc	r5, #12
 8003330:	2d00      	cmp	r5, #0
 8003332:	4606      	mov	r6, r0
 8003334:	db01      	blt.n	800333a <_malloc_r+0x1a>
 8003336:	42a9      	cmp	r1, r5
 8003338:	d903      	bls.n	8003342 <_malloc_r+0x22>
 800333a:	230c      	movs	r3, #12
 800333c:	6033      	str	r3, [r6, #0]
 800333e:	2000      	movs	r0, #0
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003342:	f000 f87d 	bl	8003440 <__malloc_lock>
 8003346:	4921      	ldr	r1, [pc, #132]	; (80033cc <_malloc_r+0xac>)
 8003348:	680a      	ldr	r2, [r1, #0]
 800334a:	4614      	mov	r4, r2
 800334c:	b99c      	cbnz	r4, 8003376 <_malloc_r+0x56>
 800334e:	4f20      	ldr	r7, [pc, #128]	; (80033d0 <_malloc_r+0xb0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b923      	cbnz	r3, 800335e <_malloc_r+0x3e>
 8003354:	4621      	mov	r1, r4
 8003356:	4630      	mov	r0, r6
 8003358:	f000 f862 	bl	8003420 <_sbrk_r>
 800335c:	6038      	str	r0, [r7, #0]
 800335e:	4629      	mov	r1, r5
 8003360:	4630      	mov	r0, r6
 8003362:	f000 f85d 	bl	8003420 <_sbrk_r>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	d123      	bne.n	80033b2 <_malloc_r+0x92>
 800336a:	230c      	movs	r3, #12
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	4630      	mov	r0, r6
 8003370:	f000 f86c 	bl	800344c <__malloc_unlock>
 8003374:	e7e3      	b.n	800333e <_malloc_r+0x1e>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	1b5b      	subs	r3, r3, r5
 800337a:	d417      	bmi.n	80033ac <_malloc_r+0x8c>
 800337c:	2b0b      	cmp	r3, #11
 800337e:	d903      	bls.n	8003388 <_malloc_r+0x68>
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	441c      	add	r4, r3
 8003384:	6025      	str	r5, [r4, #0]
 8003386:	e004      	b.n	8003392 <_malloc_r+0x72>
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	42a2      	cmp	r2, r4
 800338c:	bf0c      	ite	eq
 800338e:	600b      	streq	r3, [r1, #0]
 8003390:	6053      	strne	r3, [r2, #4]
 8003392:	4630      	mov	r0, r6
 8003394:	f000 f85a 	bl	800344c <__malloc_unlock>
 8003398:	f104 000b 	add.w	r0, r4, #11
 800339c:	1d23      	adds	r3, r4, #4
 800339e:	f020 0007 	bic.w	r0, r0, #7
 80033a2:	1ac2      	subs	r2, r0, r3
 80033a4:	d0cc      	beq.n	8003340 <_malloc_r+0x20>
 80033a6:	1a1b      	subs	r3, r3, r0
 80033a8:	50a3      	str	r3, [r4, r2]
 80033aa:	e7c9      	b.n	8003340 <_malloc_r+0x20>
 80033ac:	4622      	mov	r2, r4
 80033ae:	6864      	ldr	r4, [r4, #4]
 80033b0:	e7cc      	b.n	800334c <_malloc_r+0x2c>
 80033b2:	1cc4      	adds	r4, r0, #3
 80033b4:	f024 0403 	bic.w	r4, r4, #3
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d0e3      	beq.n	8003384 <_malloc_r+0x64>
 80033bc:	1a21      	subs	r1, r4, r0
 80033be:	4630      	mov	r0, r6
 80033c0:	f000 f82e 	bl	8003420 <_sbrk_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	d1dd      	bne.n	8003384 <_malloc_r+0x64>
 80033c8:	e7cf      	b.n	800336a <_malloc_r+0x4a>
 80033ca:	bf00      	nop
 80033cc:	20000098 	.word	0x20000098
 80033d0:	2000009c 	.word	0x2000009c

080033d4 <_realloc_r>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	4607      	mov	r7, r0
 80033d8:	4614      	mov	r4, r2
 80033da:	460e      	mov	r6, r1
 80033dc:	b921      	cbnz	r1, 80033e8 <_realloc_r+0x14>
 80033de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033e2:	4611      	mov	r1, r2
 80033e4:	f7ff bf9c 	b.w	8003320 <_malloc_r>
 80033e8:	b922      	cbnz	r2, 80033f4 <_realloc_r+0x20>
 80033ea:	f7ff ff49 	bl	8003280 <_free_r>
 80033ee:	4625      	mov	r5, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f4:	f000 f830 	bl	8003458 <_malloc_usable_size_r>
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d20f      	bcs.n	800341c <_realloc_r+0x48>
 80033fc:	4621      	mov	r1, r4
 80033fe:	4638      	mov	r0, r7
 8003400:	f7ff ff8e 	bl	8003320 <_malloc_r>
 8003404:	4605      	mov	r5, r0
 8003406:	2800      	cmp	r0, #0
 8003408:	d0f2      	beq.n	80033f0 <_realloc_r+0x1c>
 800340a:	4631      	mov	r1, r6
 800340c:	4622      	mov	r2, r4
 800340e:	f7ff ff0f 	bl	8003230 <memcpy>
 8003412:	4631      	mov	r1, r6
 8003414:	4638      	mov	r0, r7
 8003416:	f7ff ff33 	bl	8003280 <_free_r>
 800341a:	e7e9      	b.n	80033f0 <_realloc_r+0x1c>
 800341c:	4635      	mov	r5, r6
 800341e:	e7e7      	b.n	80033f0 <_realloc_r+0x1c>

08003420 <_sbrk_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4d06      	ldr	r5, [pc, #24]	; (800343c <_sbrk_r+0x1c>)
 8003424:	2300      	movs	r3, #0
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	f7fd ffe0 	bl	80013f0 <_sbrk>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_sbrk_r+0x1a>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_sbrk_r+0x1a>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	20004c1c 	.word	0x20004c1c

08003440 <__malloc_lock>:
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <__malloc_lock+0x8>)
 8003442:	f000 b811 	b.w	8003468 <__retarget_lock_acquire_recursive>
 8003446:	bf00      	nop
 8003448:	20004c24 	.word	0x20004c24

0800344c <__malloc_unlock>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__malloc_unlock+0x8>)
 800344e:	f000 b80c 	b.w	800346a <__retarget_lock_release_recursive>
 8003452:	bf00      	nop
 8003454:	20004c24 	.word	0x20004c24

08003458 <_malloc_usable_size_r>:
 8003458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345c:	1f18      	subs	r0, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfbc      	itt	lt
 8003462:	580b      	ldrlt	r3, [r1, r0]
 8003464:	18c0      	addlt	r0, r0, r3
 8003466:	4770      	bx	lr

08003468 <__retarget_lock_acquire_recursive>:
 8003468:	4770      	bx	lr

0800346a <__retarget_lock_release_recursive>:
 800346a:	4770      	bx	lr

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
